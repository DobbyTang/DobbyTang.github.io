<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TANG BLOG</title>
  <subtitle>Tang的技术笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tangpj.com/"/>
  <updated>2016-09-23T07:27:15.000Z</updated>
  <id>http://www.tangpj.com/</id>
  
  <author>
    <name>Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>￼Android架构篇－－从零开始搭建 一个完善的 MVP模式开发框架（一），MVP模式的简单介绍篇</title>
    <link href="http://www.tangpj.com/2016/09/23/mvp-structure-one/"/>
    <id>http://www.tangpj.com/2016/09/23/mvp-structure-one/</id>
    <published>2016-09-23T07:19:33.000Z</published>
    <updated>2016-09-23T07:27:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>摘要：</em> 在MVVM成熟之前MVP模式在Android上有被神化的趋势，笔者曾经在商业项目中从零开始大规模采用过MVP模式对项目进行开发。在使用MVP模式进行开发的时候发现项目的结构模式对开发是有一定的影响的，在这里笔者会对这一问题进行探讨。希望通过这篇blog能让读者了解如何使用MVP模式搭建一个功能完善的MVP模式开发框架，避免一些笔者认为比较严重的问题。</p>
<a id="more"></a>
<h1 id="为什么要使用MVP模式"><a href="#为什么要使用MVP模式" class="headerlink" title="为什么要使用MVP模式"></a>为什么要使用MVP模式</h1><p>在传统的Android开发中，我们一般是使用MVC模式进行开发的。<br>传统MVC模式介绍：</p>
<ol>
<li>View: 视图层，对应xml文件</li>
<li>Controller:  控制层，对应Activity和Fragment层，进行数据处理</li>
<li>Model：实体层，负责获取实体数据</li>
</ol>
<p>在Android开发中采用MVC模式的一个最大的弊端就是xml作为View层视图能力实在太弱，所以一般情况下我们都是通过Controller层来辅助处理一些视图的。这样的结果就导致Controller既作为控制层的同时又承担了View层的大部分功能，采用MVC模式往往会导致Activity和Fragment中的代码非常复杂。我们将Android中采用的MVC模式称为MV模式更加恰当。</p>
<p>MVP模式介绍：</p>
<ol>
<li>View: 视图层，对应xml文件与Activity/Fragment</li>
<li>Presenter: 逻辑控制层，同时持有View和Model对象</li>
<li>Model: 实体层，负责获取实体数据</li>
</ol>
<p>MVP模式的流程图如下：<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp.jpg" alt="" title="MVP模式图解"></p>
<p>采用MVP模式的优势是：</p>
<ol>
<li>把业务逻辑抽离到Presenter层中，View层专注于UI的处理。</li>
<li>分离视图逻辑与业务逻辑，达到解耦的目的。</li>
<li>提高代码的阅读性。</li>
<li>Presenter被抽象成接口，可以根据Presenter的实现方式进行单元测试。</li>
<li>可拓展性强。</li>
</ol>
<p>采用MVP模式的缺点：</p>
<ol>
<li>项目结构会对后期的开发和维护有一定的影响。具体视APP的体量而定。</li>
<li>代码量会增多，如何避免编写过多功能相似的重复代码是使用MVP开发的一个重点要处理的问题。</li>
<li>有一定的学习成本。</li>
</ol>
<p>综上所述，在Android上采用MVP模式的优势是：大大优化代码的维护性与拓展性的同时对代码进行深度解耦，使各个层级的分工更加明晰。</p>
<h1 id="Android上MVP模式的简单应用"><a href="#Android上MVP模式的简单应用" class="headerlink" title="Android上MVP模式的简单应用"></a>Android上MVP模式的简单应用</h1><p>先来看看一个简单用mvp模式模拟登陆的demo，下面的示例代码和其它简单介绍MVP模式的代码没有太大区别。如果有了解过的同学可以直接跳过看下一章关于如何优化MVP模式的结构的文章。</p>
<p>下面我们来看看在Android上用MVP模式实现简单的登录逻辑的方式：</p>
<h2 id="登陆界面："><a href="#登陆界面：" class="headerlink" title=". 登陆界面："></a>. 登陆界面：</h2><p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_login_activity.png" alt="" title="登陆界面"></p>
<ol>
<li>项目的结构：<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_login_structure.png" alt="" title="项目结构"></li>
</ol>
<p>从上面的代码结构图可看出，用MVP模式实现登陆模块需要创建6个文件，分别是M、V、P接口文件和接口的对应实现。其中LoginActivity就是View层的具体实现。这样的好处时Activity组件只需要负责处理UI相关逻辑就可以了，而相关的业务逻辑全部抽象到Presenter层中处理。通过这种方式能够很好的避免传统Android开发中的Activity/Fragment等UI组件既负责处理UI逻辑又处理业务逻辑的结果。</p>
<h2 id="代码实现："><a href="#代码实现：" class="headerlink" title=". 代码实现："></a>. 代码实现：</h2><p>说了这么多，最后我们来看看代码的实现吧。</p>
<ol>
<li>ILoginModel:<figure class="highlight plain"><figcaption><span>interface ILoginModel &#123;  </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    void login(String name ,String password);  </div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
</li>
</ol>
<p>`</p>
<ol>
<li>ILoginPresenter<figure class="highlight plain"><figcaption><span>interface ILoginPresenter &#123;  </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">    void loginToServer(String userName,String password);  </div><div class="line">  </div><div class="line">    void loginSucceed();  </div><div class="line">&#125;</div><div class="line">``</div><div class="line">`</div><div class="line">3. ILoginView</div><div class="line">```public interface ILoginView &#123;  </div><div class="line">  </div><div class="line">    void showProgress(boolean enable);  </div><div class="line">  </div><div class="line">    void showLoginView();  </div><div class="line">&#125;</div><div class="line">``</div><div class="line">`</div><div class="line">上面是登陆模块对应的MVP接口的具体设计，下面我来简单介绍一下接口中的几个方法：</div><div class="line">*  `ILoginModel.login(String name ,String password)`登陆方法，通过该方法向服务器发送登陆请求。</div><div class="line">* `ILoginPresenter. loginToServer (String name ,String password)`通知Model响应登陆事件。</div><div class="line">* `ILoginPresenter. loginSucceed() `当登陆事件完成时（成功/失败），Model层要通知该方法登陆事件已完成。</div><div class="line">* `ILoginView. showProgress(boolean enable) `当Presenter层调用` loginToServer (String name ,String password) `方法时，要通过该方法通知View层显示加载动画。</div><div class="line">* `ILoginView. showLoginView()`登陆成功时，Presenter层会通过该方法通知View层登陆已成功。</div><div class="line"></div><div class="line">下面我们来看看这几个接口的具体实现。</div><div class="line"></div><div class="line">4. LoginModel:</div><div class="line">``` public class LoginModel implements ILoginModel&#123;  </div><div class="line">  </div><div class="line">    private ILoginPresenter presenter;  </div><div class="line">  </div><div class="line">    private Handler mHandler = new Handler();  </div><div class="line">  </div><div class="line">    public LoginModel(ILoginPresenter presenter) &#123;  </div><div class="line">        this.presenter = presenter;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    @Override  </div><div class="line">    public void login(String name ,String password) &#123;  </div><div class="line">        mHandler.postDelayed(new Runnable() &#123;  </div><div class="line">            @Override  </div><div class="line">            public void run() &#123;  </div><div class="line">                Log.d(&quot;LoginModel&quot;, &quot;run: &quot;);  </div><div class="line">                presenter.loginSucceed();  </div><div class="line">            &#125;  </div><div class="line">        &#125;,2000);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125; </div><div class="line">`</div></pre></td></tr></table></figure>
</li>
</ol>
<p><code>上面的Model层实现了</code>login(String name,Stringpassword)<code>登陆方法，该方法的具体实现逻辑是通过线程休眠2秒来模拟网络登陆的过程,登陆成功后会通过LoginPresenter的</code>loginSucceed()`方法来通知Presenter层登陆结果。实际开发中我们需要根据具体的业务逻辑来实现该过程。</p>
<ol>
<li>LoginPresenter<figure class="highlight plain"><figcaption><span>class LoginPresenter implements ILoginPresenter&#123;  </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">    private ILoginModel loginModel;  </div><div class="line">  </div><div class="line">    private ILoginView loginView;  </div><div class="line">  </div><div class="line">    public LoginPresenter(ILoginView loginView) &#123;  </div><div class="line">        this.loginView = loginView;  </div><div class="line">        this.loginModel = new LoginModel(this);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    @Override  </div><div class="line">    public void loginToServer(String userName, String password) &#123;  </div><div class="line">        loginView.showProgress(true);  </div><div class="line">        loginModel.login(userName,password);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    @Override  </div><div class="line">    public void loginSucceed() &#123;  </div><div class="line">        loginView.showProgress(false);  </div><div class="line">        loginView.showLoginView();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line">``</div><div class="line">`</div><div class="line">从上面代码可以看出LoginPresenter的实现逻辑很简单，首先在构造方法中获取ILoginView对象并撞见ILoginModel对象。然后当View层调用`loginToServer(String userName, String password) `方法成功时，通知View层显示加载动画并调用ILoginModel层的`login(String userName, String password) `方法向服务器发送登陆请求。当登陆成功后（即Model层通知loginSucceed方法时）通过` loginView.showProgress(false) `方法通知View层隐藏加载动画，并通知View登陆成功。</div><div class="line"></div><div class="line">6. LoginActivity</div><div class="line">对于LoginActivity我们只需要关注其中的几个方法即可</div><div class="line">```loginBtn.setOnClickListener(new View.OnClickListener() &#123;  </div><div class="line">    @Override  </div><div class="line">    public void onClick(View v) &#123;  </div><div class="line">        //模拟登陆，不需要账号密码  </div><div class="line">        loginPresenter.loginToServer(&quot;&quot;,&quot;&quot;);  </div><div class="line">    &#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>```@Override<br>public void showProgress(boolean enable) {<br>    if (enable){<br>        progressBar.setVisibility(View.VISIBLE);<br>        loginLayout.setVisibility(View.GONE);<br>    }else {<br>        progressBar.setVisibility(View.GONE);<br>        loginLayout.setVisibility(View.VISIBLE);<br>    }<br>}  </p>
<p>@Override<br>public void showLoginView() {<br>    Toast.makeText(LoginActivity.this,”登陆功”,Toast.LENGTHSHORT).show();<br>    finish();<br>}<br><code>`
</code><br>上面时实现了ILoginView接口的两个方法。<br>结合上面的代码可以看出，当点击登陆按钮的监听事件时，我们不需要关注业务逻辑，只需要调用<code>loginPresenter.loginToServer(&quot;&quot;,&quot;&quot;);</code>方法即可，然后根据实际情况实现View层中ILoginView接口的方法即可，这样达到了UI业务与逻辑完全分离的目的。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>关于在Android上应用MVP模式开发的第一篇到这里就结束了。这只是通过简单的例子介绍MVP模式在Android上的应用罢了，读者应该也看出来了，不进行任何处理的情况下使用MVP模式进行开发时相对于传统的MV模式来说代码量与文件数量增加了很多，相信不少同学会纠结在传统MV模式的代码量与MVP模式的逻辑清晰之间。<br>随着项目的体量变大，逻辑是否清晰会大大影响到我们的开发。笔者在使用MV进行开发时，常常不得不面对几百行甚至上千行代码的Acitvity，所以笔者在这里推荐大家使用MVP模式进行开发。<br>但是作为一个优秀的码农（其实是因为我很懒）肯定不会满足于这种结果，所以笔者通过不懈的努力研究出一套可以大大减少在使用MVP模式时代码量和文件量的方法，相信在国庆之后会给出第二篇关于优化使用MVP进行开发的文章。这个系列的最终目标是给出一个从零开始搭建一个功能完善的MVP快速开发框架。<br>最后给出本文DEMO的地址：<img src="https://github.com/DobbyTang/MVP-test-demo" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;/em&gt; 在MVVM成熟之前MVP模式在Android上有被神化的趋势，笔者曾经在商业项目中从零开始大规模采用过MVP模式对项目进行开发。在使用MVP模式进行开发的时候发现项目的结构模式对开发是有一定的影响的，在这里笔者会对这一问题进行探讨。希望通过这篇blog能让读者了解如何使用MVP模式搭建一个功能完善的MVP模式开发框架，避免一些笔者认为比较严重的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Android架构" scheme="http://www.tangpj.com/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MVP开发框架" scheme="http://www.tangpj.com/tags/MVP%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android SearchView的高级用法，解决关于SearchView的样式与控制问题</title>
    <link href="http://www.tangpj.com/2016/09/11/searchview/"/>
    <id>http://www.tangpj.com/2016/09/11/searchview/</id>
    <published>2016-09-11T14:16:10.000Z</published>
    <updated>2016-09-23T07:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p>在Android开发的时候，有时候我们需要做一个关于搜索的模块。我发现很多初级工程师在开发搜索组件的时候会用EditText + Button + ListView(RecyclerView) 的方法重新制作一个searchView组件。虽然这种方案也是可行的，但是效果往往不尽人意。现在我来介绍种更为简单的方法，就是实用android.widget包下的SearchView控件。</p>
<a id="more"></a>
<h1 id="关于SearchView"><a href="#关于SearchView" class="headerlink" title="关于SearchView"></a>关于SearchView</h1><h2 id="什么是SearchView控件？"><a href="#什么是SearchView控件？" class="headerlink" title="什么是SearchView控件？"></a>什么是SearchView控件？</h2><p>SearchView是Android自带的一款搜索View，它的功能十分强大，而且样式也十分好看。在Google发布Material Design 介绍中的搜索按钮就是通过SearchView实现的。</p>
<h2 id="如何使用SearchView"><a href="#如何使用SearchView" class="headerlink" title="如何使用SearchView"></a>如何使用SearchView</h2><p>下面我们来介绍下在Material Design风格下如何使用SearchView。</p>
<ol>
<li>在toolbar中显示SearchView。</li>
</ol>
<p>首先在res/menu/目录下创建文件<code>menu_main.xml</code></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">menu</span> xmln<span class="variable">s:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmln<span class="variable">s:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    xmln<span class="variable">s:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    tool<span class="variable">s:context</span>=<span class="string">"com.example.searchview.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    &lt;item android:id=<span class="string">"@+id/search_view"</span></div><div class="line">        android:orderInCategory=<span class="string">"101"</span></div><div class="line">        android:title=<span class="string">"search"</span></div><div class="line">        android:icon=<span class="string">"@mipmap/search"</span></div><div class="line">        app:actionViewClass=<span class="string">"android.widget.SearchView"</span></div><div class="line">        app:showAsAction=<span class="string">"ifRoom|collapseActionView"</span></div><div class="line">        /&gt;</div><div class="line">&lt;/<span class="keyword">menu</span>&gt;</div></pre></td></tr></table></figure>
<p>配置完菜单选项后还需要在使用的Acitvity中添加如下代码，使用配置好的菜单</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面代码可以看出，SearchView的使用和一般的菜单项没有太大的区别。只是多了app:actionViewClass这句代码。app:actionViewClass的作用是指定菜单项的行为视图，它的作用是点击菜单项后会自动根据点击时间显示相应的View组件。所以在这里可以推断，除了设置为SearchView外，还可以把这个View设置为任何你想设置的View（Button,EditText、自定义View等），在这里先不展开讨论。</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/searchView/2016-09-10%2013_52_48.gif" alt=""></p>
<ol>
<li>响应SearchView的的行为<br>设置好SearchView后，我们要对SearchView进行监听，监听的方法普通使用SearchView一样。获取SearchView对象并进行监听的方法如下所示。</li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Override</span></div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater()<span class="selector-class">.inflate</span>(R.menu.menu_main, menu);</div><div class="line">        final MenuItem item = menu<span class="selector-class">.findItem</span>(R.id.search_view);</div><div class="line">        SearchView searchView = (SearchView) item<span class="selector-class">.getActionView</span>();</div><div class="line">        <span class="selector-tag">searchView</span><span class="selector-class">.setOnQueryTextListener</span>(new     SearchView.OnQueryTextListener() &#123;</div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public boolean onQueryTextSubmit(String query) &#123;</div><div class="line">                Toast<span class="selector-class">.makeText</span>(MainActivity.this,query,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public boolean onQueryTextChange(String newText) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="selector-tag">return</span> <span class="selector-tag">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>首先，通过Menu.findItem（int id）方法，通过我们在<code>menu_main.xml</code>文件中定义的id获取到对应的menuItem,然后在通过MenuItem.getActionView()方法获取actionViewClass(响应行为View，在本例子里就是获取对应的SearchView)。获取到ActionView的实例后，我们就可以通过调用对象的一些方法实现相应的行为了。例如在这里就是用Toast把输入的搜索词语显示到屏幕上。</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/searchView/2016-09-11%2015_56_45.gif" alt=""></p>
<h1 id="自定义SearchView的样式与重设监听事件"><a href="#自定义SearchView的样式与重设监听事件" class="headerlink" title="自定义SearchView的样式与重设监听事件"></a>自定义SearchView的样式与重设监听事件</h1><p>上面已经介绍了SearchView的简单的用法了，但是往往在实际开发的过程中并不能满足我们的需求。SearchView实际上是一款十分强大的View控件来的，下面我们来介绍下它到底有多么强大。</p>
<h2 id="SearchView源码分析"><a href="#SearchView源码分析" class="headerlink" title="SearchView源码分析"></a>SearchView源码分析</h2><p>首先我们来看看它的源码。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">boolean</span> DBG = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> LOG_TAG = <span class="string">"SearchView"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Private constant for removing the microphone in the keyboard.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> IME_OPTION_NO_MICROPHONE = <span class="string">"nm"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SearchAutoComplete mSearchSrcTextView;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View mSearchEditFrame;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View mSearchPlate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View mSubmitArea;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageView mSearchButton;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageView mGoButton;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageView mCloseButton;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageView mVoiceButton;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View mDropDownAnchor;</div></pre></td></tr></table></figure>
<p>我们发现SearchView实际上是一个View的集合，有4个View、ImageView,还有一为SearchAutoComplete。我们重点关注的就是这个叫SearchAutoComplete的控件。后面大多数的功能都是围绕这个控件展开的。</p>
<h3 id="SearchAutoComplete控件是什么？"><a href="#SearchAutoComplete控件是什么？" class="headerlink" title="SearchAutoComplete控件是什么？"></a>SearchAutoComplete控件是什么？</h3><p>我们对SearchAutoComplete的源码进行查看，简单分析它的功能。<br><code>public static class SearchAutoComplete extends AppCompatAutoCompleteTextView</code><br>通过查看源码我们可以知道SearchAutoComplete实际上就是一个AutoCompleteTextView,而AutoCompleteTextView。所以SearchAutoComplete实际上是对AutoCompleteTextView的一个拓展。而我们知道SearchView是有一个输入框和多个按钮的。所以我判断，这个SearchAutoComplete实际上就是SearchView上的输入框，那么我们可以根据这个特点，完成一些AutoCompleteTextView类似的功能。</p>
<h3 id="SearchAutoComplete控件能做什么？"><a href="#SearchAutoComplete控件能做什么？" class="headerlink" title="SearchAutoComplete控件能做什么？"></a>SearchAutoComplete控件能做什么？</h3><p>SearchAutoComplete的特点就是有自动补全的功能。那么我们可以通过这个功能做一个类似自动补全的功能，实际上很多Android中的自动补全功能都是通过AutoCompleteTextView来实现的。所以我们可以通过SearchAutoComplete的这个特性来实现搜索提示或者历史记录功能都可以。</p>
<h2 id="SearchView搜索提示（历史记录）的实现"><a href="#SearchView搜索提示（历史记录）的实现" class="headerlink" title="SearchView搜索提示（历史记录）的实现"></a>SearchView搜索提示（历史记录）的实现</h2><p>先让大家看看实现搜索提示的代码</p>
<p>自定义搜索提示数组：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string-array</span> <span class="attr">name</span>=<span class="string">"test_array"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>香港<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>长沙<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>实现搜索提示代码：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        Resources resources = getResources();</div><div class="line">        String [] testStrings = resources.getStringArray(R.array.test_array);</div><div class="line">        <span class="keyword">final</span> MenuItem item = menu.findItem(R.id.search_view);</div><div class="line">        SearchView searchView = (SearchView) item.getActionView();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> completeTextId = searchView.getResources().getIdentifier(<span class="string">"android:id/search_src_text"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        AutoCompleteTextView completeText = (AutoCompleteTextView) searchView</div><div class="line">                .findViewById(completeTextId) ;</div><div class="line">        completeText.setThreshold(<span class="number">0</span>);</div><div class="line">        completeText.setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_1,testStrings));</div><div class="line">        searchView.setOnQueryTextListener(<span class="keyword">new</span> SearchView.OnQueryTextListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,query,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从代码可以看出来</p>
<ol>
<li>AutoCompleteTextView ID的获取方法为<code>int completeTextId = searchView.getResources().getIdentifier(&quot;android:id/search_src_text&quot;, null, null);</code>。为什么这样能获取到searchView中的AutoCompleteTextView的ID呢？我们先来看看SearchView的源码：<br> private final SearchAutoComplete mSearchSrcTextView;<br> mSearchSrcTextView = (SearchAutoComplete) findViewById(R.id.search_src_text);</li>
</ol>
<p>我们可以看到，在SearchView中SearchAutoComplete的id是<code>R.id.search_src_text</code>所以我们可以通过View.getResources(). getIdentifier()方法来获取View的内部控件（该方法对所有的View都适用）。</p>
<ol>
<li><p>completeText.setThreshold(0)方法的作用是设置提示条件。设置为0的时候就是代表输入长度为0即显示提示列表，设置为1代表输入长度为1时显示提示列表，以此类推。</p>
</li>
<li><p>通过completeText.setAdapter()方法设置搜索提示的数据源。搜索提示View实际上是一个ListView所以这里的setAdapter方法和ListView是一样的。为了演示方便，在这里我使用了ArrayAdapter。</p>
</li>
</ol>
<p>现在我们来运行看看显示的效果吧。</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/searchView/2016-09-11%2021_09_12.gif" alt=""></p>
<p>嗯，符合我们的预期，但是在我们点击下面的搜索提示的时候，程序蹦贵了。报崩溃的原因是因为SearchView搜索结果在内部是通过Cursor传递的。我们通过查看源码可以看到，SearchView的搜索结果是通过SuggestionsAdapter显示的，它的数据是来源是Cursor。而在我们的源码中是通过ArrayAdapter实现的，所以造成数据不一致所以报错了。我们知道在android中Cursor是用来操作查询数据集合的，但是实际开发中，我们的数据源不一定是来源于数据库。所以在这里我们需要对SearchView进行改造下，使它满足我们的使用目的。</p>
<p>解决的方法为:<br>通过上面的分析，我们知道点击搜索提示列表中的搜索结果时实际上是在点击AutoCompleteTextView中的ListView的item。而通过查看AutoCompleteTextView 的源码我发现又一个setOnItemClickListener方法。通过这个方法重新设置OnItemClickListener即可解决这个问题。下面来看看解诀后的代码。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        Resources resources = getResources();</div><div class="line">        <span class="keyword">final</span> String [] testStrings = resources.getStringArray(R.array.test_array);</div><div class="line">        <span class="keyword">final</span> MenuItem item = menu.findItem(R.id.search_view);</div><div class="line">        <span class="keyword">final</span> SearchView searchView = (SearchView) item.getActionView();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> completeTextId = searchView.getResources().getIdentifier(<span class="string">"android:id/search_src_text"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        AutoCompleteTextView completeText = (AutoCompleteTextView) searchView</div><div class="line">                .findViewById(completeTextId) ;</div><div class="line">        completeText.setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>,R.layout.list_item,R.id.text,testStrings));</div><div class="line">        completeText.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">                searchView.setQuery(testStrings[position],<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        completeText.setThreshold(<span class="number">0</span>);</div><div class="line">        searchView.setOnQueryTextListener(<span class="keyword">new</span> SearchView.OnQueryTextListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,query,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>现在我们来分析下<code>searchView.setQuery(testStrings[position],true);</code>的这个方法。下面时这个方法的定义:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void setQuery(CharSequence <span class="keyword">query</span>, boolean submit) &#123;</div><div class="line">        mSearchSrcTextView.setText(<span class="keyword">query</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">query</span> != null) &#123;</div><div class="line">            mSearchSrcTextView.setSelection(mSearchSrcTextView.<span class="built_in">length</span>());</div><div class="line">            mUserQuery = <span class="keyword">query</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// If the query is not empty and submit is requested, submit the query</span></div><div class="line">        <span class="keyword">if</span> (submit &amp;&amp; !TextUtils.isEmpty(<span class="keyword">query</span>)) &#123;</div><div class="line">            onSubmitQuery();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>不难看出，query就是代表设置要提交的字符串，而submit为ture表示提交该字符串，为false为不提交。这样我们就可以达到该方法实现选择搜索提示的效果。根据这一特性，我们可以在实际开发的时候根据业务逻辑自定义Adapter来实现各种复杂的功能。<br>demo地址为： <a href="https://github.com/DobbyTang/SearchViewDemo" target="_blank" rel="external">https://github.com/DobbyTang/SearchViewDemo</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>SearchView是Android提供的一个十分强大的搜索组件，在这里我只是自定义了其中的一小部分功能。我曾经听到过很多小伙伴抱怨SearchView十分不好用，一般在开发搜索功能的时候都是重新制作一个搜索模块。但是通过对SearchView的源码进行分析可以发现，自定义该控件的方法实际上十分简单。并且随着对它的深入分析发现，一个完整的搜索模块需要的东西它都以更加优美的方法帮我们实现了。在开发的时候，我们不妨尝试下去使用这个十分强大的控件。<br>通过这篇文章，我想告诉大家的是，多看源码！！！多看源码！！！多看源码！！！看源码的过程很辛苦，但是这是我们获得进步的最快途径，并且能在看源码的过程中能够发现一些控件的十分强大的用法。虽然不一定能完全理解，但是当你使用源码中的一些方法做出一些很酷的事情的时候，你会发现有满满的成就感，SO,有空的时候看看源码吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Android开发的时候，有时候我们需要做一个关于搜索的模块。我发现很多初级工程师在开发搜索组件的时候会用EditText + Button + ListView(RecyclerView) 的方法重新制作一个searchView组件。虽然这种方案也是可行的，但是效果往往不尽人意。现在我来介绍种更为简单的方法，就是实用android.widget包下的SearchView控件。&lt;/p&gt;
    
    </summary>
    
      <category term="AndroidUI技术" scheme="http://www.tangpj.com/categories/AndroidUI%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android,UI" scheme="http://www.tangpj.com/tags/Android-UI/"/>
    
  </entry>
  
  <entry>
    <title>Android(Java)Bean自动转换为map的方法</title>
    <link href="http://www.tangpj.com/2016/08/28/bean_to_map/"/>
    <id>http://www.tangpj.com/2016/08/28/bean_to_map/</id>
    <published>2016-08-28T01:34:29.000Z</published>
    <updated>2016-09-23T07:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p>在开发Android的时候，用户端与服务端一般是通过传递Json数据的方式进行通信的，目前主流都是使用Gson库对Json数据进行处理但实际开发的时候，Gson库不一定能满足我们的需求。例如，我曾经做过一个项目，服务器以Json的格式发送数据到客户端，而客户端需要以Map类型的数据回传给服务器。所以在这个时候，我们就需要把Bean类以类似Gson库的方式自动转换成Map数据，以达到提高效率的目的。</p>
<a id="more"></a>
<h2 id="创建能自动解析数据的基类BaseBean"><a href="#创建能自动解析数据的基类BaseBean" class="headerlink" title="创建能自动解析数据的基类BaseBean"></a>创建能自动解析数据的基类BaseBean</h2><p>该类中只有一个方法，就是toMap。toMap方法的作用是通过class.getDeclaredFields()方法获取class对象的所有属性，然后将属性名转化为map对象的key，属性的值转化为map对象的value。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; params;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Method</span>: toMap()</div><div class="line">     * <span class="doctag">@author</span> create by Tang</div><div class="line">     * <span class="doctag">@date</span> date 16/8/23 下午3:20</div><div class="line">     * <span class="doctag">@Description</span>: 把实体类转换成Map类</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; toMap() &#123;</div><div class="line">        Class&lt;? extends Object&gt; clazz = <span class="keyword">this</span>.getClass();</div><div class="line">        Class&lt;? extends Object&gt; superClass = clazz.getSuperclass();</div><div class="line"></div><div class="line">        Field[] fields = clazz.getDeclaredFields();</div><div class="line">        Field[] superFields = superClass.getDeclaredFields();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (fields == <span class="literal">null</span> || fields.length == <span class="number">0</span> )&#123;</div><div class="line">            <span class="keyword">return</span> Collections.EMPTY_MAP;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        params = new HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">                field.setAccessible(<span class="literal">true</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (field.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                    ParamsName paramsName = field.getAnnotation(ParamsName.<span class="keyword">class</span>);</div><div class="line">                    String key;</div><div class="line">                    <span class="keyword">if</span> (paramsName == <span class="literal">null</span>)&#123;</div><div class="line">                        key = field.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        key = paramsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (field.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                        params.put(key , String.valueOf(field.<span class="keyword">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(key, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Field superField : superFields)&#123;</div><div class="line">                <span class="keyword">if</span> (superField.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                    superField.setAccessible(<span class="literal">true</span>);</div><div class="line">                    ParamsName superParamsName = superField.getAnnotation(ParamsName.<span class="keyword">class</span>);</div><div class="line">                    String superKey;</div><div class="line">                    <span class="keyword">if</span> (superParamsName == <span class="literal">null</span>)&#123;</div><div class="line">                        superKey = superField.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        superKey = superParamsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (superField.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                        params.put(superKey, String.valueOf(superField.<span class="keyword">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(superKey, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> String toString()&#123;</div><div class="line">        <span class="keyword">if</span> (params == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> params.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中class就是我们传递进来需要转换成map的Bean基类，superClass则是该类的父类。获取class的父类是由于class.getDeclaredFields方法只能获取自身的属性，而无法获得父类的属性，所以需要获取class对象的父类。<br>从上面的代码可以看出，将java实体类转换成map对象的方法很简单。通过遍历获得的Field对象，并通过Field.getName方法获取属性的命名作为map对象的key，通过Field.get(class)方法获取属性的值即可。<br><em>注 :</em> field.setAccessible(true)的作用是允许获取私有变量。</p>
<p>细心读者可能会发现，有时候我们实体类的命名和服务器发给我们的命名规则是不一样的。但是我们又不想修改属性名的情况下怎么办？Gson库提供给我们的方法是通过注解的方式（@SerializedName）实现对属性的重命名。那么如果我们自定义的Gmap类能不能也实现该功能呢？答案当然是可以的。</p>
<p>通过查看Gson的源码，我们发现Gson实现通过注解对属性进行重命名的方法实际是比较简单的。下面我们来详细看下注解是如何实现属性的重命名的。</p>
<h2 id="通过注解实现属性重命名"><a href="#通过注解实现属性重命名" class="headerlink" title="通过注解实现属性重命名"></a>通过注解实现属性重命名</h2><p>先看代码:</p>
<p>注解的定义：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="variable">@Target</span>(&#123;ElementType.FIELD, ElementType.METHOD&#125;)</div><div class="line">public <span class="variable">@interface</span> ParamsName &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @Method: value()</div><div class="line">     * @author create by Tang</div><div class="line">     * @date date 16/8/23 下午3:55</div><div class="line">     * @Description:</div><div class="line">     * 返回Map的key Name,默认为参数名</div><div class="line">     */</div><div class="line">    String value();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Map类中通过获取属性的注解对map的key实现重命名的方法：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ParamsName paramsName = field.getAnnotation(ParamsName.class);</div><div class="line">                    <span class="keyword">String</span> <span class="built_in">key</span>;</div><div class="line">                    <span class="keyword">if</span> (paramsName == <span class="keyword">null</span>)&#123;</div><div class="line">                        <span class="built_in">key</span> = field.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">key</span> = paramsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (field.<span class="built_in">get</span>(<span class="keyword">this</span>) != <span class="keyword">null</span>)&#123;</div><div class="line">                        params.put(<span class="built_in">key</span> , <span class="keyword">String</span>.valueOf(field.<span class="built_in">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(<span class="built_in">key</span>, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div></pre></td></tr></table></figure></p>
<p>注解的定义很简单，就是常规的java注解的定义。代码的实现也比较简单，通过field.getAnnotation（class）方法获得属性的注解，然后对获得的注解进行判断，如果注解值为空，则返回属性的实际名称，如果注解不为空，则返回注解的值。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用方法很简单，在创建bean类（或需要转化为map数据的类）时继承BaseBean即可，然后在需要的时候调用toMap()方法即可。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上就是我实现的把java bean类自动转化为map数据的方法。这个方法有个缺点，由于使用了反射的方法每次转化的时候会对java类遍历一次，所以这个方法会影响程序运行的性能。在查看Gson库的源码的时候，我发现Gson有更好的实现方法。具体我会在下一篇文章深度剖析Gson是如何在不影响效率的情况下实现数据的转化的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在开发Android的时候，用户端与服务端一般是通过传递Json数据的方式进行通信的，目前主流都是使用Gson库对Json数据进行处理但实际开发的时候，Gson库不一定能满足我们的需求。例如，我曾经做过一个项目，服务器以Json的格式发送数据到客户端，而客户端需要以Map类型的数据回传给服务器。所以在这个时候，我们就需要把Bean类以类似Gson库的方式自动转换成Map数据，以达到提高效率的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android小技巧" scheme="http://www.tangpj.com/tags/Android%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>使用fresco实现Android图片手势缩放功能</title>
    <link href="http://www.tangpj.com/2016/08/12/fresco_zoomable/"/>
    <id>http://www.tangpj.com/2016/08/12/fresco_zoomable/</id>
    <published>2016-08-11T16:16:10.000Z</published>
    <updated>2016-09-21T15:58:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p>摘要:这是一篇关于使用图片加载框架fresco实现图片的手势放大和缩小的教程，希望能对你有所帮助。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>fresco是一款十分强大的图片加载框架，但是该框架本身不支持图片的手势放大和缩小的功能。在facebook官方的github上，facebook官方给出了具体的解决方案，但是官方的demo十分难跑起来，并且官方demo中的功能较为繁杂，理解和使用都有一定的困难。所以我做了一个测试demo出来供大家交流学习。<br><a id="more"></a></p>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><p>在开发前，需要在项目中引入fresco，引入方法是在Module的build.gradle文件的dependencies中添加一句代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.facebook.fresco:fresco:0.12.0'</span></div></pre></td></tr></table></figure>
<p>即可。</p>
<h2 id="集成Samples包"><a href="#集成Samples包" class="headerlink" title="集成Samples包"></a>集成Samples包</h2><p>Samples是fresco官方demo中的一个拓展包，包的目录如下图：</p>
<p><img src="https://github.com/DobbyTang/MarkdownRes/raw/master/mBlog/samples/samples_tab.png" alt="samples"></p>
<p>在该包中，和手势缩放相关的包有两个，分别为：gestures和zoomable。gestures包的主要功能的检测手势，zoomable包的主要功能是提供一个支持手势缩放的draweeView。因为在项目中只用到手势缩放的view，所以我只导入了这两个包。</p>
<p>导入方法很简单，只需要把Samples复制到工程目录下就可以。</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>导入完毕后还需要执行下面几步才能正常使用</p>
<ol>
<li><p>修改gradle.properties文件</p>
<p>在工程目录的gradle.properties文件中添加</p>
</li>
</ol>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Deps for gradle</div><div class="line">BUILD\_TOOLS\_VERSION=<span class="number">23.0</span><span class="number">.2</span></div><div class="line">COMPILE\_SDK\_VERSION=<span class="number">23</span></div><div class="line"></div><div class="line"># Deps for libraries</div><div class="line">JUNIT\_VERSION=<span class="number">4.12</span></div><div class="line">MOCKITO\_CORE\_VERSION=<span class="number">1.10</span><span class="number">.19</span></div><div class="line">ROBOLECTRIC\_VERSION=<span class="number">3.0</span></div><div class="line">NINEOLDANDROID\_VERSION=<span class="number">2.4</span><span class="number">.0</span></div><div class="line">SUPPORT\_LIB\_VERSION=<span class="number">23.2</span><span class="number">.1</span></div><div class="line">JSR\_305\_VERSION=<span class="number">3.0</span><span class="number">.0</span></div></pre></td></tr></table></figure>
<ol>
<li><p>修改settings.gradle</p>
<p>在工程目录的settings.gradle文件中添加</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> <span class="string">':samples:gestures'</span></div><div class="line"><span class="keyword">include</span> <span class="string">':samples:zoomable'</span></div></pre></td></tr></table></figure>
</li>
<li><p>在项目的Build.gradle中添加</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">project.ext &#123;</div><div class="line"><span class="attr">buildToolsVersion</span> = <span class="string">"<span class="subst">$&#123;BUILD_TOOLS_VERSION&#125;</span>"</span></div><div class="line"><span class="attr">compileSdkVersion</span> = COMPILE_SDK_VERSION.toInteger()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<p>做完以上两个步骤后，就能正常使用支持图片缩放的ZoomalbeDraweeView了。</p>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="查看单个图片"><a href="#查看单个图片" class="headerlink" title="查看单个图片"></a>查看单个图片</h3><ol>
<li><p>新建一个<strong>activity_zoomable.xml</strong>布局文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?\&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></div><div class="line"> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line"> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">	</div><div class="line"> <span class="tag">&lt;<span class="name">com.facebook.samples.zoomable.ZoomableDraweeView</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/zoomableView"</span></div><div class="line">     <span class="attr">style</span>=<span class="string">"@style/drawee"</span></div><div class="line">     /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><strong>ZoomableActivity.java</strong>文件</p>
</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ZoomableActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="type">ZoomableDraweeView</span> draweeView;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">	    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	    <span class="type">FLog</span>.setMinimumLoggingLevel(<span class="type">FLog</span>.<span class="type">VERBOSE</span>);</div><div class="line">	    <span class="type">Set</span>&lt;<span class="type">RequestListener</span>&gt; listeners = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;&gt;();</div><div class="line">	    listeners.add(<span class="keyword">new</span> <span class="type">RequestLoggingListener</span>());</div><div class="line">	    <span class="type">ImagePipelineConfig</span> config = <span class="type">ImagePipelineConfig</span>.newBuilder(<span class="keyword">this</span>)</div><div class="line">	            .setRequestListeners(listeners)</div><div class="line">	            .setBitmapsConfig(<span class="type">Bitmap</span>.<span class="type">Config</span>.<span class="type">ARGB_8888</span>)</div><div class="line">	            .build();</div><div class="line">	    <span class="type">Fresco</span>.initialize(<span class="keyword">this</span>, config);</div><div class="line">	    setContentView(<span class="type">R</span>.layout.activity_zoomable);</div><div class="line">	</div><div class="line">	</div><div class="line">	    <span class="type">DraweeController</span> controller = <span class="type">Fresco</span>.newDraweeControllerBuilder()</div><div class="line">	            .setUri(<span class="string">"http://pic13.nipic.com/20110326/2457331_232645672000_2.jpg"</span>)</div><div class="line">	            .build();</div><div class="line">	    draweeView = (<span class="type">ZoomableDraweeView</span>) findViewById(<span class="type">R</span>.id.zoomableView);</div><div class="line">	    draweeView.setController(controller);</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的方法和SimpleDraweeView差不多，不同的地方是Fresco初始化的时候需要传入ImagePipelineConfig对象，并且ZoomableDraweeView不知直接设置图片的uri，而是需要通过DraweeController对象来设置。</p>
<p>通过上面的代码，已经能够完成图片的加载和图片的放大缩小操作。但是实际开发的时候往往需要显示一组图片，所以下面来介绍下如何使用ZoomableDraweeView展示一组图片，并支持手势放大缩小功能。</p>
<h3 id="显示多个图片"><a href="#显示多个图片" class="headerlink" title="显示多个图片"></a>显示多个图片</h3><ol>
<li><p>新建一个<strong>activity_zoomable_list.xml</strong>文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line"> xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line"> android:layout_width=<span class="string">"match_parent"</span></div><div class="line"> android:layout_height=<span class="string">"match_parent"</span></div><div class="line"> android:baselineAligned=<span class="string">"false"</span></div><div class="line"> android:orientation=<span class="string">"horizontal"</span></div><div class="line"> &gt;</div><div class="line"> &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span></div><div class="line">     android:id=<span class="string">"@+id/pager"</span></div><div class="line">     android:layout_width=<span class="string">"match_parent"</span></div><div class="line">     android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line">	</div><div class="line">     &lt;FrameLayout</div><div class="line">         android:id=<span class="string">"@+id/page1"</span></div><div class="line">         android:layout_width=<span class="string">"match_parent"</span></div><div class="line">         android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">         &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">             android:id=<span class="string">"@+id/zoomableView1"</span></div><div class="line">             style=<span class="string">"@style/drawee"</span></div><div class="line">             /&gt;</div><div class="line">     &lt;/FrameLayout&gt;</div><div class="line">	</div><div class="line">     &lt;FrameLayout</div><div class="line">         android:id=<span class="string">"@+id/page2"</span></div><div class="line">         android:layout_width=<span class="string">"match_parent"</span></div><div class="line">         android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">         &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">             android:id=<span class="string">"@+id/zoomableView2"</span></div><div class="line">             style=<span class="string">"@style/drawee"</span></div><div class="line">             /&gt;</div><div class="line">     &lt;/FrameLayout&gt;</div><div class="line">	</div><div class="line">     &lt;FrameLayout</div><div class="line">         android:id=<span class="string">"@+id/page3"</span></div><div class="line">         android:layout_width=<span class="string">"match_parent"</span></div><div class="line">         android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">         &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">             android:id=<span class="string">"@+id/zoomableView3"</span></div><div class="line">             style=<span class="string">"@style/drawee"</span></div><div class="line">             /&gt;</div><div class="line">     &lt;/FrameLayout&gt;</div><div class="line">	</div><div class="line"> &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span>&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><strong>ZoomableListActivity.java</strong>文件</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ZoomableListActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">     <span class="type">FLog</span>.setMinimumLoggingLevel(<span class="type">FLog</span>.<span class="type">VERBOSE</span>);</div><div class="line">     <span class="type">Set</span>&lt;<span class="type">RequestListener</span>&gt; listeners = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;&gt;();</div><div class="line">     listeners.add(<span class="keyword">new</span> <span class="type">RequestLoggingListener</span>());</div><div class="line">     <span class="type">ImagePipelineConfig</span> config = <span class="type">ImagePipelineConfig</span>.newBuilder(<span class="keyword">this</span>)</div><div class="line">             .setRequestListeners(listeners)</div><div class="line">             .setBitmapsConfig(<span class="type">Bitmap</span>.<span class="type">Config</span>.<span class="type">ARGB_8888</span>)</div><div class="line">             .build();</div><div class="line">     <span class="type">Fresco</span>.initialize(<span class="keyword">this</span>, config);</div><div class="line">     setContentView(<span class="type">R</span>.layout.activity_zoomable_list);</div><div class="line">	</div><div class="line">     <span class="type">MyPagerAdapter</span> adapter = <span class="keyword">new</span> <span class="type">MyPagerAdapter</span>();</div><div class="line">     <span class="type">ViewPager</span> pager = (<span class="type">ViewPager</span>) findViewById(<span class="type">R</span>.id.pager);</div><div class="line">     pager.setAdapter(adapter);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>MyPagerAdapter.java</strong>文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">     FrameLayout page = (FrameLayout) container.getChildAt(position);</div><div class="line">     ZoomableDraweeView zoomableDraweeView = (ZoomableDraweeView) page.getChildAt(<span class="number">0</span>);</div><div class="line">     DraweeController controller = Fresco.newDraweeControllerBuilder()</div><div class="line">             .setUri(<span class="string">"http://pic25.nipic.com/20121112/5955207_224247025000_2.jpg"</span>)</div><div class="line">             .build();</div><div class="line">     zoomableDraweeView.setController(controller);</div><div class="line">     zoomableDraweeView.setTapListener(createTapListener(position));</div><div class="line">     page.requestLayout();</div><div class="line">     <span class="keyword">return</span> page;</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">     FrameLayout page = (FrameLayout) container.getChildAt(position);</div><div class="line">     ZoomableDraweeView zoomableDraweeView = (ZoomableDraweeView) page.getChildAt(<span class="number">0</span>);</div><div class="line">     zoomableDraweeView.setController(<span class="keyword">null</span>);</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View arg0, Object arg1)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> arg0 == arg1;</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="keyword">private</span> GestureDetector.<span class="function">SimpleOnGestureListener <span class="title">createTapListener</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> GestureDetector.SimpleOnGestureListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line">             Log.d(<span class="string">"MyPagerAdapter"</span>, <span class="string">"onLongPress: "</span> + position);</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面代码中，我通过pagerView显示多个ZoomableDraweeView（实际开发中应该使用动态添加pager的方法初始化pagerView）。具体的方法和展示单个图片差不多，区别在于用在展示多个图片的时候用ViewPager来展示。</p>
</li>
</ol>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>从上述代码来看，如果项目是使用fresco来作为图片加载框架的话，那么使用samples包中的ZoomableDraweeView来实现图片的手势放大和缩小时十分简便的。而且在facebook的官方demo中有很多关于fresco的拓展用法，所以在这里笔者推荐，在你使用fresco的时候，更多关于图片操作的拓展功能可以参照或者引用facebook官方demo的方法。</p>
<p><a href="https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo" target="_blank" rel="external">项目代码</a></p>
<p>项目代码放在笔者平时练习写的一个demo集合里面，通过svn checkout命令下载。</p>
<p><strong>注：</strong>这里介绍一个使用github时候的小诀窍给读者。下载一个项目中的单个or部分文件夹的时候，可以通过svn的checkout命令来下载。</p>
<p>具体用法是复制具体文件夹路径，然后把/tree/master/替换成/trunk/。例如，本例子中：</p>
<p>项目地址是：<a href="https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo</a></p>
<p>下载地址是：<a href="https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo</a></p>
<p>即svn checkout <a href="https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo</a></p>
<p>遇到这个提示的时候<code>(R)eject, accept (t)emporarily or accept (p)ermanently?</code> ，输p即可。</p>
<p><br></p>
<blockquote>
<p>最近访客</p>
</blockquote>
<div class="ds-recent-visitors" data-num-items="28" data-avatar-size="42" id="ds-recent-visitors"></div>

]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;摘要:这是一篇关于使用图片加载框架fresco实现图片的手势放大和缩小的教程，希望能对你有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;fresco是一款十分强大的图片加载框架，但是该框架本身不支持图片的手势放大和缩小的功能。在facebook官方的github上，facebook官方给出了具体的解决方案，但是官方的demo十分难跑起来，并且官方demo中的功能较为繁杂，理解和使用都有一定的困难。所以我做了一个测试demo出来供大家交流学习。&lt;br&gt;
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android图片处理" scheme="http://www.tangpj.com/tags/Android%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
