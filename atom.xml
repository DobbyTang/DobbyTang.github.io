<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TANG BLOG</title>
  <subtitle>Tang的技术笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tangpj.com/"/>
  <updated>2016-08-28T11:04:51.000Z</updated>
  <id>http://www.tangpj.com/</id>
  
  <author>
    <name>Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android(Java)Bean自动转换为map的方法</title>
    <link href="http://www.tangpj.com/2016/08/28/bean_to_map/"/>
    <id>http://www.tangpj.com/2016/08/28/bean_to_map/</id>
    <published>2016-08-28T01:34:29.000Z</published>
    <updated>2016-08-28T11:04:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<h1 id="Android-Java-实体类自动转Map的方式"><a href="#Android-Java-实体类自动转Map的方式" class="headerlink" title="Android(Java)实体类自动转Map的方式"></a>Android(Java)实体类自动转Map的方式</h1><p>在开发Android的时候，用户端与服务端一般是通过传递Json数据的方式进行通信的，目前主流都是使用Gson库对Json数据进行处理但实际开发的时候，Gson库不一定能满足我们的需求。例如，我曾经做过一个项目，服务器以Json的格式发送数据到客户端，而客户端需要以Map类型的数据回传给服务器。所以在这个时候，我们就需要把Bean类以类似Gson库的方式自动转换成Map数据，以达到提高效率的目的。</p>
<h2 id="创建能自动解析数据的基类BaseBean"><a href="#创建能自动解析数据的基类BaseBean" class="headerlink" title="创建能自动解析数据的基类BaseBean"></a>创建能自动解析数据的基类BaseBean</h2><p>该类中只有一个方法，就是toMap。toMap方法的作用是通过class.getDeclaredFields()方法获取class对象的所有属性，然后将属性名转化为map对象的key，属性的值转化为map对象的value。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; params;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Method</span>: toMap()</div><div class="line">     * <span class="doctag">@author</span> create by Tang</div><div class="line">     * <span class="doctag">@date</span> date 16/8/23 下午3:20</div><div class="line">     * <span class="doctag">@Description</span>: 把实体类转换成Map类</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; toMap() &#123;</div><div class="line">        Class&lt;? extends Object&gt; clazz = <span class="keyword">this</span>.getClass();</div><div class="line">        Class&lt;? extends Object&gt; superClass = clazz.getSuperclass();</div><div class="line"></div><div class="line">        Field[] fields = clazz.getDeclaredFields();</div><div class="line">        Field[] superFields = superClass.getDeclaredFields();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (fields == <span class="literal">null</span> || fields.length == <span class="number">0</span> )&#123;</div><div class="line">            <span class="keyword">return</span> Collections.EMPTY_MAP;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        params = new HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">                field.setAccessible(<span class="literal">true</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (field.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                    ParamsName paramsName = field.getAnnotation(ParamsName.<span class="keyword">class</span>);</div><div class="line">                    String key;</div><div class="line">                    <span class="keyword">if</span> (paramsName == <span class="literal">null</span>)&#123;</div><div class="line">                        key = field.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        key = paramsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (field.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                        params.put(key , String.valueOf(field.<span class="keyword">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(key, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Field superField : superFields)&#123;</div><div class="line">                <span class="keyword">if</span> (superField.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                    superField.setAccessible(<span class="literal">true</span>);</div><div class="line">                    ParamsName superParamsName = superField.getAnnotation(ParamsName.<span class="keyword">class</span>);</div><div class="line">                    String superKey;</div><div class="line">                    <span class="keyword">if</span> (superParamsName == <span class="literal">null</span>)&#123;</div><div class="line">                        superKey = superField.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        superKey = superParamsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (superField.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                        params.put(superKey, String.valueOf(superField.<span class="keyword">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(superKey, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> String toString()&#123;</div><div class="line">        <span class="keyword">if</span> (params == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> params.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中class就是我们传递进来需要转换成map的Bean基类，superClass则是该类的父类。获取class的父类是由于class.getDeclaredFields方法只能获取自身的属性，而无法获得父类的属性，所以需要获取class对象的父类。<br>从上面的代码可以看出，将java实体类转换成map对象的方法很简单。通过遍历获得的Field对象，并通过Field.getName方法获取属性的命名作为map对象的key，通过Field.get(class)方法获取属性的值即可。<br><em>注 :</em> field.setAccessible(true)的作用是允许获取私有变量。</p>
<p>细心读者可能会发现，有时候我们实体类的命名和服务器发给我们的命名规则是不一样的。但是我们又不想修改属性名的情况下怎么办？Gson库提供给我们的方法是通过注解的方式（@SerializedName）实现对属性的重命名。那么如果我们自定义的Gmap类能不能也实现该功能呢？答案当然是可以的。</p>
<p>通过查看Gson的源码，我们发现Gson实现通过注解对属性进行重命名的方法实际是比较简单的。下面我们来详细看下注解是如何实现属性的重命名的。</p>
<h2 id="通过注解实现属性重命名"><a href="#通过注解实现属性重命名" class="headerlink" title="通过注解实现属性重命名"></a>通过注解实现属性重命名</h2><p>先看代码:</p>
<p>注解的定义：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="variable">@Target</span>(&#123;ElementType.FIELD, ElementType.METHOD&#125;)</div><div class="line">public <span class="variable">@interface</span> ParamsName &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @Method: value()</div><div class="line">     * @author create by Tang</div><div class="line">     * @date date 16/8/23 下午3:55</div><div class="line">     * @Description:</div><div class="line">     * 返回Map的key Name,默认为参数名</div><div class="line">     */</div><div class="line">    String value();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Map类中通过获取属性的注解对map的key实现重命名的方法：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ParamsName paramsName = field.getAnnotation(ParamsName.class);</div><div class="line">                    <span class="keyword">String</span> <span class="built_in">key</span>;</div><div class="line">                    <span class="keyword">if</span> (paramsName == <span class="keyword">null</span>)&#123;</div><div class="line">                        <span class="built_in">key</span> = field.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">key</span> = paramsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (field.<span class="built_in">get</span>(<span class="keyword">this</span>) != <span class="keyword">null</span>)&#123;</div><div class="line">                        params.put(<span class="built_in">key</span> , <span class="keyword">String</span>.valueOf(field.<span class="built_in">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(<span class="built_in">key</span>, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div></pre></td></tr></table></figure></p>
<p>注解的定义很简单，就是常规的java注解的定义。代码的实现也比较简单，通过field.getAnnotation（class）方法获得属性的注解，然后对获得的注解进行判断，如果注解值为空，则返回属性的实际名称，如果注解不为空，则返回注解的值。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用方法很简单，在创建bean类（或需要转化为map数据的类）时继承BaseBean即可，然后在需要的时候调用toMap()方法即可。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上就是我实现的把java bean类自动转化为map数据的方法。这个方法有个缺点，由于使用了反射的方法每次转化的时候会对java类遍历一次，所以这个方法会影响程序运行的性能。在查看Gson库的源码的时候，我发现Gson有更好的实现方法。具体我会在下一篇文章深度剖析Gson是如何在不影响效率的情况下实现数据的转化的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Android-Java-实体类自动转Map的方式&quot;&gt;&lt;a href=&quot;#Android-Java-实体类自动转Map的方
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android小技巧" scheme="http://www.tangpj.com/tags/Android%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>使用fresco实现Android图片手势缩放功能</title>
    <link href="http://www.tangpj.com/2016/08/12/fresco_zoomable/"/>
    <id>http://www.tangpj.com/2016/08/12/fresco_zoomable/</id>
    <published>2016-08-11T16:16:10.000Z</published>
    <updated>2016-08-28T01:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p>摘要:这是一篇关于使用图片加载框架fresco实现图片的手势放大和缩小的教程，希望能对你有所帮助。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>fresco是一款十分强大的图片加载框架，但是该框架本身不支持图片的手势放大和缩小的功能。在facebook官方的github上，facebook官方给出了具体的解决方案，但是官方的demo十分难跑起来，并且官方demo中的功能较为繁杂，理解和使用都有一定的困难。所以我做了一个测试demo出来供大家交流学习。<br><a id="more"></a></p>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><p>在开发前，需要在项目中引入fresco，引入方法是在Module的build.gradle文件的dependencies中添加一句代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.facebook.fresco:fresco:0.12.0'</span></div></pre></td></tr></table></figure>
<p>即可。</p>
<h2 id="集成Samples包"><a href="#集成Samples包" class="headerlink" title="集成Samples包"></a>集成Samples包</h2><p>Samples是fresco官方demo中的一个拓展包，包的目录如下图：</p>
<p><img src="https://github.com/DobbyTang/MarkdownRes/raw/master/mBlog/samples/samples_tab.png" alt="samples"></p>
<p>在该包中，和手势缩放相关的包有两个，分别为：gestures和zoomable。gestures包的主要功能的检测手势，zoomable包的主要功能是提供一个支持手势缩放的draweeView。因为在项目中只用到手势缩放的view，所以我只导入了这两个包。</p>
<p>导入方法很简单，只需要把Samples复制到工程目录下就可以。</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>导入完毕后还需要执行下面几步才能正常使用</p>
<ol>
<li><p>修改gradle.properties文件</p>
<p>在工程目录的gradle.properties文件中添加</p>
</li>
</ol>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deps for gradle</span></div><div class="line"><span class="attr">BUILD_TOOLS_VERSION</span>=<span class="number">23.0</span>.<span class="number">2</span></div><div class="line"><span class="attr">COMPILE_SDK_VERSION</span>=<span class="number">23</span></div><div class="line"></div><div class="line"><span class="comment"># Deps for libraries</span></div><div class="line"><span class="attr">JUNIT_VERSION</span>=<span class="number">4.12</span></div><div class="line"><span class="attr">MOCKITO_CORE_VERSION</span>=<span class="number">1.10</span>.<span class="number">19</span></div><div class="line"><span class="attr">ROBOLECTRIC_VERSION</span>=<span class="number">3.0</span></div><div class="line"><span class="attr">NINEOLDANDROID_VERSION</span>=<span class="number">2.4</span>.<span class="number">0</span></div><div class="line"><span class="attr">SUPPORT_LIB_VERSION</span>=<span class="number">23.2</span>.<span class="number">1</span></div><div class="line"><span class="attr">JSR_305_VERSION</span>=<span class="number">3.0</span>.<span class="number">0</span></div></pre></td></tr></table></figure>
<ol>
<li><p>修改settings.gradle</p>
<p>在工程目录的settings.gradle文件中添加</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> <span class="string">':samples:gestures'</span></div><div class="line"><span class="keyword">include</span> <span class="string">':samples:zoomable'</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<p>做完以上两个步骤后，就能正常使用支持图片缩放的ZoomalbeDraweeView了。</p>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="查看单个图片"><a href="#查看单个图片" class="headerlink" title="查看单个图片"></a>查看单个图片</h3><ol>
<li><p>新建一个<strong>activity_zoomable.xml</strong>布局文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.facebook.samples.zoomable.ZoomableDraweeView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/zoomableView"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/drawee"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><strong>ZoomableActivity.java</strong>文件</p>
</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ZoomableActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">ZoomableDraweeView</span> draweeView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="type">FLog</span>.setMinimumLoggingLevel(<span class="type">FLog</span>.<span class="type">VERBOSE</span>);</div><div class="line">        <span class="type">Set</span>&lt;<span class="type">RequestListener</span>&gt; listeners = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;&gt;();</div><div class="line">        listeners.add(<span class="keyword">new</span> <span class="type">RequestLoggingListener</span>());</div><div class="line">        <span class="type">ImagePipelineConfig</span> config = <span class="type">ImagePipelineConfig</span>.newBuilder(<span class="keyword">this</span>)</div><div class="line">                .setRequestListeners(listeners)</div><div class="line">                .setBitmapsConfig(<span class="type">Bitmap</span>.<span class="type">Config</span>.<span class="type">ARGB_8888</span>)</div><div class="line">                .build();</div><div class="line">        <span class="type">Fresco</span>.initialize(<span class="keyword">this</span>, config);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_zoomable);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="type">DraweeController</span> controller = <span class="type">Fresco</span>.newDraweeControllerBuilder()</div><div class="line">                .setUri(<span class="string">"http://pic13.nipic.com/20110326/2457331_232645672000_2.jpg"</span>)</div><div class="line">                .build();</div><div class="line">        draweeView = (<span class="type">ZoomableDraweeView</span>) findViewById(<span class="type">R</span>.id.zoomableView);</div><div class="line">        draweeView.setController(controller);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的方法和SimpleDraweeView差不多，不同的地方是Fresco初始化的时候需要传入ImagePipelineConfig对象，并且ZoomableDraweeView不知直接设置图片的uri，而是需要通过DraweeController对象来设置。</p>
<p>通过上面的代码，已经能够完成图片的加载和图片的放大缩小操作。但是实际开发的时候往往需要显示一组图片，所以下面来介绍下如何使用ZoomableDraweeView展示一组图片，并支持手势放大缩小功能。</p>
<h3 id="显示多个图片"><a href="#显示多个图片" class="headerlink" title="显示多个图片"></a>显示多个图片</h3><ol>
<li><p>新建一个<strong>activity_zoomable_list.xml</strong>文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:baselineAligned=<span class="string">"false"</span></div><div class="line">    android:orientation=<span class="string">"horizontal"</span></div><div class="line">    &gt;</div><div class="line">    &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span></div><div class="line">        android:id=<span class="string">"@+id/pager"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">        &lt;FrameLayout</div><div class="line">            android:id=<span class="string">"@+id/page1"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">            &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">                android:id=<span class="string">"@+id/zoomableView1"</span></div><div class="line">                style=<span class="string">"@style/drawee"</span></div><div class="line">                /&gt;</div><div class="line">        &lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">        &lt;FrameLayout</div><div class="line">            android:id=<span class="string">"@+id/page2"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">            &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">                android:id=<span class="string">"@+id/zoomableView2"</span></div><div class="line">                style=<span class="string">"@style/drawee"</span></div><div class="line">                /&gt;</div><div class="line">        &lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">        &lt;FrameLayout</div><div class="line">            android:id=<span class="string">"@+id/page3"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">            &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">                android:id=<span class="string">"@+id/zoomableView3"</span></div><div class="line">                style=<span class="string">"@style/drawee"</span></div><div class="line">                /&gt;</div><div class="line">        &lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">    &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span>&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><strong>ZoomableListActivity.java</strong>文件</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ZoomableListActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="type">FLog</span>.setMinimumLoggingLevel(<span class="type">FLog</span>.<span class="type">VERBOSE</span>);</div><div class="line">        <span class="type">Set</span>&lt;<span class="type">RequestListener</span>&gt; listeners = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;&gt;();</div><div class="line">        listeners.add(<span class="keyword">new</span> <span class="type">RequestLoggingListener</span>());</div><div class="line">        <span class="type">ImagePipelineConfig</span> config = <span class="type">ImagePipelineConfig</span>.newBuilder(<span class="keyword">this</span>)</div><div class="line">                .setRequestListeners(listeners)</div><div class="line">                .setBitmapsConfig(<span class="type">Bitmap</span>.<span class="type">Config</span>.<span class="type">ARGB_8888</span>)</div><div class="line">                .build();</div><div class="line">        <span class="type">Fresco</span>.initialize(<span class="keyword">this</span>, config);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_zoomable_list);</div><div class="line"></div><div class="line">        <span class="type">MyPagerAdapter</span> adapter = <span class="keyword">new</span> <span class="type">MyPagerAdapter</span>();</div><div class="line">        <span class="type">ViewPager</span> pager = (<span class="type">ViewPager</span>) findViewById(<span class="type">R</span>.id.pager);</div><div class="line">        pager.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>MyPagerAdapter.java</strong>文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        FrameLayout page = (FrameLayout) container.getChildAt(position);</div><div class="line">        ZoomableDraweeView zoomableDraweeView = (ZoomableDraweeView) page.getChildAt(<span class="number">0</span>);</div><div class="line">        DraweeController controller = Fresco.newDraweeControllerBuilder()</div><div class="line">                .setUri(<span class="string">"http://pic25.nipic.com/20121112/5955207_224247025000_2.jpg"</span>)</div><div class="line">                .build();</div><div class="line">        zoomableDraweeView.setController(controller);</div><div class="line">        zoomableDraweeView.setTapListener(createTapListener(position));</div><div class="line">        page.requestLayout();</div><div class="line">        <span class="keyword">return</span> page;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        FrameLayout page = (FrameLayout) container.getChildAt(position);</div><div class="line">        ZoomableDraweeView zoomableDraweeView = (ZoomableDraweeView) page.getChildAt(<span class="number">0</span>);</div><div class="line">        zoomableDraweeView.setController(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View arg0, Object arg1)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> arg0 == arg1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> GestureDetector.<span class="function">SimpleOnGestureListener <span class="title">createTapListener</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GestureDetector.SimpleOnGestureListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"MyPagerAdapter"</span>, <span class="string">"onLongPress: "</span> + position);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面代码中，我通过pagerView显示多个ZoomableDraweeView（实际开发中应该使用动态添加pager的方法初始化pagerView）。具体的方法和展示单个图片差不多，区别在于用在展示多个图片的时候用ViewPager来展示。</p>
</li>
</ol>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>从上述代码来看，如果项目是使用fresco来作为图片加载框架的话，那么使用samples包中的ZoomableDraweeView来实现图片的手势放大和缩小时十分简便的。而且在facebook的官方demo中有很多关于fresco的拓展用法，所以在这里笔者推荐，在你使用fresco的时候，更多关于图片操作的拓展功能可以参照或者引用facebook官方demo的方法。</p>
<p><a href="https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo" target="_blank" rel="external">项目代码</a></p>
<p>项目代码放在笔者平时练习写的一个demo集合里面，通过svn checkout命令下载。</p>
<p><strong>注：</strong>这里介绍一个使用github时候的小诀窍给读者。下载一个项目中的单个or部分文件夹的时候，可以通过svn的checkout命令来下载。</p>
<p>具体用法是复制具体文件夹路径，然后把/tree/master/替换成/trunk/。例如，本例子中：</p>
<p>项目地址是：<a href="https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo</a></p>
<p>下载地址是：<a href="https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo</a></p>
<p>即svn checkout <a href="https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo</a></p>
<p>遇到这个提示的时候<code>(R)eject, accept (t)emporarily or accept (p)ermanently?</code> ，输p即可。</p>
<p><br></p>
<blockquote>
<p>最近访客</p>
</blockquote>
<div class="ds-recent-visitors" data-num-items="28" data-avatar-size="42" id="ds-recent-visitors"></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;摘要:这是一篇关于使用图片加载框架fresco实现图片的手势放大和缩小的教程，希望能对你有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;fresco是一款十分强大的图片加载框架，但是该框架本身不支持图片的手势放大和缩小的功能。在facebook官方的github上，facebook官方给出了具体的解决方案，但是官方的demo十分难跑起来，并且官方demo中的功能较为繁杂，理解和使用都有一定的困难。所以我做了一个测试demo出来供大家交流学习。&lt;br&gt;
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android图片处理" scheme="http://www.tangpj.com/tags/Android%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
