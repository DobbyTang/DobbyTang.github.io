<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TANG BLOG</title>
  <subtitle>Tang的技术笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tangpj.com/"/>
  <updated>2018-05-14T04:38:00.003Z</updated>
  <id>http://www.tangpj.com/</id>
  
  <author>
    <name>Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android开发利器之Data Binding Compiler V2 —— 搭建Android MVVM完全体的基础</title>
    <link href="http://www.tangpj.com/2018/05/12/data_binding_compiler_v2_1/"/>
    <id>http://www.tangpj.com/2018/05/12/data_binding_compiler_v2_1/</id>
    <published>2018-05-12T11:14:59.000Z</published>
    <updated>2018-05-14T04:38:00.003Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/databinding/data_binding_compiler_v2.jpeg" alt=""></p>
<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><strong>前言：</strong> Android常用的架构有：MVC、MVP、MVVM，而MVVM是唯一一个官方提供支持组件的架构，我们可以通过Android lifecycle系列组件、DataBinding或者通过组合两者的形式来打造一个强大的MVVM架构。而DataBinding Compiler V2就是为了解决目前的MVVM架构中的缺点而诞生的。</p>
<h2 id="Data-Binding和LiveData的兼容问题"><a href="#Data-Binding和LiveData的兼容问题" class="headerlink" title="Data Binding和LiveData的兼容问题"></a>Data Binding和LiveData的兼容问题</h2><p>在DataBinding Compiler V1的环境下，DataBinding和LiveData是无法兼容的。这句话是什么意思呢？我们先来看看平时我们使用DataBinding的代码片段。</p>
<h3 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h3><p><strong>布局代码片段</strong><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">data</span>&gt;</span>  </span></div><div class="line">	<span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">		<span class="attr">name</span>= <span class="string">"text"</span>  </div><div class="line">		<span class="attr">type</span>=<span class="string">"android.databinding.ObservableField&amp;lt;String&gt;"</span>/&gt;  </div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">	<span class="attr">android:layoutwidth</span>=<span class="string">"matchparent"</span>  </div><div class="line">	<span class="attr">android:layoutheight</span>=<span class="string">"40dp"</span>  </div><div class="line">	<span class="attr">android:text</span>=<span class="string">“@</span><span class="template-variable">&#123;text&#125;</span><span class="xml"><span class="tag">“  </span></span></div><div class="line">	/&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：xml不能直接使用‘\&lt;’所以我们需要使用转义符：”&lt;”<br><strong>使用代码片段</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">XXXBinding binding = ...  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObservableField&lt;<span class="keyword">String</span>&gt; <span class="built_in">text</span> = <span class="keyword">new</span> ObservableField&lt;&gt;();  </div><div class="line">binding.setText(<span class="built_in">text</span>)  </div><div class="line"><span class="built_in">text</span>.<span class="built_in">set</span>(<span class="string">" hello word "</span>)`</div></pre></td></tr></table></figure></p>
</blockquote>
<p>上面的代码片段是DataBinding的简单使用方法。</p>
<h3 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h3><p>我们知道LiveData是Google官方推出的生命周期感知的数据包装组件，用来搭建MVVM框架有天然的优势，能很好协调控制层与展示层生命周期不一致的问题（这里是指View层与ViewModel层）下面我们来看下使用LiveData更新UI的代码片段。</p>
<p><strong>ViewModel代码片段</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">MutableLiveData</span>&lt;<span class="type">String</span>&gt; text = <span class="keyword">new</span> <span class="type">MutableLiveData</span>&lt;&gt;();  </div><div class="line">  </div><div class="line">	public <span class="type">LiveData</span>&lt;<span class="type">String</span>&gt; getText() &#123;  </div><div class="line">		<span class="keyword">return</span> text;  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>View层代码片段</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">viewModel</span>. <span class="selector-tag">getText</span>()<span class="selector-class">.observe</span>(this, observe -&gt; &#123;  </div><div class="line">	tvText<span class="selector-class">.setText</span>(observe);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当我们在ViewModel中调用 text.postValue(obj)方法时，UI层的observe方法就会收到回调，通过<code>tvText.setText(observe);</code>这句代码来更新tvText。</p>
<p>例如，我们可以在ViewModel中通过下面的代码来更新UI层<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">text</span>.posValue(<span class="string">"hello word !"</span>)</div></pre></td></tr></table></figure></p>
<p>可以看出，无论是使用DataBinding还是LiveData，都能实现View层和ViewModel层解耦的目的，并且能ViewModel层中的数据变化来实现View层的更新，这就是我们常说<strong>数据驱动视图</strong>。</p>
<blockquote>
<p>数据驱动视图：只要数据变化, 就重新渲染视图</p>
</blockquote>
<h3 id="ObservableField与LiveData"><a href="#ObservableField与LiveData" class="headerlink" title="ObservableField与LiveData"></a>ObservableField与LiveData</h3><p>我们知道DataBinding是通过ObservableField来实现数据的双向绑定的，而ObservableField本质上就是一个被观察者，而我们的xml布局文件和就是观察者，当ObservableField产生变化是会通知我们的布局文件更新布局（观察者模式）。<br>ObservableField如何实现通知布局文件更新的原理我们这里先不深入讨论，这里笔者只给出一个结论，ObservableField被View层（这里指我们的xml布局文件）以弱引用的方式引用，当ObservableField更新时，会通过监听器通知View层，并且ObservableField是对View层生命周期不敏感的。所以通过ObservableField实现数据双向绑定并不是一个完美的方案。</p>
<p>我们可以考虑使用LiveData来实现双向绑定。<br>我们先来回顾一下监听LiveData方法：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">viewModel</span>. <span class="selector-tag">getText</span>()<span class="selector-class">.observe</span>(this, observe -&gt; &#123;  </div><div class="line">	tvText<span class="selector-class">.setText</span>(observe);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>非常简单，只在调用LiveData的observe，设置一个Observer<br>回调监听器就可以了。</p>
<p><strong>那么上文提到的Databinding与LiveData不兼容是指什么呢？</strong><br>从上面的分析我们可以看出ObservableField与LiveData的使用方式完全是完全不一样的，ObservableField可以通过直接在布局文件中设置实现双向绑定。而LiveData必须通过代码设置监听器，并且需要手动调用待更新的控件才能实现控件的更新。就是说LiveData只能通知UI层有数据需要更新，更新后的数据是什么，但是并不能自动帮你实现View的更新。并且当View层的数据更新后，LiveData也没办法自动获取View层的更新。</p>
<blockquote>
<p>例如：在使用EditText的时候，要获取EditText的改变，需要调用EditText的getText方法，而ObservableField只需要调用get()方法即可</p>
</blockquote>
<p>LiveData在Data Binding Compiler V1下是无法使用类似ObservableField的方式实现数据绑定的（单向也不行），这就是笔者所说的<strong>DataBinding与LiveData不兼容。</strong><br>当我们使用DataBinding与Lifecycle组合搭建MVVM框架的时候，需要根据业务的具体需要来选择使用LiveData还是ObservableField。类似下面的代码：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> ObservableBoolean dataLoading = <span class="keyword">new</span> ObservableBoolean(<span class="keyword">false</span>);  </div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> MutableLiveData&lt;<span class="keyword">Void</span>&gt; mTaskUpdated = <span class="keyword">new</span> MutableLiveData &lt;&gt;();</div></pre></td></tr></table></figure></p>
<p>但是实际开发的时候，我们往往无法在ObservableField与LiveData中作出很好的选择，因为它们的优缺点都太明显了。<br>我们总结一下ObservableField与LiveData的优缺点。<br><strong> ObservableField</strong><br>优点：使用方便，能快速实现双向绑定<br>缺点：使用弱引用的方式与View层，并且不能根据View层的生命周期来发送通知</p>
<p><strong>LiveData</strong><br>优点：能根据View层的生命周期来发送通知事件<br>缺点：使用麻烦，与View层耦合大，并且不支持数据与View绑定</p>
<h2 id="Data-Binding-Compiler-V2"><a href="#Data-Binding-Compiler-V2" class="headerlink" title="Data Binding Compiler V2"></a>Data Binding Compiler V2</h2><p>我们要说的主角就是，Data Binding Compiler V2 。</p>
<h3 id="什么是Data-Binding-Compiler呢？"><a href="#什么是Data-Binding-Compiler呢？" class="headerlink" title="什么是Data Binding Compiler呢？"></a>什么是Data Binding Compiler呢？</h3><p>Data Binding Compiler是Data Binding的编译器，它的主要作用就是编译出我们在使用Data Binding时需要使用的辅助代码。例如：ActivityxxxBinding格式的类文件就是由Data Binding Compiler编译生成的，并且ObservableField数据双向绑定也是由编译器编译的代码提供支持的。<br>Data Binding Compiler  V2是Data Binding的第二代编译器，这个编译器和V1编译器最大的不同就是：V1编译器只支持ObservableField系列的数据包装类与View层的双向绑定，而V2编译器能让LiveData支持Data Binding双向绑定。<br>我们可以看看在V2编译器环境下LiveData实现双向绑定的代码片段：<br><strong>布局代码片段</strong><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">data</span>&gt;</span>  </span></div><div class="line">	<span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">	<span class="attr">name</span>=<span class="string">"text"</span>  </div><div class="line">	<span class="attr">type</span>=<span class="string">"android.arch.lifecycle.LiveData&amp;lt;String&gt;"</span>/&gt;  </div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">	<span class="attr">android:layoutwidth</span>=<span class="string">"matchparent"</span>  </div><div class="line">	<span class="attr">android:layoutheight</span>=<span class="string">"40dp"</span>  </div><div class="line">	<span class="attr">android:text</span>=<span class="string">“@</span><span class="template-variable">&#123;text&#125;</span><span class="xml"><span class="tag">“  </span></span></div><div class="line">	/&gt;</div></pre></td></tr></table></figure></p>
<p><strong>使用代码片段</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">XXXBinding binding = ...  </div><div class="line">binding.setLifecycleOwner(<span class="keyword">this</span>);  </div><div class="line">MutableLiveData&lt;<span class="keyword">String</span>&gt; <span class="built_in">text</span> = <span class="keyword">new</span> MutableLiveData&lt;&gt;();  </div><div class="line">binding.setText(<span class="built_in">text</span>);  </div><div class="line"><span class="built_in">text</span>.postValue(<span class="string">" hello word "</span>);</div></pre></td></tr></table></figure></p>
<p>可以看出，在Data Binding Compiler V2 环境下，使用LiveData实现双向绑定的方法和使用Observable实现双向绑定的方法基本山是一样的。通过Data Binding Compiler V2我们能把LiveData不能实现双向绑定和使用麻烦的缺点彻底解决，并且还能保留LiveData能感知View层生命周期的优点保留下来。</p>
<h3 id="如何使用Data-Binding-Compiler-V2？"><a href="#如何使用Data-Binding-Compiler-V2？" class="headerlink" title="如何使用Data Binding Compiler  V2？"></a>如何使用Data Binding Compiler  V2？</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>要使用Data Binding Compiler V2 的话，可能需要升级一下开发环境，需要的配置如下。</p>
<ul>
<li>Android Studio 版本需要升级到3.1 Canary 6以上</li>
<li>gradle版本需要升级到 alpha06以上</li>
<li><p>gradle-wrapper.properties中的distributionUrl需要改成gradle-4.4</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">distributionUrl=https\<span class="symbol">://services</span>.gradle.org/distributions/gradle-<span class="number">4.4</span>-all.zip</div></pre></td></tr></table></figure>
</li>
<li><p>需要在gradle.properties文件中启用databinding V2</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android<span class="selector-class">.databinding</span><span class="selector-class">.enableV2</span>=true</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当我们配置完后，重新clear一下项目就可以开启Data Binding Compiler V2了。</p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>我们以一个模拟登陆的例子来简单介绍如何使用Data Binding Compiler V2。</p>
<p><strong>数据类</strong></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Account &#123;  </div><div class="line">	<span class="keyword">private</span> MutableLiveData&lt;<span class="keyword">String</span>&gt; accountNum = <span class="keyword">new</span> MutableLiveData&lt;&gt;();  </div><div class="line">	<span class="keyword">private</span> MutableLiveData&lt;<span class="keyword">String</span>&gt; password = <span class="keyword">new</span> MutableLiveData&lt;&gt;();  </div><div class="line">  </div><div class="line">	Account(<span class="keyword">String</span> accountNum, <span class="keyword">String</span> password)&#123;  </div><div class="line">		<span class="keyword">this</span>.accountNum.setValue(accountNum);  </div><div class="line">		<span class="keyword">this</span>.password.setValue(password);  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="keyword">public</span> MutableLiveData&lt;<span class="keyword">String</span>&gt; getAccountNum()&#123;  </div><div class="line">		<span class="built_in">return</span> accountNum;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="keyword">public</span> MutableLiveData&lt;<span class="keyword">String</span>&gt; getPassword()&#123;  </div><div class="line">		<span class="built_in">return</span> password;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>xml布局文件</strong></p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span>  </span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </span></div><div class="line">	<span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;  </div><div class="line">  </div><div class="line">	<span class="tag">&lt;<span class="name">data</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">			<span class="attr">name</span>=<span class="string">"viewModel"</span>  </div><div class="line">			<span class="attr">type</span>=<span class="string">"tang.com.databindingcompilerv2.login.LoginViewModel"</span>/&gt;  </div><div class="line">  </div><div class="line">		<span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span>/&gt;</span>  </div><div class="line">	<span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">	<span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span>  </span></div><div class="line">		<span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </div><div class="line">		<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">		<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;  </div><div class="line">  </div><div class="line">		<span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span>  </span></div><div class="line">			<span class="attr">android:id</span>=<span class="string">"@+id/til_account_num"</span>  </div><div class="line">			<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">			<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">			<span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>&gt;  </div><div class="line">  </div><div class="line">			<span class="tag">&lt;<span class="name">android.support.design.widget.TextInputEditText</span>  </span></div><div class="line">				<span class="attr">android:id</span>=<span class="string">"@+id/et_account_num"</span>  </div><div class="line">				<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">				<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">				<span class="attr">android:text</span>=<span class="string">"@=</span><span class="template-variable">&#123;viewModel.account.accountNum&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">				<span class="attr">android:hint</span>=<span class="string">"@string/account_prompt"</span>/&gt;  </div><div class="line">  </div><div class="line">		<span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line">		<span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span>  </span></div><div class="line">			<span class="attr">android:id</span>=<span class="string">"@+id/til_password"</span>  </div><div class="line">			<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">			<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">			<span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/til_account_num"</span>&gt;  </div><div class="line">  </div><div class="line">			<span class="tag">&lt;<span class="name">android.support.design.widget.TextInputEditText</span>  </span></div><div class="line">				<span class="attr">android:id</span>=<span class="string">"@+id/et_password"</span>  </div><div class="line">				<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">				<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">				<span class="attr">android:inputType</span>=<span class="string">"textWebPassword"</span>  </div><div class="line">				<span class="attr">android:text</span>=<span class="string">"@=</span><span class="template-variable">&#123;viewModel.account.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">				<span class="attr">android:hint</span>=<span class="string">"@string/password_prompt"</span> /&gt;  </div><div class="line">  </div><div class="line">		<span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line">		<span class="tag">&lt;<span class="name">android.support.v7.widget.AppCompatButton</span>  </span></div><div class="line">			<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">			<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">			<span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:text</span>=<span class="string">"@string/login"</span>  </div><div class="line">			<span class="attr">android:onClick</span>=<span class="string">"@</span><span class="template-variable">&#123;viewModel.login&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">			<span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span> /&gt;  </div><div class="line">  </div><div class="line">		<span class="tag">&lt;<span class="name">ProgressBar</span>  </span></div><div class="line">			<span class="attr">android:id</span>=<span class="string">"@+id/progressBar"</span>  </div><div class="line">			<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">			<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">			<span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:isVisible</span>=<span class="string">"@</span><span class="template-variable">&#123;viewModel.isLoading&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">			/&gt;  </div><div class="line">  </div><div class="line">		<span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">			<span class="attr">android:id</span>=<span class="string">"@+id/tv_prompt"</span>  </div><div class="line">			<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">			<span class="attr">android:layout_height</span>=<span class="string">"40dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span>  </div><div class="line">			<span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;viewModel.loginPrompt&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></div><div class="line">			<span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span>  </div><div class="line">			<span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/til_password"</span> /&gt;  </div><div class="line">  </div><div class="line">	<span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>ViewModel</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;  </div><div class="line">  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LoginViewModel"</span>;  </div><div class="line">  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> MutableLiveData&lt;Boolean&gt; isLoading = <span class="keyword">new</span> MutableLiveData&lt;&gt;();  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> MutableLiveData&lt;Account&gt; account = <span class="keyword">new</span> MutableLiveData&lt;&gt;();  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> MutableLiveData&lt;String&gt; loginPrompt = <span class="keyword">new</span> MutableLiveData&lt;&gt;();  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LoginViewModel</span><span class="params">()</span></span>&#123;  </div><div class="line">		account.postValue(<span class="keyword">new</span> Account(<span class="string">""</span>,<span class="string">""</span>));  </div><div class="line">		isLoading.postValue(<span class="keyword">false</span>);  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(View view)</span></span>&#123;  </div><div class="line">		String loginMsg =  <span class="string">"accountNum = "</span> + Objects.requireNonNull(account.getValue()).getAccountNum().getValue()  </div><div class="line">				+ <span class="string">"\npassword = "</span> + Objects.requireNonNull(account.getValue()).getPassword().getValue();  </div><div class="line">		Log.d(TAG,<span class="string">"\n正在登陆中....\n"</span>  </div><div class="line">			   + loginMsg);  </div><div class="line">		loginPrompt.postValue(<span class="string">"正在登陆账号："</span> + Objects.requireNonNull(account.getValue()).getAccountNum().getValue());  </div><div class="line">		isLoading.postValue(<span class="keyword">true</span>);  </div><div class="line">			<span class="keyword">new</span> Handler().postDelayed(() -&gt; &#123;  </div><div class="line">				Log.d(TAG,<span class="string">"登陆成功....\n"</span>);  </div><div class="line">				isLoading.postValue(<span class="keyword">false</span>);  </div><div class="line">				Intent intent = <span class="keyword">new</span> Intent(view.getContext(), MainActivity.class);  </div><div class="line">				intent.putExtra(<span class="string">"hello"</span>, loginMsg);  </div><div class="line">				view.getContext().startActivity(intent);  </div><div class="line">				loginPrompt.postValue(<span class="string">""</span>);  </div><div class="line">			&#125;, <span class="number">2000</span>);  </div><div class="line">  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> MutableLiveData&lt;Boolean&gt; <span class="title">getIsLoading</span><span class="params">()</span></span>&#123;  </div><div class="line">		<span class="keyword">return</span> isLoading;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> Account <span class="title">getAccount</span><span class="params">()</span></span>&#123;  </div><div class="line">		<span class="keyword">return</span> account.getValue();  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> MutableLiveData&lt;String&gt; <span class="title">getLoginPrompt</span><span class="params">()</span> </span>&#123;  </div><div class="line">		<span class="keyword">return</span> loginPrompt;  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Activity</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">	<span class="meta">@Override</span>  </div><div class="line">	<span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">		<span class="type">ActivityMainBinding</span> binding = <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>, <span class="type">R</span>.layout.activity_main);  </div><div class="line">		binding.setHello(getIntent().getStringExtra(<span class="string">"hello"</span>) + <span class="string">"\n hello word !"</span>);  </div><div class="line">		binding.setLifecycleOwner(<span class="keyword">this</span>);  </div><div class="line">  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到这里，我们就能愉快地Data Binding Compiler V2了。<br>从测试代码可以看出，代码和我们使用Data Binding Compiler V1的时候差不多，有区别的地方只有两点：</p>
<ol>
<li>ObservableField替换成LiveData</li>
<li>binding对象需要调用setLifecycleOwner(LifecycleOwner lifecycleOwner<br>)设置lifecycleOwner对象。</li>
</ol>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>笔者在GitHub上面建立了一个项目，以后所有的文章的测试DEMO都会上传到这个项目上，有兴趣的读者可以关注下。<br>这篇文章的示例在项目中的todoDatabinding文件下。</p>
<p><strong>项目结构如图所示：</strong><br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/databinding/data_binding_demo_dir.jpg" alt=""><br>其中databindingcompilerv1为Data Binding Compiler V1下的示例代码<br>其中databindingcompilerv2为Data Binding Compiler V2下的示例代码</p>
<p><a href="https://github.com/DobbyTang/Android-advanced-blueprint" target="_blank" rel="external">Data Binding Compiler V2 示例代码</a></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Data Binding Compiler V2主要是解决了Data Binding不能感知View层生命周期的问题。<br>在Android开发中我们的控制层（这里指ViewModel）的生命周期和View层组件的生命周期是不能保持一致的，大多数情况下，控制层的生命周期会比View层长。例如，我们发起网络请求的时候，在请求回调之前View有被销毁的可能，如果在View被销毁后控制层再更新View层，这个时候我们就会遇到讨厌的NPE异常。Lifecycle系列组件的主要功能就是使控制层能够感知View层的生命周期。而Data Binding Compiler V2则是为了使Data Binding能够使用Lifecycle中的LiveData从而获得感知生命周期的能力，即达成Data Binding 的lifecycle-aware。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/databinding/data_binding_compiler_v2.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;bl
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Java,Android" scheme="http://www.tangpj.com/tags/Java-Android/"/>
    
  </entry>
  
  <entry>
    <title>Android（Java）日期和时间处理完全解析(下)——使用Gson优雅地处理日常开发中关于时间处理的问题</title>
    <link href="http://www.tangpj.com/2017/05/06/dateformat2/"/>
    <id>http://www.tangpj.com/2017/05/06/dateformat2/</id>
    <published>2017-05-06T07:14:59.000Z</published>
    <updated>2017-05-06T07:23:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/date/date_clock2.jpg" alt=""></p>
<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>简介：</em>原本关于时间处理问题笔者只是打算写具体的介绍文章的，但是有读者指出这个上篇文章与代码不够完善（因为写这系列文章的时候只是想为大家提供一个解决问题的思路，并没有想提供完成的代码，所以删减掉部分不重要的代码了）。为了让这系列文章对得起完全解析与优雅这两个主题，笔者决定再深入介绍下如何通过Gson更进一步简化时间处理的流程。</p>
<a id="more"></a>
<h2 id="使用TypeAdapter使Gson支持对DateTime的转换"><a href="#使用TypeAdapter使Gson支持对DateTime的转换" class="headerlink" title="使用TypeAdapter使Gson支持对DateTime的转换"></a>使用TypeAdapter使Gson支持对DateTime的转换</h2><p>如果熟悉Gson的朋友肯定应该TypeAdapter作用，TypeAdapter是用来接管某个类（在本文中是是指DateTIme类）的序列化与反序列化过程的。下面先来看看笔者所写的DateTimeTypeAdapter类：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeTypeAdapter</span> <span class="keyword">extends</span> <span class="title">TypeAdapter</span>&lt;<span class="title">DateTime</span>&gt;</span>&#123;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> DateTimeFormatter dateTimeFormatter;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DateTimeTypeAdapter</span><span class="params">()</span></span>&#123;  </div><div class="line">		<span class="keyword">this</span>(ISODateTimeFormat.dateTimeNoMillis());  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DateTimeTypeAdapter</span><span class="params">(DateTimeFormatter dateTimeFormatter)</span></span>&#123;  </div><div class="line">		<span class="keyword">this</span>.dateTimeFormatter = dateTimeFormatter;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="meta">@Override</span>  </div><div class="line">	<span class="keyword">public</span> <span class="function">DateTime <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line">		JsonToken peek = in.peek();  </div><div class="line">		<span class="keyword">if</span> (peek == JsonToken.NULL) &#123;  </div><div class="line">			in.nextNull();  </div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		<span class="keyword">return</span> deserializeToDate(in.nextString());  </div><div class="line">  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="meta">@Override</span>  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, DateTime value)</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line">		<span class="keyword">if</span> (value == <span class="keyword">null</span>)&#123;  </div><div class="line">			out.nullValue();  </div><div class="line">  </div><div class="line">		&#125;  </div><div class="line">		String dateTimeFormatStr = value.toString(dateTimeFormatter);  </div><div class="line">		out.value(dateTimeFormatStr);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="function">DateTime <span class="title">deserializeToDate</span><span class="params">(String json)</span> </span>&#123;  </div><div class="line">		<span class="keyword">try</span> &#123;  </div><div class="line">			<span class="function"><span class="keyword">return</span> DateTime.<span class="title">parse</span><span class="params">(json,dateTimeFormatter)</span></span>;  </div><div class="line">		&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;  </div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> JsonSyntaxException(json, e);  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们通过这个DateTimeTypeAdapter类就能实现Gson对DateTime类的支持了，DateTimeTypeAdapter使用方式如下。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()  </div><div class="line">		.registerTypeAdapter(<span class="built_in">DateTime</span>.<span class="keyword">class</span>, <span class="keyword">new</span> DateTimeTypeAdapter())  </div><div class="line">		.create();</div></pre></td></tr></table></figure></p>
<p>在DateTimeTypeAdapter的实现中我们可以看到有一个叫DateTimeFormatter的类，这个类的作用和SimpleDateFormat的作用类似，都是用于处理时间的处理／显示格式的。我们可以看到，在DateTimeTypeAdapter有两个构造方法。</p>
<ul>
<li>public DateTimeTypeAdapter()构造方法的作用是创建一个支持ISO8061时间格式的DateTimeTypeAdapter。</li>
<li>public DateTimeTypeAdapter(DateTimeFormatter dateTimeFormatter)构造方法的作用是创建一个你需要支持的格式的DateTimeTypeAdapter。</li>
</ul>
<p>代码的细节我们就不详细解析了，下面先了解下DateTimeFormatter这个类。</p>
<h2 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h2><p>这个类是Joda-Time提供的用于支持时间格式的一个类，这个类的使用方式和SimpleDateFormat类似但是它的功能更加强大，下面来简单介绍下如何使用这个类。<br>Joda-Time提供了一系列的工具类与方法让我们快速创建常用的DateTimeFormatter。</p>
<h3 id="ISODateTimeFormat"><a href="#ISODateTimeFormat" class="headerlink" title="ISODateTimeFormat"></a>ISODateTimeFormat</h3><p>这个类的作用是提供一系列快速创建遵循ISO 8061标准的DateTimeFormatter的工厂方法。如上面的例子就使用了<code>ISODateTimeFormat.dateTimeNoMillis()</code>来创建一个忽略了毫秒的DateTimeFormatter实例。至于其它方法的作用读者可以自己验证或者去阅读Joda-TIme的API文档。</p>
<h3 id="DateTimeFormat"><a href="#DateTimeFormat" class="headerlink" title="DateTimeFormat"></a>DateTimeFormat</h3><p>这个类也提供了一系列的工厂方法用于快速创建DateTimeFormatter实例，具体的工厂方法的作用读者有兴趣的话可以去查阅API文档。这里我们主要介绍其中一个方法：<code>forPattern(String s)</code>这个方法的作用是创建一个我们需要的格式的DateTimeFormatter。</p>
<h3 id="使用DateTimeFormatter解析ISO-8061标准的时间"><a href="#使用DateTimeFormatter解析ISO-8061标准的时间" class="headerlink" title="使用DateTimeFormatter解析ISO 8061标准的时间"></a>使用DateTimeFormatter解析ISO 8061标准的时间</h3><p>好了，当我们创建了一个DateTimeFormatter之后，我们应该如何使用呢？笔者先来演示下如何解析ISO 8061标准的时间。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateTimeNoMillis()<span class="comment">;  </span></div><div class="line">DateTime dateTime = DateTime.parse(<span class="string">"2017-05-05T06:44:16Z"</span>,dateTimeFormatter)<span class="comment">;  </span></div><div class="line">System.out.println(dateTime)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>我们来看看输出的结果：<br>2017-05-05T06:44:16.000Z</p>
<p>或者我们可以直接使用<code>DateTimeFormatter.parseDateTime(String s)</code>方法来获得一个DateTime实例，这个方法的效果和<code>DateTime.parse(String s, DateTimeFormatter format)</code>的效果是一样的。</p>
<h3 id="使用DateTimeFormatter解析自定义格式的时间"><a href="#使用DateTimeFormatter解析自定义格式的时间" class="headerlink" title="使用DateTimeFormatter解析自定义格式的时间"></a>使用DateTimeFormatter解析自定义格式的时间</h3><p>在实际的开发中，并不是所有的开发者都遵守IOS 8061标准的，我们在这里不讨论使用哪种时间格式的效果更加好，我们主要讨论的是，如何解析自定义格式的时间，如上一章中我们提到的微博回传的时间格式。微博回传的时间格式在上一章中我们已经分析过了，现在我们知道微博回传的时间的格式是：<br><code>EEE MMM dd HH:mm:ss Z yyyy</code><br>现在我们只需要创建一个支持上面这种格式的DateTimeFormatter即可，下面是代码：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DateTimeFormatter dateTimeFormatter1 = DateTimeFormat.forPattern(<span class="string">"EEE MMM dd HH:mm:ss Z yyyy"</span>)<span class="comment">;  </span></div><div class="line">DateTime dateTime1 = dateTimeFormatter1.parseDateTime(<span class="string">"Sun Apr 16 06:00:19 +0800 2017"</span>)<span class="comment">;  </span></div><div class="line">System.out.println(dateTime1)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>我们运行上面这段代码输出的结果是：</p>
<p><code>java.lang.IllegalArgumentException: Invalid format: &quot;Sun Apr 16 06:00:19 +0800 2017&quot;</code></p>
<p>很意外，居然报错了，为什么会报错呢？这里是因为DateTime支持的时间格式是和手机的语言有关的。因为笔者手机的语言设置是中文的，所以中文格式下当然是无法识别Sun和Apr这两个单词啦。那么要怎么做才能解决这个问题呢？我们不妨试试吧Sun和Apr改成星期六和四月试试。<br>现在我们的代码变成了：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DateTimeFormatter dateTimeFormatter1 = DateTimeFormat.forPattern(<span class="string">"EEE MMM dd HH:mm:ss Z yyyy"</span>)<span class="comment">;  </span></div><div class="line">DateTime dateTime1 = dateTimeFormatter1.parseDateTime(<span class="string">"星期日 四月 16 06:00:19 +0800 2017"</span>)<span class="comment">;  </span></div><div class="line">System.out.println(dateTime1)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>运行结果是：<br>2017-04-15T22:00:19.000Z<br>从上面的结果我们可以得出一个结论：DateTime默认的toString方法是遵守ISO 8061标准的。那么我们想让DateTime转换成我们需要的格式的字符串需要怎么做呢？很简单,我们只需要把输出代码改成：  </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">dateTime1</span><span class="selector-class">.toString</span>(<span class="selector-tag">dateTimeFormatter1</span>));</div></pre></td></tr></table></figure>
<p>现在的输出结果是：<br>星期六 四月 15 22:00:19 +0000 2017</p>
<p>我们已经解决我们的问题了吗？并没有!上面这个输出还存在两个问题：</p>
<ol>
<li>我们无法控制微博回传给我们的时间格式，所以传入的字符串只能是Sun Apr 16 06:00:19 +0800 2017这个形式。</li>
<li>上面输出的时间结果和我们输入的时间并不一致，所以上面的结果是有问题的。</li>
</ol>
<p>我们如何解决呢？第一个问题我们经过分析得知是和系统的时间格式有关，而在Java 的API中提供了一个叫Locale的类，这个类的作用是控制语言环境。那么我们是不是通过这个Locale把DateTime的语言环境转换成美国的呢？<br>我们通过查阅DateTimeFormatter的源码可以发现又个这样的方法：<code>withLocale(Locale local)</code>,如无意外，这就是设置语言环境的方法了。我们来试试效果：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DateTimeFormatter dateTimeFormatter1 = DateTimeFormat  </div><div class="line">		.forPattern(<span class="string">"EEE MMM dd HH:mm:ss Z yyyy"</span>)  </div><div class="line">		.withLocale(Locale.US)<span class="comment">;  </span></div><div class="line">DateTime dateTime1 = dateTimeFormatter1.parseDateTime(<span class="string">"Sun Apr 16 06:00:19 +0800 2017"</span>)<span class="comment">;  </span></div><div class="line">System.out.println(dateTime1)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>运行的结果是：<br>Sat Apr 15 22:00:19 +0000 2017</p>
<p>现在我们来分析导致第二个问题的原因，一般来说，导致时间出现误差的原因很可能是因为时区的问题。我们通过输入和输出的时间差可以大概知道相差的时间是8个小时。这恰好是美国时间和中国时间的时间差，那么按照这个规律，我们只需要把时区设置为中国的时区就可以解决这个问题了。这个问题同样是通过DateTimeFormatter来解决的。我们来看看更改后生成DateTimeFormatter实例的代码：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DateTimeFormatter dateTimeFormatter1 = DateTimeFormat  </div><div class="line"><span class="meta">		.forPattern</span>(<span class="string">"EEE MMM dd HH:mm:ss Z yyyy"</span>)  </div><div class="line"><span class="meta">		.withLocale</span>(Locale.US)  </div><div class="line"><span class="meta">		.withZone</span>(DateTimeZone.forID(<span class="string">"+08:00"</span>))<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>我们重点看最后一行代码，看起来的意思很像是：把输出的时间增加8个小时，就是这么简单。如果需要减少8小时，我们只需要把‘+’换成‘-’就可以了。通过这系列的代码可以看到，我们通过DateTimeFormatter可以轻易的实现对时间格式的转换。<br>现在我们来运行看看效果：<br>Sun Apr 16 06:00:19 +0800 2017</p>
<p>到目前为止算是完全解决了我们上面提到的需求与出现的问题了，而其它更加有趣的用法，读者可以参考源码或API文档自行尝试。</p>
<h2 id="DateFormatUtils工具类"><a href="#DateFormatUtils工具类" class="headerlink" title="DateFormatUtils工具类"></a>DateFormatUtils工具类</h2><p>因为上篇文章为了简洁易懂，把大部分关于时间转换的代码都删除掉了，造成了部分读者理解上的问题。所以这次补上完整的代码。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatUtils</span> </span>&#123;  </div><div class="line">  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ONE_SECOND_AGO = <span class="string">"秒前"</span>;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ONE_MINUTE_AGO = <span class="string">"分钟前"</span>;  </div><div class="line">  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">format</span><span class="params">(Date date)</span> </span>&#123;  </div><div class="line">		DateTime dateTime = <span class="keyword">new</span> DateTime(date);  </div><div class="line">		<span class="keyword">return</span> realFormat(DateTime.now(),dateTime);  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">format</span><span class="params">(DateTime dateTime)</span></span>&#123;  </div><div class="line">		<span class="keyword">return</span> realFormat(DateTime.now(),dateTime);  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="comment">/**  </span></div><div class="line">	 * <span class="doctag">@Method</span>: realFormat  </div><div class="line">	 * <span class="doctag">@author</span> create by Tang  </div><div class="line">	 * <span class="doctag">@date</span> 2017/5/5 下午3:20  </div><div class="line">	 * <span class="doctag">@Description</span>: 实现时间转换函数  </div><div class="line">	 */  </div><div class="line">	<span class="meta">@SuppressLint</span>(<span class="string">"SimpleDateFormat"</span>)  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="function">String <span class="title">realFormat</span><span class="params">(DateTime nowDateTime,DateTime dateTime)</span></span>&#123;  </div><div class="line">		<span class="keyword">int</span> seconds = Seconds.secondsBetween(dateTime,nowDateTime).getSeconds();  </div><div class="line">		<span class="keyword">if</span> (seconds &lt; <span class="number">60</span>) &#123;  </div><div class="line">			<span class="keyword">return</span> seconds + ONE_SECOND_AGO;  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		<span class="keyword">int</span> minutes = Minutes.minutesBetween(dateTime,nowDateTime).getMinutes();  </div><div class="line">		<span class="keyword">if</span> (minutes &lt; <span class="number">60</span>) &#123;  </div><div class="line">			<span class="keyword">return</span> minutes + ONE_MINUTE_AGO;  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		<span class="keyword">int</span> day = nowDateTime.getDayOfYear() - dateTime.getDayOfYear();  </div><div class="line">		<span class="keyword">int</span> year = nowDateTime.getYear() - dateTime.getYear();  </div><div class="line">		<span class="keyword">if</span> (year &lt; <span class="number">1</span> &amp;&amp; day &lt; <span class="number">1</span>) &#123;  </div><div class="line">			DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<span class="string">"今天 HH:mm"</span>);  </div><div class="line">			<span class="function"><span class="keyword">return</span> dateTime.<span class="title">toString</span><span class="params">(dateTimeFormatter)</span></span>;  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		<span class="keyword">if</span> (year &lt; <span class="number">1</span> &amp;&amp; day &lt; <span class="number">2</span>) &#123;  </div><div class="line">			DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<span class="string">"昨天 HH:mm"</span>);  </div><div class="line">			<span class="function"><span class="keyword">return</span> dateTime.<span class="title">toString</span><span class="params">(dateTimeFormatter)</span></span>;  </div><div class="line">		&#125;  </div><div class="line">		<span class="keyword">if</span> (year &lt; <span class="number">1</span>) &#123;  </div><div class="line">			DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<span class="string">"MM月dd日 HH:mm"</span>);  </div><div class="line">			<span class="function"><span class="keyword">return</span> dateTime.<span class="title">toString</span><span class="params">(dateTimeFormatter)</span></span>;  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<span class="string">"yyyy年MM月dd日 HH:mm"</span>);  </div><div class="line">		<span class="function"><span class="keyword">return</span> dateTime.<span class="title">toString</span><span class="params">(dateTimeFormatter)</span></span>;  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DateFormatUtils这个工具类同时支持对Date和DateTime实现时间转换，我们也可以在代码中看到，时间格式的转换是通过DateTimeFormat这个类来完成了。至于这个类的实现原理上一章中已经解析了，这里就不多说了。</p>
<h2 id="Gson与DateTimeUtils的测试"><a href="#Gson与DateTimeUtils的测试" class="headerlink" title="Gson与DateTimeUtils的测试"></a>Gson与DateTimeUtils的测试</h2><p>说了这么多，现在测试下上文的代码，假设现在的时间是2017年5月5日 16:46:46。</p>
<p><em>测试通过Gson解析ISO 8061格式的时间：</em><br><em>测试实例是：</em><br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span> ISO8061_STR = <span class="string">"\"</span><span class="number">2017</span><span class="number">-05</span><span class="number">-05</span>T06:<span class="number">44</span>:<span class="number">16</span>Z\<span class="string">""</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><em>测试代码：</em></p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()  </div><div class="line">		.registerTypeAdapter(<span class="built_in">DateTime</span>.<span class="keyword">class</span>, <span class="keyword">new</span> DateTimeTypeAdapter())  </div><div class="line">		.create();  </div><div class="line"><span class="built_in">DateTime</span> isoDateTime = gson.fromJson(ISO8061STR,<span class="built_in">DateTime</span>.<span class="keyword">class</span>);  </div><div class="line">System.out.println(DateFormatUtils.format(isoDateTime));</div></pre></td></tr></table></figure>
<p><em>测试结果是：</em><br>今天 06:44</p>
<p><em>通过Gson解析微博回传的时间数据：</em></p>
<p><em>测试实例：</em><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> WEIBO_STR1 = <span class="string">"\"Fri May 05 16:47:19 +0800 2017\""</span>;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> WEIBO_STR2 = <span class="string">"\"Fri May 05 16:40:22 +0800 2017\""</span>;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> WEIBO_STR3 = <span class="string">"\"Fri May 05 04:22:19 +0800 2017\""</span>;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> WEIBO_STR4 = <span class="string">"\"Thu May 04 12:00:19 +0800 2017\""</span>;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> WEIBO_STR5 = <span class="string">"\"Sun Apr 16 06:00:19 +0800 2017\""</span>;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> WEIBO_STR6 = <span class="string">"\"Thu Nov 05 23:17:19 +0800 2015\""</span>;</div></pre></td></tr></table></figure></p>
<p><em>测试代码：</em><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">DateTimeFormatter weiboFormat =  DateTimeFormat.forPattern(<span class="string">"EEE MMM dd HH:mm:ss Z yyyy"</span>)  </div><div class="line">		.withLocale(Locale.<span class="keyword">US</span>)  </div><div class="line">                 .withZone(DateTimeZone.forID(<span class="string">"+08:00"</span>));  </div><div class="line">Gson gson1 = new GsonBuilder()  </div><div class="line">		.registerTypeAdapter(DateTime.<span class="keyword">class</span>  </div><div class="line">				,new DateTimeTypeAdapter(weiboFormat))  </div><div class="line">		.create();  </div><div class="line">  </div><div class="line">System.<span class="keyword">out</span>.println(DateFormatUtils.<span class="keyword">format</span>(gson1.fromJson(WEIBO_STR1,DateTime.<span class="keyword">class</span>)));  </div><div class="line">System.<span class="keyword">out</span>.println(DateFormatUtils.<span class="keyword">format</span>(gson1.fromJson(WEIBO_STR2,DateTime.<span class="keyword">class</span>)));  </div><div class="line">System.<span class="keyword">out</span>.println(DateFormatUtils.<span class="keyword">format</span>(gson1.fromJson(WEIBO_STR3,DateTime.<span class="keyword">class</span>)));  </div><div class="line">System.<span class="keyword">out</span>.println(DateFormatUtils.<span class="keyword">format</span>(gson1.fromJson(WEIBO_STR4,DateTime.<span class="keyword">class</span>)));  </div><div class="line">System.<span class="keyword">out</span>.println(DateFormatUtils.<span class="keyword">format</span>(gson1.fromJson(WEIBO_STR5,DateTime.<span class="keyword">class</span>)));  </div><div class="line">System.<span class="keyword">out</span>.println(DateFormatUtils.<span class="keyword">format</span>(gson1.fromJson(WEIBO_STR6,DateTime.<span class="keyword">class</span>)));</div></pre></td></tr></table></figure></p>
<p><em>测试结果</em><br>33秒前<br>7分钟前<br>今天 04:22<br>昨天 12:00<br>04月16日 06:00<br>2015年11月05日 23:17</p>
<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>对于时间的处理到这里就真正的结束了，上一篇由于笔者的疏忽可能会导致一些读者理解上有某些偏差。这篇的主要是作为上一篇文章的补偿而写的。希望大家看完这两篇博客后能够对时间的处理有更深一步的理解。最后还是那句话，有时候我们觉得理所当然的东西，在实现上的复杂度可能会超出你的预料的。所以在学习的过程成，更进一步对自己的成长是很有帮助的。最后附上这篇文章的源码，觉得这系列文章对你有所帮助或启发的话，可以star这篇文章的源码哦，当作是对博主的小小支持吧。<br>源码GitHub地址：<a href="https://github.com/DobbyTang/DateFormatUtils" title="DateFormatUtils" target="_blank" rel="external">DateFormatUtils</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/date/date_clock2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;简介：&lt;/em&gt;原本关于时间处理问题笔者只是打算写具体的介绍文章的，但是有读者指出这个上篇文章与代码不够完善（因为写这系列文章的时候只是想为大家提供一个解决问题的思路，并没有想提供完成的代码，所以删减掉部分不重要的代码了）。为了让这系列文章对得起完全解析与优雅这两个主题，笔者决定再深入介绍下如何通过Gson更进一步简化时间处理的流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Java,Android" scheme="http://www.tangpj.com/tags/Java-Android/"/>
    
  </entry>
  
  <entry>
    <title>Android（Java）日期和时间处理完全解析（上）——使用Gson和Joda-Time优雅地处理日常开发中关于时间处理的问题</title>
    <link href="http://www.tangpj.com/2017/05/02/dateformat/"/>
    <id>http://www.tangpj.com/2017/05/02/dateformat/</id>
    <published>2017-05-02T08:27:08.000Z</published>
    <updated>2017-05-05T08:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/date/date_clock.jpg" alt=""></p>
<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>简介：</em>对于Android和Java开发者来说，时间的处理是我们必须掌握的知识。如果你尝试过造时间处理方面的轮子的话，你就会知道，关于时间的处理是一个非常复杂的问题。我们在处理时间时需要把时间转化成能让计算机理解的形式，而Java 8之前的库对日期和时间的支持是非常不理想的。Java 8种提供了全新的时间API供我们使用，这些API在java.time包下。Android开发者需要注意的是，虽然Android Studio 2.4已经开始支持Java 8了，但是却无法导入java.time包下的类文件，这个问题应该是Android Studio的BUG。因为这个原因，所以笔者在这里介绍的是Java 8之前如何处理好时间和日期相关的问题。</p>
<a id="more"></a>
<h2 id="Java旧版本时间API的简介"><a href="#Java旧版本时间API的简介" class="headerlink" title="Java旧版本时间API的简介"></a>Java旧版本时间API的简介</h2><p>在Java 1.0中，对日期和时间的处理只能够以来java.util.Date类。正如类名所表达的，这个类无法表示日期，只能以毫秒的精度表示时间。更糟糕的是它的易用性，由于某些设计决策，这个类的易用性被深深地损害了，比如：年份的起始选择是1900年，月份的起始选择是0。这意味着，如果你要表示2017年4月30日的话，需要创建下面这样的Date实例：<br><code>Date date = new Date(117,3,30);</code><br>它的打印效果为：<br>Sun Apr 30 00:00:00 CST 2017<br>看起来不是十分直观。此外，Date类的toString方法返回的字符串也很容易误导人。以我们的例子而言，它的返回值中甚至还包含了时区CST，即中国时间。但这并不表示Date类在任何方面支持时区。<br>随着Java 1.0退出历史的舞台，Date类的种种问题和限制几乎一扫而光，但是很明显，这些问题的解决是伴随着兼容性的牺牲的。所以在Java 1.1中，Date类的很多方法都被废弃了。取而代之的是java.util.Calendar类。很不幸，Calendar类也有类似的问题和设计缺陷。导致使用这些方法写出的代码非常容易出错。比如，月份依旧是从0开始计算的。而更糟糕的是，同时存在Date和Calendar这两个类也增加了程序员的困惑。此外，有的特性只在某一个类有提供，比如用于以语言无关方式格式化和解析日期或时间的DateFormat方法就只在Date里面有。<br>DateFormat方法也有它自己的问题。比如，它不是线程安全的。<br>最后，Date和Calendar类都是可变的，想下将2017年4月30日改变为2017年5月1日的后果？这种设计会将你拖入维护的噩梦。<br>所以我们需要一个第三方的日期和时间库。在这里我们介绍的是Joda-Time。Java 8中java.time包中整合了很多Joda-Time的特性。</p>
<h2 id="Joda-Time的简单介绍"><a href="#Joda-Time的简单介绍" class="headerlink" title="Joda-Time的简单介绍"></a>Joda-Time的简单介绍</h2><p>引入MAVEN依赖<br><code>compile &#39;net.danlew:android.joda:2.9.9&#39;</code></p>
<h3 id="核心类介绍"><a href="#核心类介绍" class="headerlink" title="核心类介绍"></a>核心类介绍</h3><ul>
<li><em>Instant: </em>不可变的类，用来表示时间轴上一个瞬时的点</li>
<li><em>DateTime: </em>不可变的类，用来替换JDK的Calendar类</li>
<li><em>LocalDate: </em>不可变的类，表示一个本地的日期，而不包含时间部分（没有时区信息）</li>
<li><em>LocalTime: </em>    不可变的类，表示一个本地的时间，而不包含日期部分（没有时区信息）</li>
<li><em>LocalDateTime: </em>不可变的类，表示一个本地的日期－时间（没有时区信息）</li>
</ul>
<h3 id="DateTime简介"><a href="#DateTime简介" class="headerlink" title="DateTime简介"></a>DateTime简介</h3><p>DateTime是我们用得比较多的一个类，在这里笔者简单介绍下它的使用方法。首先我们来介绍下它的构造方法。</p>
<ul>
<li>DateTime()：这个无参的构造方法会创建一个在当前系统所在时区的当前时间，精确到毫秒。</li>
<li>DateTime(long instant)：接受一个一个long类型的时间戳（它表示这个时间戳距1970-01-01T00:00:00Z的毫秒数）。创建时间实例，使用默认的时区。</li>
<li>DateTime(Object instant)：这个构造方法可以通过一个Object对象构造一个实例。这个Object对象可以是这些类型：ReadableInstant, String, Calendar和Date。其中String的格式需要是ISO8601格式，详见：<a href="http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTimeParser--" title="ISODateTimeFormat.dateTimeParser()" target="_blank" rel="external">ISODateTimeFormat.dateTimeParser()</a>。</li>
<li>DateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute)：这个构造方法可以根据具体的时间构造一个实例。</li>
</ul>
<h4 id="DateTime常用API"><a href="#DateTime常用API" class="headerlink" title="DateTime常用API"></a>DateTime常用API</h4><p>下面我们来介绍一下，DateTime类中常用的API。</p>
<h5 id="get方法集合（如getYear）："><a href="#get方法集合（如getYear）：" class="headerlink" title="get方法集合（如getYear）："></a>get方法集合（如getYear）：</h5><p>get系列方法主要用于获取DateTime的一些具体信息，我们可以通过方法名来推断具体的作用。如getDayForYear，这个方法的作用是获取该DateTime实例属于该年的第几天。我们可以看看2017年4月30日这个例子。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DateTime dateTime = new DateTime(<span class="number">2017</span>,<span class="number">04</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>);  </div><div class="line">System.out.println(<span class="string">"这天是2017年的第"</span> + dateTime.getDayOfYear() + <span class="string">"天"</span>);</div></pre></td></tr></table></figure></p>
<p>我们可以看看输出的打印的结果是：<br>这天是2017年的第120天<br>Joda-Time会自动帮我们处理闰年与月份的问题，好了我们现在可以打开日历软件看看这天是不是2017年的第30天了。<br>get方法集还有很多十分有用的API，读者可以自己体验下。</p>
<h5 id="with方法集合（如withYear）："><a href="#with方法集合（如withYear）：" class="headerlink" title="with方法集合（如withYear）："></a>with方法集合（如withYear）：</h5><p>with方法集合主要是用来设置DateTime实例的一些属性的，如我们可以把2017年4月30日设置为2017年3月30日。上文提到过，DateTime是不可变类，所以with系列方法并没有改变原对象的属性，而是返回了一个新的对象。下面我们可以看看我们将2017年4月30日设置为2017年3月30日的代码。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DateTime dateTime = new DateTime(<span class="number">2017</span>,<span class="number">04</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>);  </div><div class="line">DateTime withDateTime = dateTime.withMonthOfYear(<span class="number">3</span>);  </div><div class="line">System.out.println(withDateTime);</div></pre></td></tr></table></figure></p>
<p>打印的结果是：2017-03-30T00:00:00.000Z<br>我们可以看到，月份已经变为3月了。</p>
<h5 id="plus-minus方法集合（如：plusDay）"><a href="#plus-minus方法集合（如：plusDay）" class="headerlink" title="plus/minus方法集合（如：plusDay）"></a>plus/minus方法集合（如：plusDay）</h5><p>plus方法集合的功能是返回DateTime实例的某个属性增加／减少一定的时间后的实力。这里我们需要注意的一点是，我们可以把plus/minus方法集合想象成翻日历牌一样，所有的计算都是合法的，并不会出现输入一场的情况。下面我们可以来看看把2017年4月30增加3天的例子。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DateTime dateTime = new DateTime(<span class="number">2017</span>,<span class="number">04</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>);  </div><div class="line">DateTime plusDays = dateTime.plusDays(<span class="number">3</span>);  </div><div class="line">System.out.println(plusDays);</div></pre></td></tr></table></figure></p>
<p>打印的结果是：2017-05-03T00:00:00.000Z<br>这系列运算并不会抛出异常或返回2017年4月33日这样的错误结果的。</p>
<p>由于这篇文章的重点不是介绍Joda-Time这个库，所以关于Joda-Time的介绍到这里就结束了，有兴趣的读者可以阅读官方API文档或者去看一些优秀的Blog加深理解也是可以的。下面我们来介绍本文的重点了，我们如何在Android日常开发中优雅地处理时间相关的问题。</p>
<h2 id="通过Gson优雅地处理时间"><a href="#通过Gson优雅地处理时间" class="headerlink" title="通过Gson优雅地处理时间"></a>通过Gson优雅地处理时间</h2><p>首先给大家看一则最近的热门微博话题下的一则微博。<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/date/date_weibo_hot.png" alt="" title="微博热门话题"><br>我们主要关注笔者标记的两个时间，可以看到微博是把时间转化为更容易让我们理解的形式来表示的。我们来分析下各个时间段微博的现实形式，以2017年5月1日 22:00:00是现在为例。</p>
<ul>
<li>2017年5月1日 22:00:40   ->  40秒前</li>
<li>2017年5月1日 22:40:05   ->  40分钟前</li>
<li>2017年5月1日 10:30:20    ->  今天10:30</li>
<li>2017年4月30日 10:30:32 ->  昨天10:30</li>
<li>2017年3月20日 20:30:30 ->  3月20日 20:30</li>
<li>2014年3月20日 17:20:00  ->  2014年3月20日 17:20</li>
</ul>
<p>我们可以看到微博会按照一定的规律对时间进行格式化，格式化后的效果笔者认为更适合阅读微博时的时间显示。一般使用Date或Calendar进行实现类似的功能会有两个问题：</p>
<ol>
<li>代码不够优雅</li>
<li>实现该功能十分繁琐</li>
</ol>
<p>那么我们如何优雅的处理这个问题呢？答案就是通过Gson和Joda-Time。服务器回传过来的时间数据一般是一串类似格式的字符串（微博采用的就是该格式）：<br><code>&quot;Tue Apr 25 23:33:03 +0800 2017&quot;</code></p>
<h3 id="使用Gson把时间字符串转换成Date类型"><a href="#使用Gson把时间字符串转换成Date类型" class="headerlink" title="使用Gson把时间字符串转换成Date类型"></a>使用Gson把时间字符串转换成Date类型</h3><p>我们知道Gson可以把Json数据转化成任何我们需要的类型，那么这串关于时间的字符串用Gson当然也能够轻易转化为Date类型啦。那我我们如何使用Gson来处理呢？我们先来看看使用Gson进行处理的代码：<br>首先我们要创建能解析上面格式时间的Gson实例：<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Gson</span> gson = <span class="function"><span class="keyword">new</span> <span class="title">GsonBuilder</span>()  </span></div><div class="line">                  <span class="comment">//设置需要解析的时间格式  </span></div><div class="line">		.<span class="title">setDateFormat</span>("<span class="type">EEE</span> <span class="type">MMM</span> dd <span class="type">HH</span>:mm:ss <span class="type">Z</span> yyyy")  </div><div class="line">		.<span class="title">create</span>();</div></pre></td></tr></table></figure></p>
<p>setDateFormat的参数内容我们暂时先放下，在下一节笔者我详细解释这串字符串的含义的。</p>
<p>我们可以模拟下解析微博内容来测试下，我们需要解析的数据是：<br>{“date”:”Tue May 02 10:02:03 +0800 2017”,”text”:”Hello word”}</p>
<p><em>微博实体类：</em><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Weibo &#123;  </div><div class="line">	<span class="comment">//微博创建时间  </span></div><div class="line">	<span class="keyword">public</span> Date date;  </div><div class="line">  </div><div class="line">	<span class="comment">//正文  </span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">text</span>;  </div><div class="line">  </div><div class="line">	<span class="keyword">public</span> Weibo(<span class="keyword">String</span> date ,<span class="keyword">String</span> <span class="built_in">text</span>)&#123;  </div><div class="line">		<span class="keyword">this</span>.date = <span class="keyword">new</span> Date(date);  </div><div class="line">		<span class="keyword">this</span>.<span class="built_in">text</span> = <span class="built_in">text</span>;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	@Override  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;  </div><div class="line">		<span class="built_in">return</span> <span class="string">"这条微博创建的时间是："</span> + date + <span class="string">"\n微博正文："</span> + <span class="built_in">text</span> ;  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>使用Gson解析</em><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Weibo weobo = gson.fromJson(json,Weibo.<span class="keyword">class</span>);  </div><div class="line">System.out.<span class="built_in">println</span>(weobo);</div></pre></td></tr></table></figure></p>
<p>打印的结果：<br>这条微博创建的时间是：Tue May 02 10:02:03 CST 2017<br>微博正文：Hello word</p>
<p>这里我们需要注意一点是，使用上面创建的gson来直接解析时间会报错的。如：<br><code>Date date = gson.fromJson(&quot;Tue May 02 10:02:03 +0800 2017&quot;,Date.class);</code><br>上面这行代码会抛出一个JsonSyntaxException异常。</p>
<p>这个错误是和Gson有关，我们日常使用的情况下，基本不会遇到直接解析Date数据的需求的，所以这种情况我们可以不做处理。如果想解决这个问题的话，我们可以重写一个用于解析时间的TyepAdapter来处理，在这里就不细说下去了。</p>
<h3 id="通过Joda-Time把时间转换成更容易理解的格式"><a href="#通过Joda-Time把时间转换成更容易理解的格式" class="headerlink" title="通过Joda-Time把时间转换成更容易理解的格式"></a>通过Joda-Time把时间转换成更容易理解的格式</h3><p>根据上文的分析，我们需要把时间转换成类似微博这种表现形式的话，需要把获取到的时间和系统当前时间进行比较，然后再转换。我们先来看看代码：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class DateFormatUtil &#123;  </div><div class="line">  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> ONE_SECOND_AGO = <span class="string">"秒前"</span>;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> ONE_MINUTE_AGO = <span class="string">"分钟前"</span>;  </div><div class="line">  </div><div class="line">	@SuppressLint(<span class="string">"SimpleDateFormat"</span>)  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> format(Date date) &#123;  </div><div class="line">                 <span class="comment">//把时区转换为东8区  </span></div><div class="line">                 TimeZone timeZone = TimeZone.getTimeZone(<span class="string">"GMT+8"</span>);  </div><div class="line">                 DateTimeZone.setDefault(DateTimeZone.forTimeZone(timeZone));  </div><div class="line">  </div><div class="line">		DateTime nowDateTime = DateTime.now();  </div><div class="line">		DateTime dateTime = <span class="keyword">new</span> DateTime(date);  </div><div class="line">		<span class="keyword">return</span> formatDate(dateTime,nowDateTime);  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	@SuppressLint(<span class="string">"SimpleDateFormat"</span>)  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> formatDate(DateTime dateTime,DateTime nowDateTime)&#123;  </div><div class="line">		<span class="built_in">int</span> seconds = Seconds.secondsBetween(dateTime,nowDateTime).getSeconds();  </div><div class="line">		<span class="keyword">if</span> (seconds &lt; <span class="number">60</span>) &#123;  </div><div class="line">			<span class="keyword">return</span> seconds + ONE_SECOND_AGO;  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		<span class="built_in">int</span> minutes = Minutes.minutesBetween(dateTime,nowDateTime).getMinutes();  </div><div class="line">		<span class="keyword">if</span> (minutes &lt; <span class="number">60</span>) &#123;  </div><div class="line">			<span class="keyword">return</span> minutes + ONE_MINUTE_AGO;  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		<span class="built_in">int</span> <span class="built_in">day</span> = nowDateTime.getDayOfYear() - dateTime.getDayOfYear();  </div><div class="line">		<span class="built_in">int</span> <span class="built_in">year</span> = nowDateTime.getYear() - dateTime.getYear();  </div><div class="line">		<span class="keyword">if</span> (<span class="built_in">year</span> &lt; <span class="number">1</span> &amp;&amp; <span class="built_in">day</span> &lt; <span class="number">1</span>) &#123;  </div><div class="line">			SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"今天 HH:mm"</span>);  </div><div class="line">			<span class="keyword">return</span> simpleDateFormat.format(dateTime.toDate());  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		<span class="keyword">if</span> (<span class="built_in">year</span> &lt; <span class="number">1</span> &amp;&amp; <span class="built_in">day</span> &lt; <span class="number">2</span>) &#123;  </div><div class="line">			SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"昨天 HH:mm"</span>);  </div><div class="line">			<span class="keyword">return</span> simpleDateFormat.format(dateTime.toDate());  </div><div class="line">		&#125;  </div><div class="line">		<span class="keyword">if</span> (<span class="built_in">year</span> &lt; <span class="number">1</span>) &#123;  </div><div class="line">			SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"MM月dd日 HH:mm"</span>);  </div><div class="line">			<span class="keyword">return</span> simpleDateFormat.format(dateTime.toDate());  </div><div class="line">		&#125;  </div><div class="line">  </div><div class="line">		SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm"</span>);  </div><div class="line">		<span class="keyword">return</span> simpleDateFormat.format(dateTime.toDate());  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到，代码十分简单，只是把对微博时间处理的分析结果简单地转化为代码而已。只是简单地把上面分析的结果转化成代码而已。<br>现在我们来测试下DateFormatUtil这个类吧，假设现在的时间是2017年5月2日14点43分，我们的测试代码是：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Date</span> date0 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Tue May 02 14:43:03 +0800 2017"</span>);  </div><div class="line"><span class="built_in">Date</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Tue May 02 14:08:03 +0800 2017"</span>);  </div><div class="line"><span class="built_in">Date</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Tue May 02 02:00:03 +0800 2017"</span>);  </div><div class="line"><span class="built_in">Date</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Mon May 1 09:32:13 +0800 2017"</span>);  </div><div class="line"><span class="built_in">Date</span> date4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Tue Apr 25 23:33:03 +0800 2017"</span>);  </div><div class="line"><span class="built_in">Date</span> date5 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Thu Aug 4 12:03:03 +0800 2016"</span>);  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">System</span>.out.println(DateFormatUtil.<span class="keyword">format</span>(date0));  </div><div class="line"><span class="keyword">System</span>.out.println(DateFormatUtil.<span class="keyword">format</span>(date1));  </div><div class="line"><span class="keyword">System</span>.out.println(DateFormatUtil.<span class="keyword">format</span>(date2));  </div><div class="line"><span class="keyword">System</span>.out.println(DateFormatUtil.<span class="keyword">format</span>(date3));  </div><div class="line"><span class="keyword">System</span>.out.println(DateFormatUtil.<span class="keyword">format</span>(date4));  </div><div class="line"><span class="keyword">System</span>.out.println(DateFormatUtil.<span class="keyword">format</span>(date5));</div></pre></td></tr></table></figure></p>
<p>输出结果：<br>1分钟前<br>36分钟前<br>今天 02:00<br>昨天 09:32<br>04月25日 23:33<br>2016年08月04日 12:03</p>
<p>为了方便大家理解笔者删除了部分不重要的代码，只留下核心代码供大家学习，各位可以根据实际需求修改后再使用。</p>
<h2 id="DateFormat使用介绍与字段解析"><a href="#DateFormat使用介绍与字段解析" class="headerlink" title="DateFormat使用介绍与字段解析"></a>DateFormat使用介绍与字段解析</h2><p>前文在介绍使用Gson解析Date数据的时候出现过一行这样的代码：<br><code>setDateFormat(&quot;EEE MMM dd HH:mm:ss Z yyyy&quot;)</code><br>很多朋友对”EEE MMM dd HH:mm:ss Z yyyy”这个字符串处于一知半解的状况，这个字符串是用来控制时间的格式的，我们首先简单了解下各个字母的作用与其含义。</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">日期或时间元素</th>
<th style="text-align:center">表示</th>
<th style="text-align:center">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">Era 标志符</td>
<td style="text-align:center">Text</td>
<td style="text-align:center">AD</td>
</tr>
<tr>
<td style="text-align:center">y</td>
<td style="text-align:center">年</td>
<td style="text-align:center">Year</td>
<td style="text-align:center">1971; 71</td>
</tr>
<tr>
<td style="text-align:center">M</td>
<td style="text-align:center">年中的月份</td>
<td style="text-align:center">Month</td>
<td style="text-align:center">July; Jul; 07</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">年中的周数</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">13</td>
</tr>
<tr>
<td style="text-align:center">W</td>
<td style="text-align:center">月份中的周数</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">年中的天数</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">232</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:center">月份中的天数</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">月份中的星期</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center">星期中的天数</td>
<td style="text-align:center">Text</td>
<td style="text-align:center">Tuesday; Tue</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">Am/pm 标记</td>
<td style="text-align:center">Text</td>
<td style="text-align:center">PM</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td style="text-align:center">一天中的小时数（0-23）</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:center">k</td>
<td style="text-align:center">一天中的小时数（1-24）</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">24</td>
</tr>
<tr>
<td style="text-align:center">K</td>
<td style="text-align:center">am/pm 中的小时数（0-11）</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">h</td>
<td style="text-align:center">am/pm 中的小时数（1-12）</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:center">小时中的分钟数</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">30</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:center">分钟中的秒数</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">55</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">毫秒数</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">978</td>
</tr>
<tr>
<td style="text-align:center">z</td>
<td style="text-align:center">时区</td>
<td style="text-align:center">General time zone</td>
<td style="text-align:center">Pacific Standard Time; PST; GMT-08:00</td>
</tr>
<tr>
<td style="text-align:center">Z</td>
<td style="text-align:center">时区</td>
<td style="text-align:center">RFC 822 time zone</td>
<td style="text-align:center">-0800</td>
</tr>
</tbody>
</table>
<p>需要特别注意的是：字符是区分大小写的，如HH:mm:ss中HH是代表小时采用24小时制，而hh则表示采用12小时制。<br>那么我们的字母的数量代表什么意思呢？还是使用上面的例子：<br>“EEE MMM dd HH:mm:ss Z yyyy”<br>其中我们星期中的天数E，年中的月份M的格式为EEE MMM。这样写的作用是最多显示3位的意思。那么HH就是代表小时采用24小时制并显示两位数字，yyyy则代表年份为4位。上面格式对应的一个时间例如如下：<br>“ Tue May 02 14:43:03 +0800 2017”<br>“ 17年07月12日” 我们可以采用下面这个DateFormat来解析：<br>“ yy年MM月dd日” </p>
<p>回到上面那段通过GsonBuilder创建Gson的代码中：<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Gson</span> gson = <span class="function"><span class="keyword">new</span> <span class="title">GsonBuilder</span>()  </span></div><div class="line">                  <span class="comment">//设置需要解析的时间格式  </span></div><div class="line">		.<span class="title">setDateFormat</span>("<span class="type">EEE</span> <span class="type">MMM</span> dd <span class="type">HH</span>:mm:ss <span class="type">Z</span> yyyy")  </div><div class="line">		.<span class="title">create</span>();</div></pre></td></tr></table></figure></p>
<p>如果我们需要解释的时间格式是”17年07月12日 12:35:11” 那么我们只需要把<br><code>.setDateFormat(&quot;EEE MMM dd HH:mm:ss Z yyyy&quot;)</code><br>替换成<br><code>.setDateFormat(&quot;yy年MM月dd日 HH:mm:ss&quot;)</code><br>即可。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>时间方面的文章介绍到这里就结束了，至于为什么会写一篇这样的基础文章呢？答案是因为笔者和其他人交流的时候发现，对于时间的处理，很多人都只是知其然而不知其所以然，所以笔者就把一些简单的小心得分享给大家。<br>关于优雅地时间处理的问题一直是Java中一个比较大的问题，而这个问题在Java 8之前一直都无法解决，只能通过Joda-Time之类的第三方库来减轻这些问题带来的影响。现在Java 8已经提供了一套全新的关于时间处理的方面的库，但不知道为什么到今天为止Android Studio 2.4暂时还不支持。笔者估计是和Android系统中时间处理方面的兼容性有关（如日期相关控件是通过java.util.Calendar实现的）。<br>如果Android Studio 2.4支持java.time包的话，那么我们可以用java.time包替换Joda-Time库。Joda-Time 库的作者参与了java.time包的API设计，所以java.time包API的使用方式和Joda-Time库是十分类似的。</p>
<blockquote>
<p>参考资料：《Java 8 实战》强烈建议对Java 8有兴趣的朋友看下本书</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/date/date_clock.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;简介：&lt;/em&gt;对于Android和Java开发者来说，时间的处理是我们必须掌握的知识。如果你尝试过造时间处理方面的轮子的话，你就会知道，关于时间的处理是一个非常复杂的问题。我们在处理时间时需要把时间转化成能让计算机理解的形式，而Java 8之前的库对日期和时间的支持是非常不理想的。Java 8种提供了全新的时间API供我们使用，这些API在java.time包下。Android开发者需要注意的是，虽然Android Studio 2.4已经开始支持Java 8了，但是却无法导入java.time包下的类文件，这个问题应该是Android Studio的BUG。因为这个原因，所以笔者在这里介绍的是Java 8之前如何处理好时间和日期相关的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Java,Android" scheme="http://www.tangpj.com/tags/Java-Android/"/>
    
  </entry>
  
  <entry>
    <title>写给Android开发者的Java 8简单入门教程</title>
    <link href="http://www.tangpj.com/2017/04/24/java8-inAndroid/"/>
    <id>http://www.tangpj.com/2017/04/24/java8-inAndroid/</id>
    <published>2017-04-24T07:48:53.000Z</published>
    <updated>2017-05-03T01:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。<br><em>简介：</em>Java 8是在2014年3月发布的，Android工程师为什么要关心Java 8呢？理由是Java 8所做的改变比Java历史上任何一次改变都要深远。Java 8对于程序员的主要好处在于它提供了更多的编程工具和概念，能以更快，更重要的是能以更为简洁、更易于维护的方式解决新的或现有的编程问题。我希望通过这篇文章，能让读者对Java 8产生兴趣，从而使用Java 8进行开发。</p>
</blockquote>
<a id="more"></a>
<h2 id="如何在Android-Studio上应用Java-8？"><a href="#如何在Android-Studio上应用Java-8？" class="headerlink" title="如何在Android Studio上应用Java 8？"></a>如何在Android Studio上应用Java 8？</h2><p>这里首先需要说明下在Android Studio（下文中使用AS代指）上使用Java 8会遇到的坑和问题。<br>一般我们在AS上应用Java 8的方式是通过使用Jack来进行编译，使用方法如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">android</span> &#123;  </div><div class="line">  ...  </div><div class="line">  <span class="selector-tag">defaultConfig</span> &#123;  </div><div class="line">	...  </div><div class="line">	<span class="selector-tag">jackOptions</span> &#123;  </div><div class="line">	  <span class="selector-tag">enabled</span> <span class="selector-tag">true</span>  </div><div class="line">	&#125;  </div><div class="line">  &#125;  </div><div class="line">  <span class="selector-tag">compileOptions</span> &#123;  </div><div class="line">	sourceCompatibility JavaVersion<span class="selector-class">.VERSION_1_8</span>  </div><div class="line">	<span class="selector-tag">targetCompatibility</span> <span class="selector-tag">JavaVersion</span><span class="selector-class">.VERSION_1_8</span>  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们使用Jack的时候会导致我们无法使用AS的Instant Run和DataBinding功能，而且不支持接口的默认方法。这不能成为我们放弃使用Java 8的理由。当我们正准备愉快地使用Java 8时，Google突然在17年3月的某一天宣布放弃Jack，对的，我们的Google又弃坑了。<br>不过放心，Google在AS 2.4版本中提供了对Java 8的官方支持，在AS  2.4中使用Java 8不会产生任何负面的影响。AS 2.4提供了测试版供开发者使用，如果有兴趣的话可以提前体验AS 2.4的新功能，到目前为止笔者已经愉快地使用AS 2.4开发一周多了。AS 2.4的下载地址为：<a href="https://developer.android.com/studio/preview/index.html" target="_blank" rel="external">https://developer.android.com/studio/preview/index.html</a>。<br>在AS 2.4中使用Java 8的方法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">  ...  </div><div class="line">  compileOptions &#123;  </div><div class="line">	sourceCompatibility JavaVersion<span class="selector-class">.VERSION_1_8</span>  </div><div class="line">	targetCompatibility JavaVersion<span class="selector-class">.VERSION_1_8</span>  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="我们为什么要使用Java-8？"><a href="#我们为什么要使用Java-8？" class="headerlink" title="我们为什么要使用Java 8？"></a>我们为什么要使用Java 8？</h2><p>在回答这个问题前，我们现在看一段简单的Java代码。代码的功能是把一堆苹果按照重量进行排序。<br>我们先来看看苹果类代码：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Apple &#123;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> weight;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> color;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对苹果按照重量进行排序：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Collections</span><span class="selector-class">.sort</span>(apples, new Comparator&lt;Apple&gt;() &#123;  </div><div class="line">	<span class="variable">@Override</span>  </div><div class="line">	public int compare(Apple o1, Apple o2) &#123;  </div><div class="line">		return o1<span class="selector-class">.getWeight</span>()<span class="selector-class">.compareTo</span>(o2.getWeight());  </div><div class="line">	&#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在Java 8里，你可以编写更为简洁的代码，这些代码读起来更接近问题的描述：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">apples</span><span class="selector-class">.sort</span>(<span class="selector-tag">Comparator</span><span class="selector-class">.comparing</span>(<span class="selector-tag">Apple</span><span class="selector-pseudo">::getWeight))</span>;</div></pre></td></tr></table></figure></p>
<p>上面这段代码非常简单，它念起来就是“对苹果排序，排序的条件是苹果的重量”。如果你研究过Lambda表达式的话，上面这段代码你就能够快速读懂，如果暂时理解不了的话，也没关系，笔者会慢慢带你深入了解的。</p>
<p>Java 8对硬件的影响：平常我们用的CPU都是多核的，在知乎上我看到过一句话就是：大部分Android App都没有充分利用多核的性能，具体是哪个问题的哪个回答我忘了，这句话十分有道理。因为绝大多数现有Java 程序都只使用其中一个内核，其它的都闲着，或者一小部分的处理能力来运行操作系统和一些系统相关的Service。<br>在Java 8之前，我们必须使用多线程才能使用多个内核。问题是，线程用起来很难，也很容易出错，当线程竞争同一资源时，性能会大打折扣。Java 5添加了工业级的构建模块，如线程池和并发集合。Java 7添加了分支/合并集合框架，使得并行变得更加实用，但使用起来依然很难，并且很容易产生无法预期的错误。而Java 8对并行有了一个更简单的思路，不过在使用的使用仍然需要遵守一些规则，下面笔者会谈到。</p>
<h2 id="Java-8的新特性"><a href="#Java-8的新特性" class="headerlink" title="Java 8的新特性"></a>Java 8的新特性</h2><p>Java从函数式编程中引入的两个核心思想：将方法和Lambda作为一等值，以及在没有可变共享时，函数或方法可以有效、安全地并发执行。<br>下面我们来简单介绍下Java 8的一些重要概念：</p>
<ol>
<li>Stream API</li>
<li>行为参数化</li>
<li>接口中的默认方法</li>
</ol>
<h3 id="流（Stream）："><a href="#流（Stream）：" class="headerlink" title="流（Stream）："></a>流（Stream）：</h3><p>Stream是Java 8提供的新API，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。就现在来看，你可以把把他们看成遍历数据集合的高级迭代器。此外Stream还可以透明地并行处理（parallelStream方法）。<br>Stream API和Java 现有的Collection(集合)API的行为差不多：它们都能够访问数据项目的序列。它们的区别是：Collection主要是为了存储和访问数据，而Stream则主要用于描述对数据的运算。这里的关键点在于，Stream允许并提倡并行处理一个Stream中的元素。 如果需要处理的数据量十分庞大的话，推荐使用并行流来进行处理。<br>流的简短定义是：从支持数据处理操作的源生成的元素序列 。</p>
<ul>
<li>元素序列——就像集合一样，流也提供了一个接口，可以访问特定元素类型的一组有序值。因为集合是数据结构，所以它的主要目的是以特定的时间／空间复杂度存储和访问元素。但流的目的在于表达计算，集合讲的是数据，流讲的是计算。</li>
<li>源——流会使用一个提供数据的源，如集合、数组、输入流／输出资源。从有序集合生成流时会保留原有的顺序。</li>
<li>数据处理操作——流的数据处理功能支持类似于数据库的操纵，以函数式编程语言中的常用操作，如filter、map、reduce、find、match、sort等。流操作可以顺序执行，也可以并行。</li>
<li>流水线——很多流操作本身会返回一个流，许多个操作就可以链接起来，形成一个大的流水线。流水线可以看作对数据源进行数据库式查询。</li>
<li>内部迭代——与使用显式迭代的集合不同，流的迭代操作是在背后进行的。流只能遍历一次，遍历完之后，这个流就已经被消费掉了。可以从数据源中重新获取一个流。 </li>
</ul>
<p>流操作：</p>
<ul>
<li>中间操作：可以连接起来的流操作（返回结果是流）。</li>
<li>终端操作：关闭流的操作称为终端操作（其返回结果不是流）。</li>
</ul>
<h3 id="行为参数化："><a href="#行为参数化：" class="headerlink" title="行为参数化："></a>行为参数化：</h3><p> 行为参数化，就是一个方法接受多个不同的行为作为参数，并在内部使用它们，完成不同行为的能力<br>行为参数化主要有以下这些特点：</p>
<ul>
<li>行为参数化可以让代码更好地适应不断变化的要求，减轻未来的工作量。</li>
<li>传递代码，是将新的行为作为参数传递给方法。但在Java8之前这实现起来很啰嗦。为接口声明许多只用一次的实体类而造成啰嗦的代码，在Java8之前可以用匿名类来减少。</li>
<li>Java API包含很多可以用不同行为参数化的方法，包括排序、线程和GUI处理等。</li>
</ul>
<p>在Java 8中行为参数化主要是通过Lambda表达式和函数式接口来实现的。</p>
<p><em>Lambda概念</em><br>可以把Lambda表达式理解为简洁地表示可传递的匿名函数的一种方式：它没有名称，但它有参数列表、函数主体、返回类型，可能还有可以抛出异常的列表。 </p>
<ul>
<li>匿名——我们说匿名，是因为它不像普通的方法那样有一个明确的名称：写的少而想得多。</li>
<li>函数——Lambda函数不像方法那样属于某个特定的类。但和方法一样，Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。</li>
<li>传递——Lambda表达式可以作为参数传递给方法或存储在变量中。</li>
<li>简洁——无需像匿名类那样写很多模版代码。</li>
</ul>
<p><em>注：</em>函数式接口是指只带有一个抽象方法的接口（这里说成抽象方法主要是为了区分默认方法）。Java 8中提供了一系列通用的函数式接口供我们使用，通过使用这些系统提供的函数式接口可以避免重复定义类似接口。如：在Android中的OnClickListener接口可以使用Java 8中的Supplier\<t\>接口代替。</t\></p>
<h3 id="接口中的默认方法"><a href="#接口中的默认方法" class="headerlink" title="接口中的默认方法"></a>接口中的默认方法</h3><p>在Java 8之前，接口中的方法是不能带有方法实现对的，这就意味着，一旦当我们的接口发布出去后，就不能轻易更改接口。因为更改接口会导致所有实现了该接口的类都需要更改，这会带来无法估量的问题。Java 8提供了默认方法这一特性，我们可以对方法添加默认的实现，这样一来，实现类就不必实现／覆盖这一方法。我们可以通过前面对苹果排序的代码来加深理解。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Collections</span><span class="selector-class">.sort</span>(apples, new Comparator&lt;Apple&gt;() &#123;  </div><div class="line">	<span class="variable">@Override</span>  </div><div class="line">	public int compare(Apple o1, Apple o2) &#123;  </div><div class="line">		return o1<span class="selector-class">.getWeight</span>()<span class="selector-class">.compareTo</span>(o2.getWeight());  </div><div class="line">	&#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><em>在Java 8里</em><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">apples</span><span class="selector-class">.sort</span>(<span class="selector-tag">Comparator</span><span class="selector-class">.comparing</span>(<span class="selector-tag">Apple</span><span class="selector-pseudo">::getWeight))</span>;</div></pre></td></tr></table></figure></p>
<p>我们通过对比得知，在Java 8之前，我们需要通过Collections类sort方法来对列表进行排序。这不符合我们的理解，因为按照人类的理解，对列表进行排序的话，应该是属于列表的方法，而不是通过引入第二个类来实现。但是在Java 8之前，由于在接口中增加方法会导致所有的实现类都报错，所以为了保证兼容性，引入了Collections来实现对列表的操作。<br>而在Java 8中，List接口中提供了默认方法sort，这个方法的实际效果和Collections.sort是一样的。我们可以来看看List接口中的sort方法的具体实现：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="keyword">sort</span>(Comparator&lt;? <span class="keyword">super</span> E&gt; c) &#123;  </div><div class="line">	Collections.<span class="keyword">sort</span>(<span class="keyword">this</span>, c);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法最终也是通过Collections.sort方法来实现排序的。通过这个方法，我们加深对默认方法的理解。<br>这里笔者要提醒大家的是：默认方法并不是我们的灵丹妙药，不能滥用默认方法。当我们发布一个公开的接口时，正确的做法是，做好充分的设计与验证才能进行发布。</p>
<h2 id="Java-8的简单使用"><a href="#Java-8的简单使用" class="headerlink" title="Java 8的简单使用"></a>Java 8的简单使用</h2><p>我们通过一个简单的例子来介绍Java 8在Android上的应用。<br>定义一个菜肴列表，我们通过Stream对这个列表进行一些处理。<br>菜肴类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;  </div><div class="line">  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MEAT = <span class="string">"MEAT"</span>;  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OTHER = <span class="string">"OTHER"</span>;  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FISH = <span class="string">"FISH"</span>;  </div><div class="line">  </div><div class="line">	<span class="meta">@StringDef</span>(&#123;MEAT,OTHER,FISH&#125;)  </div><div class="line">	<span class="meta">@Retention</span>(RetentionPolicy.SOURCE)  </div><div class="line">	<span class="keyword">public</span> <span class="meta">@interface</span> Type&#123;&#125;  </div><div class="line">  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String name;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> vegetarian;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;  </div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="meta">@Type</span> String type;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dish</span><span class="params">(String name,<span class="keyword">boolean</span> vegetarian,<span class="keyword">int</span> calories,@Type String type)</span></span>&#123;  </div><div class="line">		<span class="keyword">this</span>.name = name;  </div><div class="line">		<span class="keyword">this</span>.vegetarian = vegetarian;  </div><div class="line">		<span class="keyword">this</span>.calories = calories;  </div><div class="line">		<span class="keyword">this</span>.type = type;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;  </div><div class="line">		<span class="keyword">return</span> name;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span></span>&#123;  </div><div class="line">		<span class="keyword">return</span> vegetarian;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCalories</span><span class="params">()</span></span>&#123;  </div><div class="line">		<span class="keyword">return</span> calories;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="keyword">public</span> <span class="meta">@Type</span> <span class="function">String <span class="title">getType</span><span class="params">()</span></span>&#123;  </div><div class="line">		<span class="keyword">return</span> type;  </div><div class="line">	&#125;  </div><div class="line">  </div><div class="line">	<span class="meta">@Override</span>  </div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">		<span class="keyword">return</span> name;  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>菜肴菜单：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;Dish&gt; menu = Arrays.asList(  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"pork"</span>,<span class="keyword">false</span>,<span class="number">800</span>,Dish.MEAT),  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"beef"</span>,<span class="keyword">false</span>,<span class="number">700</span>,Dish.MEAT),  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"chicken"</span>,<span class="keyword">false</span>,<span class="number">400</span>,Dish.MEAT),  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"french fries"</span>,<span class="keyword">true</span>,<span class="number">530</span>,Dish.OTHER),  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"rice"</span>,<span class="keyword">true</span>,<span class="number">350</span>,Dish.OTHER),  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"season fruit"</span>,<span class="keyword">true</span>,<span class="number">120</span>,Dish.OTHER),  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"pizza"</span>,<span class="keyword">true</span>,<span class="number">550</span>,Dish.OTHER),  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"prawns"</span>,<span class="keyword">false</span>,<span class="number">300</span>,Dish.FISH),  </div><div class="line">		<span class="keyword">new</span> Dish(<span class="string">"salmon"</span>,<span class="keyword">false</span>,<span class="number">450</span>,Dish.FISH));</div></pre></td></tr></table></figure></p>
<p>现在我们需要实现一个功能：把卡路里大于300的菜肴筛选出来，并打印出菜肴名字。我们来看看普通实现和用Java 8实现的区别：<br>普通实现：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">private</span> <span class="selector-tag">void</span> <span class="selector-tag">greaterThan300</span>()&#123;  </div><div class="line">	<span class="selector-tag">for</span> (Dish <span class="attribute">dish </span>: menu)&#123;  </div><div class="line">		<span class="selector-tag">if</span> (dish.getCalories() &gt; <span class="number">300</span>)&#123;  </div><div class="line">			Log<span class="selector-class">.d</span>(TAG, <span class="string">"greaterThan300: "</span> + dish.getName());  </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Java 8实现：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">private</span> <span class="selector-tag">void</span> <span class="selector-tag">greaterThan300Java8</span>()&#123;  </div><div class="line">	menu<span class="selector-class">.stream</span>()  </div><div class="line">			<span class="selector-class">.filter</span>(dish -&gt; dish.getCalories() &gt; <span class="number">300</span>)  </div><div class="line">			<span class="selector-class">.forEach</span>(name -&gt;Log.d(TAG, <span class="string">"greaterThan300: "</span> + name));  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面的对比可以看到，使用Java 8编写的代码更直观，更符合逻辑思维，并且把循环和if去掉了。一旦习惯了Java 8的写法后，下面的代码我们一眼就能看出它的具体功能是什么，而上面的还需要花一点时间来理解。可能读者会觉得区别也不大，代码并没有少多少。那么我们再增加一个条件呢？例如把卡路里大于300的鱼类筛选出来，并打印出名字。</p>
<p>我们看看Java 8实现这个功能的代码<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void greaterThan300Java8()&#123;  </div><div class="line">	menu.stream()  </div><div class="line">			.<span class="function"><span class="title">filter</span>(dish -&gt;</span> dish.getCalories() &gt; <span class="number">300</span>)  </div><div class="line">			.<span class="function"><span class="title">filter</span>(dish -&gt;</span> dish.getType() == Dish.FISH)  </div><div class="line">			.<span class="function"><span class="title">forEach</span>(<span class="keyword">name</span> -&gt;</span>Log.d(TAG, <span class="string">"greaterThan300Java8: "</span> + <span class="keyword">name</span>));  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们运行这段代码会打印出：greaterThan300Java8: salmon</p>
<p>如果我们需要获得卡路里小于300的菜肴的名字列表，利用Java 8我们要如何做呢？<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; menuNames = menu.stream()  </div><div class="line">		.filter(dish -&gt; dish.getCalories() &gt; <span class="number">300</span>)  </div><div class="line">		.<span class="built_in">map</span>(Dish<span class="type">::getName</span>)  </div><div class="line">		.collect(Collectors.toList());</div></pre></td></tr></table></figure></p>
<p>是不是非常简单？如果我们不用Java 8实现的话，就只能够使用嵌套if else的形式来实现了,这种实现方式会大大降低我们的代码可读性，并且比较容易出错。而使用Java 8由于我们没有保存任何中间变量，所以出错的可能性会更低。</p>
<p>在上面的代码中，filter和map操作符属于中间操作符，中间操作符是指对流进行操作后返回的对象是一个流；而forEach和collect是终端操作符，终端操作符是指返回对象不是流的操作。它们的共同点是接受的对象都是一个Lambda表达式（行为参数化）。Java 8提供了多个流操作符来供我们使用。</p>
<h2 id="Java-8常用的函数式接口"><a href="#Java-8常用的函数式接口" class="headerlink" title="Java 8常用的函数式接口"></a>Java 8常用的函数式接口</h2><p>函数式接口就是指只含有一个抽象方法的接口，而抽象方法的签名我们一般称为函数描述符。一般被设计为函数式接口的接口会用@FunctionalInterface标注标记，当然这不是强制实现的，但是通常使用这一标注是比较好的做法。<br><em>较为常用的函数式接口：</em></p>
<p><em>Predicate</em><br>Predicate<t>接口定义了一个名叫test的抽象方法，它接受泛型T对象，并返回一个boolean，在需要表示一个设计类型T的布尔表达式时，就可以使用这个接口。 </t></p>
<p><em>Consumer</em><br>Consumer<t>定义了一个名叫accept的抽象方法，它接受泛型T对象，没有返回（void）。你如果需要访问类型T的对象，并对其执行某些操作，就可以使用这个接口。 </t></p>
<p><em>Function</em><br>Function<t,r>接口定义了一个叫作apply的方法，它接受一个泛型T对象，并返回一个泛型R对象。如果你需要定义一个Lambda，将输入对象的信息映射到输出，就可以使用这个接口。 </t,r></p>
<p>题外话：熟悉RxJava 2.0的同学应该不难看出，这些函数式接口的定义和RxJava 2.0中的十分类似，笔者推断RxJava 2.0中的一些标准应该是遵循Java 8标准的。</p>
<p>笔者整理了一个Java 8中的函数式接口表格供大家参考：<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/Java%208/stream_functionalInterface.png" alt=""><br>这里需要注意的一点是，原始类型特化。我们知道，普通类型如：int，double等是无法使用泛型的。所以我们需要用它们的装箱类来使用泛型，如Integer，Double。装箱使用泛型会带来一个问题就是运行效率的问题，装箱类的自动装箱和拆箱会大大影响程序的运行效率。所以在Java 8中提供了一系列特化类型的类和接口等，以消除自动装箱盒拆箱带来的的影响。</p>
<h2 id="Java-8中常用的流操作符"><a href="#Java-8中常用的流操作符" class="headerlink" title="Java 8中常用的流操作符"></a>Java 8中常用的流操作符</h2><p>上面的例子中，我们简单的介绍过流的操作符。在这里笔者整理了一个关于流的操作符的表格，方便读者使用的时候用来参考。<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/Java%208/stream_operating.png" alt=""></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>从这篇文章可以得出一个结论：Java 8除了使我们编程变得更加简单外，还大大加强了代码的可读性。而对作为开发者的我们来说，使用Java 8能够简化代码的同时让我们专注于逻辑而不必写一堆模版代码。<br>这篇文章只是Java 8的简单的介绍文章，实际上Java 8提供的功能更加强大，有兴趣的读者可以继续深入了解下。大家也可以关注我的博客，我会不时发表一些关于Java 8文章的。</p>
<blockquote>
<p>参考资料：《Java 8 实战》强烈建议对Java 8有兴趣的朋友看下本书</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;br&gt;&lt;em&gt;简介：&lt;/em&gt;Java 8是在2014年3月发布的，Android工程师为什么要关心Java 8呢？理由是Java 8所做的改变比Java历史上任何一次改变都要深远。Java 8对于程序员的主要好处在于它提供了更多的编程工具和概念，能以更快，更重要的是能以更为简洁、更易于维护的方式解决新的或现有的编程问题。我希望通过这篇文章，能让读者对Java 8产生兴趣，从而使用Java 8进行开发。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Java 8" scheme="http://www.tangpj.com/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>你需要的一个RecyclerView工具类</title>
    <link href="http://www.tangpj.com/2017/02/17/recyclerviewutils/"/>
    <id>http://www.tangpj.com/2017/02/17/recyclerviewutils/</id>
    <published>2017-02-17T12:28:14.000Z</published>
    <updated>2017-02-17T12:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。<br><em>摘要：</em>在使用RecyclerView的过程中，笔者发现RecyclerView其实有更多的可能性，在github上也有很多关于RecyclerView的优秀项目。这是笔者发起的一个开源的项目，目前这个项目相对比较简单，对于这个开源库，笔者的期待是能够逐渐添加一些更有趣更高效的使用方式。如果有读者对这个项目有兴趣的话，可以和笔者一起参与到这个库的开发和维护工作之中。参与的方式不限，读者可以提交自己的优秀代码、通知笔者一些有趣的功能（我会根据实际来实现）、完善项目的README文件都是可以的。</p>
</blockquote>
<a id="more"></a>
<h1 id="抛砖引玉"><a href="#抛砖引玉" class="headerlink" title="抛砖引玉"></a>抛砖引玉</h1><p>目前这个库能支持的功能有：封装好的Adapter、支持二级列表功能的Adapter、完善的分割线类（你确定你不是来钓鱼的？）。项目地址是：<a href="https://github.com/DobbyTang/RecyclerUtil" target="_blank" rel="external">https://github.com/DobbyTang/RecyclerUtil</a></p>
<h1 id="SimpleAdapter"><a href="#SimpleAdapter" class="headerlink" title="SimpleAdapter"></a>SimpleAdapter</h1><p>SimpleAdapter的作用是快速实现Adapter的开发，其中支持的功能是</p>
<ol>
<li>快速添加顶部和底部，并且可以根据需要监听底部和顶部的事件</li>
<li>维护列表数据</li>
<li>实现点击事件</li>
<li>简化开发的步骤<br>其中SimpleAdapter的顶部和底部是依赖于RecyclerView的生命周期的，避免了内存溢出和在Fragment中的部分场景使用会导致崩溃的问题。</li>
</ol>
<h1 id="SecondaryAdapter"><a href="#SecondaryAdapter" class="headerlink" title="SecondaryAdapter"></a>SecondaryAdapter</h1><p>SecondaryAdapter的作用是实现一个支持二级列表功能的Adapter。可以用于一些特殊的场景中（购物车，二级分类列表等）。</p>
<h1 id="SimpleDecoration"><a href="#SimpleDecoration" class="headerlink" title="SimpleDecoration"></a>SimpleDecoration</h1><p>的是分割线类，它的作用的快速添加分割线并且支持多种效果。</p>
<ol>
<li>线段分割线</li>
<li>透明分割线</li>
<li>自定义图片分割线</li>
<li>自定义分割线的宽度</li>
</ol>
<p>笔者在参考一些网上的分割线代码的时候，发现当分割线的宽度过大的时候会出现一个问题：在使用表格类型的布局的时候，由于分割线会占用一定的空间，会影响第一个或最后一个item的大小。文字大家可能比较难以理解，可以看看下面的图解：<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/recyclerUtils/recycler_view_decoration.png" alt=""><br>从上图可以看出问题所在。<br>分割线的绘制原理是通过重新计算Item所占的空间计算出分割线所占的位置，然后在这些位置上绘制线段实现的。上图的纵向分割线笔者是通过在普通Item的右边计算分割线的位置后绘制的，计算出item处于最后一列时则不绘制右边的分割线。所以当item的列数为n的时候，纵向需要绘制的分割线为n - 1。<br>当分割线的宽度不大时这样做时没有问题的，但是当分割线的宽度比较大时，我们会发现由于在最后一列的位置上没有绘制分割线，所以最后一列item的width值实际上是比其它的item要大的，这就造成了item的宽度不一致的问题。<br>SimpleDecoration解决了上述的问题，并且拓展了分割线的功能，我们可以看看SimpleDecoration的实际效果。<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/recyclerUtils/recycler_view_lines.png" alt=""><br>上图中分割线的宽度时32dp，可以明显看出各个item的大小都是一样的。但是需要注意的是，因为我们纵向分割线的位置和大小都是重新计算过的，所以纵向分割线的宽度会比32dp大一点。</p>
<h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p>由于时间关系，笔者写了个简单的demo供大家参考，如果大家有兴趣的话可以去笔者的github中下载该项目。<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/recyclerUtils/recycler_view_adapter_1.gif" alt="SimpleAdapter" title="SimpleAdapter"><br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/recyclerUtils/recycler_view_adapter_2.gif" alt="SecondaryAdapter" title="SecondaryAdapter"></p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h2><p>首先在工程目录下的build.gradle文件中的allprojects-> repositories下添加<code>maven { url &#39;https://jitpack.io&#39; }</code>如下所示</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;  </div><div class="line">    repositories &#123;  </div><div class="line">        ...  </div><div class="line">        maven &#123; url <span class="string">'https://jitpack.io'</span> &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在需要使用这个库的module目录下的build.gradle文件中添加依赖。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;  </div><div class="line">        <span class="keyword">compile</span> <span class="string">'com.github.DobbyTang:RecyclerUtil:1.0.3'</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="SimpleAdapter使用"><a href="#SimpleAdapter使用" class="headerlink" title="SimpleAdapter使用"></a>SimpleAdapter使用</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestSimpleAdapter</span> <span class="keyword">extends</span> <span class="title">SimpleAdapter&lt;UserBean&gt;</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    public <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span> onCreateNormalView(<span class="type">ViewGroup</span> parent) &#123;  </div><div class="line">        <span class="type">View</span> view = <span class="type">LayoutInflater</span>.from(parent.getContext()).inflate(<span class="type">R</span>.layout.itemuser,parent,<span class="literal">false</span>);  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">UserHolder</span>(view);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    public void onBindNormalView(<span class="type">RecyclerView</span>.<span class="type">ViewHolder</span> normalHolder, int position, <span class="type">UserBean</span> value) &#123;  </div><div class="line">        ((<span class="type">UserHolder</span>) normalHolder).name.setText(value.name);  </div><div class="line">        ((<span class="type">UserHolder</span>) normalHolder).age.setText(value.age + <span class="string">""</span>);  </div><div class="line">        ((<span class="type">UserHolder</span>) normalHolder).sex.setText(value.sex);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;  </div><div class="line">  </div><div class="line">        <span class="type">TextView</span> name;  </div><div class="line">        <span class="type">TextView</span> age;  </div><div class="line">        <span class="type">TextView</span> sex;  </div><div class="line">  </div><div class="line">        public <span class="type">UserHolder</span>(<span class="type">View</span> itemView) &#123;  </div><div class="line">            <span class="keyword">super</span>(itemView);  </div><div class="line">            name = (<span class="type">TextView</span>) itemView.findViewById(<span class="type">R</span>.id.itemusername);  </div><div class="line">            age = (<span class="type">TextView</span>) itemView.findViewById(<span class="type">R</span>.id.itemuserage);  </div><div class="line">            sex = (<span class="type">TextView</span>) itemView.findViewById(<span class="type">R</span>.id.itemusersex);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，SimpleAdapter的使用方法和普通的RecyclerView.Adapter的使用方法是差不多的，但是SimpleAdapter简洁很多。 我们只定义一个ViewHolder，然后覆盖onCreateNormalView()和onBindNormalView()方法就可以完成一个简单的Adapter了。如果你想添加Header和footer的话也很简单，只需要覆盖<code>setHeaderView()</code>和<code>setFooterView()</code>方法就可以了。如果需要对header和footer进行监听或数据绑定，只需要分别覆盖<code>onBindHeaderView()</code>和<code>onBindFooterView()</code>即可。<br>完整代码如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Override</span>  </div><div class="line">public int setHeaderView() &#123;  </div><div class="line">    return R<span class="selector-class">.layout</span><span class="selector-class">.header_user</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="variable">@Override</span>  </div><div class="line">public int setFooterView() &#123;  </div><div class="line">    return R<span class="selector-class">.layout</span><span class="selector-class">.footer_user</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="variable">@Override</span>  </div><div class="line">public void onBindHeaderView(View header) &#123;  </div><div class="line">    <span class="selector-tag">header</span><span class="selector-class">.findViewById</span>(R.id.header_button)  </div><div class="line">            <span class="selector-class">.setOnClickListener</span>(new View.OnClickListener() &#123;  </div><div class="line">                <span class="variable">@Override</span>  </div><div class="line">                public void onClick(View v) &#123;  </div><div class="line">                    Snackbar<span class="selector-class">.make</span>(v,<span class="string">"点击Header上的Button"</span>,Snackbar.LENGTH_SHORT)<span class="selector-class">.show</span>();  </div><div class="line">                &#125;  </div><div class="line">    &#125;);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">@<span class="selector-tag">Override</span>  </div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">onBindFooterView</span>(View footer) &#123;  </div><div class="line">    <span class="selector-tag">footer</span><span class="selector-class">.findViewById</span>(R.id.footer_button)  </div><div class="line">            <span class="selector-class">.setOnClickListener</span>(new View.OnClickListener() &#123;  </div><div class="line">                <span class="variable">@Override</span>  </div><div class="line">                public void onClick(View v) &#123;  </div><div class="line">                    Snackbar<span class="selector-class">.make</span>(v,<span class="string">"点击Footer上的Button"</span>,Snackbar.LENGTH_SHORT)<span class="selector-class">.show</span>();  </div><div class="line">                &#125;  </div><div class="line">            &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成Adapter后的使用方法和普通的Apapter一样。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">adapter</span> = new TestSimpleAdapter()<span class="comment">;  </span></div><div class="line">list.setLayoutManager(new LinearLayoutManager(getActivity()))<span class="comment">;  </span></div><div class="line">list.setAdapter(adapter)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>当我们需要设置Adapter的数据时，只需要调用<code>SimpleAdapter</code>的<code>setData()</code>方法即可，更多的使用方法请查看源码注释。</p>
<h2 id="SecondaryAdapter-使用"><a href="#SecondaryAdapter-使用" class="headerlink" title="SecondaryAdapter 使用"></a>SecondaryAdapter 使用</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line">public <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span> onCreateGroupHolder(<span class="type">ViewGroup</span> parent) &#123;  </div><div class="line">    <span class="type">View</span> view = <span class="type">LayoutInflater</span>.from(parent.getContext())  </div><div class="line">            .inflate(<span class="type">R</span>.layout.friendgroupitem,parent,<span class="literal">false</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">TitleHolder</span>(view);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line">public <span class="type">RecyclerView</span>.<span class="type">ViewHolder</span> onCreateChildHolder(<span class="type">ViewGroup</span> parent) &#123;  </div><div class="line">    <span class="type">View</span> view = <span class="type">LayoutInflater</span>.from(parent.getContext())  </div><div class="line">            .inflate(<span class="type">R</span>.layout.friendsubitem,parent,<span class="literal">false</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">FriendHolder</span>(view);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line">public void onBindGroupHolder(<span class="type">RecyclerView</span>.<span class="type">ViewHolder</span> holder, <span class="type">FriendGroupBean</span> friendGroupBean) &#123;  </div><div class="line">    ((<span class="type">TitleHolder</span>)holder).groupName.setText(friendGroupBean.title);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line">public void onBindChildHolder(<span class="type">RecyclerView</span>.<span class="type">ViewHolder</span> holder, <span class="type">UserBean</span> userBean) &#123;  </div><div class="line">    ((<span class="type">FriendHolder</span>) holder).name.setText(userBean.name);  </div><div class="line">    ((<span class="type">FriendHolder</span>) holder).age.setText(userBean.age + <span class="string">""</span>);  </div><div class="line">    ((<span class="type">FriendHolder</span>) holder).sex.setText(userBean.sex);  </div><div class="line">    <span class="keyword">if</span> (userBean.imgId != <span class="number">0</span>)&#123;  </div><div class="line">        ((<span class="type">FriendHolder</span>) holder).avatar.setImageResource(userBean.imgId);  </div><div class="line">    &#125;<span class="keyword">else</span> &#123;  </div><div class="line">        ((<span class="type">FriendHolder</span>) holder).avatar.setImageResource(<span class="type">R</span>.mipmap.iclauncher);  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">TitleHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="type">TextView</span> groupName;  </div><div class="line">  </div><div class="line">    public <span class="type">TitleHolder</span>(<span class="type">View</span> itemView) &#123;  </div><div class="line">        <span class="keyword">super</span>(itemView);  </div><div class="line">        groupName = (<span class="type">TextView</span>) itemView.findViewById(<span class="type">R</span>.id.title);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="type">ImageView</span> avatar;  </div><div class="line">    <span class="keyword">private</span> <span class="type">TextView</span> name;  </div><div class="line">    <span class="keyword">private</span> <span class="type">TextView</span> age;  </div><div class="line">    <span class="keyword">private</span> <span class="type">TextView</span> sex;  </div><div class="line">  </div><div class="line">    public <span class="type">FriendHolder</span>(<span class="type">View</span> itemView) &#123;  </div><div class="line">        <span class="keyword">super</span>(itemView);  </div><div class="line">        avatar = (<span class="type">ImageView</span>) itemView.findViewById(<span class="type">R</span>.id.friendsubavatar);  </div><div class="line">        name = (<span class="type">TextView</span>) itemView.findViewById(<span class="type">R</span>.id.friendsubname);  </div><div class="line">        age = (<span class="type">TextView</span>) itemView.findViewById(<span class="type">R</span>.id.friendsubage);  </div><div class="line">        sex = (<span class="type">TextView</span>) itemView.findViewById(<span class="type">R</span>.id.friendsubsex);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SecondaryAdapter的使用方法也十分简单，和普通的Adapter的区别是需要分别编写两个ViewHolder和分别创建布局即可，使用方法也和普通的Adapter一致。其中需要注意的是设置数据的方法。</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;FriendGroupBean&gt; <span class="built_in">data</span>;  </div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;UserBean&gt;&gt; userList = <span class="literal">new</span> ArrayList&lt;&gt;();  </div><div class="line">adapter.setData(<span class="built_in">data</span>,userList);</div></pre></td></tr></table></figure>
<p>其中setData()的第一个参数是List\<friendgroupbean\>，第二个参数是List\<list\<userbean\>>，第二个参数是一个二维列表，这点需要大家注意。更详细的使用方法读者可以查看源码注释哦。</list\<userbean\></friendgroupbean\></p>
<h2 id="SimpleDecoration-使用"><a href="#SimpleDecoration-使用" class="headerlink" title="SimpleDecoration 使用"></a>SimpleDecoration 使用</h2><p>SimpleDecoration提供了多个工厂方法，分别是：</p>
<ol>
<li>newTransparentDivider(Context context),创建默认透明分割线，默认宽度为16dp</li>
<li>newTransparentDivider(Context context, int interva)，创建指定宽度的透明分割线</li>
<li>newLinesDivider(Context context)，创建普通的分割线，默认宽度为1dp</li>
<li>newLinesDivider(Context context, int interval)，创建指定宽度的普通分割线</li>
<li>newDrawableDivider(Context context, int interval , @DrawableRes int drawableId)，创建指定图片和指定宽度的分割线。</li>
<li>newDrawableDivider(Context context, int interval, Drawable drawable)同上</li>
</ol>
<p>通过工厂方法创建出需要的分割线对象后，调用RecyclerView的addItemDecoration()添加到RecyclerView中即可。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这就是目前的RecyclerViewUtil工具类中提供的主要功能，功能虽然不多，但是这些都是我们在日常开发中经常遇到的问题。在后续维护中，笔者会进一步提供封装好的RecyclerView相关的Fragment,Activity等。我也希望读者在使用的过程中有什么有趣的想法和建议的话，可以联系本人进行开发，笔者会斟酌开发的。当然，通过github发起pull requests共同完善这个项目也是极好的。</p>
<p><a href="http://tangpj.com/2016/12/04/mvvm-structure-introduction/" target="_blank" rel="external">MVVM在Android上的正确使用方式</a><br><a href="http://tangpj.com/2016/09/23/mvp-structure-one/" target="_blank" rel="external">Android架构篇－－从零开始搭建 一个完善的 MVP模式开发框架（一），MVP模式的简单介绍篇</a><br><a href="http://tangpj.com/2016/09/11/searchview/" target="_blank" rel="external">Android SearchView的高级用法，解决关于SearchView的样式与控制问题</a><br><a href="http://tangpj.com/2016/08/12/fresco_zoomable/" target="_blank" rel="external">使用fresco实现Android图片手势缩放功能</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;br&gt;&lt;em&gt;摘要：&lt;/em&gt;在使用RecyclerView的过程中，笔者发现RecyclerView其实有更多的可能性，在github上也有很多关于RecyclerView的优秀项目。这是笔者发起的一个开源的项目，目前这个项目相对比较简单，对于这个开源库，笔者的期待是能够逐渐添加一些更有趣更高效的使用方式。如果有读者对这个项目有兴趣的话，可以和笔者一起参与到这个库的开发和维护工作之中。参与的方式不限，读者可以提交自己的优秀代码、通知笔者一些有趣的功能（我会根据实际来实现）、完善项目的README文件都是可以的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="AndroidUI技术" scheme="http://www.tangpj.com/categories/AndroidUI%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android UI" scheme="http://www.tangpj.com/tags/Android-UI/"/>
    
  </entry>
  
  <entry>
    <title>MVVM在Android上的正确使用方式</title>
    <link href="http://www.tangpj.com/2016/12/04/mvvm-structure-introduction/"/>
    <id>http://www.tangpj.com/2016/12/04/mvvm-structure-introduction/</id>
    <published>2016-12-04T14:10:41.000Z</published>
    <updated>2016-12-04T14:26:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>摘要：</em>Google发布DataBinding已经有一年时间了，网上也有很多教程。但是在笔者看过的大部分关于MVVM在Android上的实现的教程中，都存在一个十分之严重的问题，就是大部分的介绍MVVM的文章只不过是介绍DataBinding的文章。而在这些教程中，几乎都无一例外地把DataBinding生成的Binding类(或实体类当成是ViewModel层。这两种方法都有一个十分之大的漏洞，就是作为ViewModel层，几乎没有任何控制力。在这里，笔者介绍一个笔者总结出来的如何结合DataBinding在Android实现MVVM模式。</p>
<a id="more"></a>
<h1 id="什么是MVVM模式？"><a href="#什么是MVVM模式？" class="headerlink" title="什么是MVVM模式？"></a>什么是MVVM模式？</h1><p> MVVM模式是指<em>Model-View-ViewModel</em>。相信看过笔者关于MVP的文章的读者也会发现，无论如何抽象化，在我们的View层中是无法避免的要处理一部分逻辑的。而MVVM模式中的View是将View的状态和行为完全抽象化，把逻辑与界面的控制完全交给ViewModel处理。<br>MVVM由下面三个核心组件组成：</p>
<ul>
<li><em>Model:</em> 用于获取业务数据模型</li>
<li><em>View:</em> 定义了界面中的布局和外观</li>
<li><em>ViewModel: </em> 逻辑控制层，负责处理数据和处理View层中的业务逻辑</li>
</ul>
<p>下面是笔者采用的MVVM模型：</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvvm/mvvm_img.png" alt="MVVM模型"></p>
<p>可以看出，这个MVVM的模型图和网上介绍MVVM是有所不同的，下面会根据这个模型图来介绍MVVM在Android。</p>
<h1 id="DataBinding简介"><a href="#DataBinding简介" class="headerlink" title="DataBinding简介"></a>DataBinding简介</h1><blockquote>
<p>如果了解DataBinding的读者可以直接跳过本小节</p>
</blockquote>
<h2 id="什么是DataBinding"><a href="#什么是DataBinding" class="headerlink" title="什么是DataBinding"></a>什么是DataBinding</h2><p>DataBinding是Google官方推出的数据绑定器，这个绑定器的作用是把数据和View绑定起来，然后数据改变的时候View会自动刷新，这个DataBinding就是我们实现MVVM模式的关键。</p>
<h2 id="引入DataBinding"><a href="#引入DataBinding" class="headerlink" title="引入DataBinding"></a>引入DataBinding</h2><p>引入DataBinding的方式很简单，我们只需要在Module的build.gradle添加如下代码即可。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android&#123;  </div><div class="line"><span class="params">...</span>.  </div><div class="line">    dataBinding&#123;  </div><div class="line">        enabled <span class="literal">true</span>  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用DataBinding"><a href="#使用DataBinding" class="headerlink" title="使用DataBinding"></a>使用DataBinding</h2><blockquote>
<p><em>注: </em>在这里笔者只是介绍DataBinding的其中一个使用方法，更加详细的教程读者可以上网搜索，因为这篇的重点不是DataBinding。</p>
</blockquote>
<p>使用DataBinding的布局文件和普通的布局文件有点不同，DataBinding布局文件的根标签是layout标签，layout里面有一个data元素和View元素，这个View元素就是我们没使用DataBinding时候的布局文件。下面看看例子代码:</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span>  </span></div><div class="line">            <span class="attr">name</span>=<span class="string">"user"</span>  </div><div class="line">            <span class="attr">type</span>=<span class="string">"com.example.mvvmdemo.UserBean"</span>/&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;user.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@</span><span class="template-variable">&#123;user.sex&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>data元素里面的user就是我们自定义的user实体类，当我们向DataBinding中设置好user类以后，我们的两个Text会自动设置text的值。</p>
<p>UserBean实体类代码:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserBean</span> &#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> ObservableField&lt;String&gt; name = <span class="keyword">new</span> ObservableField&lt;&gt;();  </div><div class="line">    <span class="keyword">public</span> ObservableField&lt;String&gt; sex = <span class="keyword">new</span> ObservableField&lt;&gt;();  </div><div class="line">    <span class="keyword">public</span> ObservableField&lt;Integer&gt; age = <span class="keyword">new</span> ObservableField&lt;&gt;() ;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBean</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">        name.<span class="keyword">set</span>(<span class="string">"张三"</span>);  </div><div class="line">        sex.<span class="keyword">set</span>(<span class="string">"男"</span>);  </div><div class="line">        age.<span class="keyword">set</span>(<span class="number">19</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个实体类有点特别，里面的元素是DataBinding中的ObservableField类，ObservableField的作用是，当我们实体类中的值发生改变时会自动通知View刷新。所以使用DataBinding的时候，我建议使用ObservableField来定义我们的实体类。</p>
<p>之后，我们只需要在Activity中绑定layout就可以了。下面是使用代码：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ActivityTesBinding activityTesBinding = DataBindingUtil.<span class="built_in">set</span>ContentView(this,R.layout.activity_tes);  </div><div class="line">UserBean <span class="keyword">user</span> = new UserBean();  </div><div class="line">activityTesBinding.<span class="built_in">set</span>User(<span class="keyword">user</span>);</div></pre></td></tr></table></figure></p>
<p>在使用DataBinding的时候，我们设置布局使用DataBindingUtil工具类中的setContentView()方法，这普通的设置方法有点不一样，大家需要注意。按照我们的理论，我们设置好了user后，我们layout中的TextView显示为“张三”和“男”。在这里我就不作演示了，大家去尝试下，很简单的。</p>
<p>好了，这就是关于DataBinding的简单介绍了，读者如果想知道更加详细的使用方法需要自行搜索。DataBinding还有更多更有趣的功能的，希望大家看完这篇文章后去实践下。</p>
<h1 id="大部分MVVM教程的局限性"><a href="#大部分MVVM教程的局限性" class="headerlink" title="大部分MVVM教程的局限性"></a>大部分MVVM教程的局限性</h1><p>在笔者看过的大部分关于MVVM在Android上的实现的教程中，都存在一个十分之严重的问题，就是大部分的介绍MVVM的文章只不过是介绍DataBinding的文章。而在这些教程中，几乎都无一例外地把DataBinding生成的Binding类(上一小节中 ActivityTesBinding)或实体类（UserBean）当成是ViewModel层。</p>
<p>这两种方法都有一个十分之大的漏洞，就是作为ViewModel层，几乎没有任何控制力。如果要添加其他的拓展功能的话，几乎都需要在Activity、Fragment等View层中实现。这样的做法不但无法实现代码解耦，而且如果一个页面处理的功能过多的话，代码的可读性会非常差。</p>
<p>那么我们如何在Android上正确使用MVVM模式呢？请看下一章</p>
<h1 id="如何在Android上正确使用MVVM模式"><a href="#如何在Android上正确使用MVVM模式" class="headerlink" title="如何在Android上正确使用MVVM模式"></a>如何在Android上正确使用MVVM模式</h1><p>在MVVM模式中，DataBinding应该是作为一个绑定器用于绑定实体类与View层，而我们的业务逻辑和View的控制应该抽象我们的ViewModel层中。其实方法很简单，我们只需要简单地把我们的Binding类传递到我们的ViewModel层中就可以实现通过ViewModel层对View层的控制了。下面我们来看看优化后的layout代码。</p>
<h2 id="activity-main-xml"><a href="#activity-main-xml" class="headerlink" title="activity_main.xml :"></a>activity_main.xml :</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </div><div class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span>  </div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span>&gt;  </div><div class="line">  </div><div class="line">    &lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.CoordinatorLayout</span>  </div><div class="line">        android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>  </div><div class="line">        android:fitsSystemWindows=<span class="string">"true"</span>  </div><div class="line">        tools:context=<span class="string">"com.example.mvvmdemo.MainActivity"</span>&gt;  </div><div class="line">  </div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.AppBarLayout</span>  </div><div class="line">            android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">            android:theme=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;  </div><div class="line">  </div><div class="line">            &lt;android<span class="selector-class">.support</span><span class="selector-class">.v7</span><span class="selector-class">.widget</span><span class="selector-class">.Toolbar</span>  </div><div class="line">                android:id=<span class="string">"@+id/toolbar"</span>  </div><div class="line">                android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">                android:layout_height=<span class="string">"?attr/actionBarSize"</span>  </div><div class="line">                android:<span class="attribute">background</span>=<span class="string">"?attr/colorPrimary"</span>  </div><div class="line">                app:popupTheme=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;  </div><div class="line">  </div><div class="line">        &lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.AppBarLayout</span>&gt;  </div><div class="line">  </div><div class="line">        &lt;include layout=<span class="string">"@layout/content_main"</span>  </div><div class="line">            android:id=<span class="string">"@+id/content_main"</span>  </div><div class="line">            /&gt;  </div><div class="line">  </div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.FloatingActionButton</span>  </div><div class="line">            android:id=<span class="string">"@+id/fab"</span>  </div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span>  </div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">            android:layout_gravity=<span class="string">"bottom|end"</span>  </div><div class="line">            android:layout_margin=<span class="string">"@dimen/fab_margin"</span>  </div><div class="line">            app:srcCompat=<span class="string">"@android:drawable/ic_dialog_email"</span> /&gt;  </div><div class="line">  </div><div class="line">    &lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.CoordinatorLayout</span>&gt;  </div><div class="line">  </div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<h2 id="content-main"><a href="#content-main" class="headerlink" title="content_main:"></a>content_main:</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">&lt;layout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </div><div class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span>  </div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span>&gt;  </div><div class="line">  </div><div class="line">    &lt;data&gt;  </div><div class="line">        &lt;variable  </div><div class="line">            name=<span class="string">"viewModel"</span>  </div><div class="line">            type=<span class="string">"com.example.mvvmdemo.MainViewModel"</span>/&gt;  </div><div class="line">  </div><div class="line">    &lt;/data&gt;  </div><div class="line">  </div><div class="line">    &lt;LinearLayout  </div><div class="line">        android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>  </div><div class="line">        android:<span class="attribute">padding</span>=<span class="string">"@dimen/activity_vertical_margin"</span>  </div><div class="line">        android:orientation=<span class="string">"vertical"</span>  </div><div class="line">        app:layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span>  </div><div class="line">        tools:context=<span class="string">"com.example.mvvmdemo.MainActivity"</span>  </div><div class="line">        tools:showIn=<span class="string">"@layout/activity_main"</span>&gt;  </div><div class="line">  </div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.TextInputLayout</span>  </div><div class="line">            android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span>&gt;  </div><div class="line">  </div><div class="line">            &lt;EditText  </div><div class="line">                android:id=<span class="string">"@+id/name"</span>  </div><div class="line">                android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">                android:hint=<span class="string">"姓名"</span>  </div><div class="line">                android:layout_margin=<span class="string">"@dimen/activity_vertical_margin"</span> /&gt;  </div><div class="line">  </div><div class="line">        &lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.TextInputLayout</span>&gt;  </div><div class="line">  </div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.TextInputLayout</span>  </div><div class="line">            android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span>&gt;  </div><div class="line">  </div><div class="line">            &lt;EditText  </div><div class="line">                android:id=<span class="string">"@+id/sex"</span>  </div><div class="line">                android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">                android:hint=<span class="string">"性别"</span>  </div><div class="line">                android:layout_margin=<span class="string">"@dimen/activity_vertical_margin"</span> /&gt;  </div><div class="line">  </div><div class="line">        &lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.TextInputLayout</span>&gt;  </div><div class="line">  </div><div class="line">  </div><div class="line">        &lt;android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.TextInputLayout</span>  </div><div class="line">            android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span>&gt;  </div><div class="line">  </div><div class="line">            &lt;EditText  </div><div class="line">                android:id=<span class="string">"@+id/age"</span>  </div><div class="line">                android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">                android:hint=<span class="string">"年龄"</span>  </div><div class="line">                android:inputType=<span class="string">"number"</span>  </div><div class="line">                android:layout_margin=<span class="string">"@dimen/activity_vertical_margin"</span> /&gt;  </div><div class="line">  </div><div class="line">        &lt;/android<span class="selector-class">.support</span><span class="selector-class">.design</span><span class="selector-class">.widget</span><span class="selector-class">.TextInputLayout</span>&gt;  </div><div class="line">  </div><div class="line">        &lt;Button  </div><div class="line">            android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">            android:text=<span class="string">"提交"</span>  </div><div class="line">            android:onClick=<span class="string">"@&#123;viewModel.applyUser&#125;"</span>/&gt;  </div><div class="line">  </div><div class="line">        &lt;TextView  </div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span>  </div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span>  </div><div class="line">            android:layout_margin=<span class="string">"@dimen/activity_vertical_margin"</span>  </div><div class="line">            android:text=<span class="string">"@&#123;viewModel.user.name + '\n'  + viewModel.user.sex +           '\n' + viewModel.user.age&#125;"</span> /&gt;  </div><div class="line">    &lt;/LinearLayout&gt;  </div><div class="line">  </div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<p>这里依然是采用MD风格的界面设计，现在我们主要来看<em>content_main</em>中的代码。我们可以看到layout中的代码和上一节中介绍的差不多，但是这里引入了一个叫<em>MainViewModel</em>的类，这个就是笔者提到的ViewModel类。我们可以看到，button中的<code>android:onClick=&quot;@{viewModel.applyUser}&quot;</code>这句代码的作用就是把View层中这个 Button的点击逻辑交给<em> MainViewModel</em>中的<em> applyUser</em>方法处理，并且我们的User类也是通过ViewModel来引用的。<br>上面这个只是ViewModel在这里的其中一个应用而已。下面来看看Activity和ViewModel中的代码。</p>
<h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity:"></a>MainActivity:</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line"><span class="comment">//        创建ViewModel          </span></div><div class="line">        <span class="type">ActivityMainBinding</span> activityMainBinding  </div><div class="line">                = <span class="type">DataBindingUtil</span>.setContentView(<span class="keyword">this</span>,<span class="type">R</span>.layout.activity_main);  </div><div class="line">        <span class="type">MainViewModel</span> mainViewModel = <span class="keyword">new</span> <span class="type">MainViewModel</span>(<span class="keyword">this</span>,activityMainBinding);  </div><div class="line">  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>MainActivity的代码很简单，它的核心就是创建MainViewModel这一句，其他的逻辑都交给了ViewModel处理。当我们的遇到无法在ViewModel内部处理的业务时（例如菜单监控等），我们可以通过在View层中调用ViewModel的方法来实现。</p>
<h2 id="MainViewModel"><a href="#MainViewModel" class="headerlink" title="MainViewModel:"></a>MainViewModel:</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainViewModel</span> &#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ActivityMainBinding activityMainBinding;  </div><div class="line">    <span class="keyword">private</span> ContentMainBinding contentMainBinding;  </div><div class="line">    <span class="keyword">private</span> AppCompatActivity activity;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> UserBean user;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainViewModel</span>(<span class="params">AppCompatActivity activity, ActivityMainBinding activityMainBinding</span>)</span>&#123;  </div><div class="line">        <span class="keyword">this</span>.activity = activity;  </div><div class="line">        <span class="keyword">this</span>.activityMainBinding = activityMainBinding;  </div><div class="line">        <span class="keyword">this</span>.contentMainBinding = activityMainBinding.contentMain;  </div><div class="line">        init();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">        activity.setSupportActionBar(activityMainBinding.toolbar);  </div><div class="line">        activityMainBinding.fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">            @<span class="function">Override  </span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(<span class="params">View view</span>) &#123;  </div><div class="line">                Snackbar.make(view, <span class="string">"Replace with your own action"</span>, Snackbar.LENGTH_LONG)  </div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="literal">null</span>).show();  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">        user = <span class="keyword">new</span> UserBean();  </div><div class="line">        contentMainBinding.setViewModel(<span class="keyword">this</span>);  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyUser</span>(<span class="params">View v</span>)</span>&#123;  </div><div class="line">        Snackbar.make(v,<span class="string">"提交成功"</span>,Snackbar.LENGTH_SHORT).setAction(<span class="string">"Action"</span>,<span class="literal">null</span>).show();  </div><div class="line">        user.name.<span class="keyword">set</span>(contentMainBinding.name.getText().toString());  </div><div class="line">        user.sex.<span class="keyword">set</span>(contentMainBinding.sex.getText().toString());  </div><div class="line">        user.age.<span class="keyword">set</span>(Integer.valueOf(contentMainBinding.age.getText().toString()));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码中要特别注意的一句代码就是：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">contentMainBinding.setViewModel(<span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<p>这句代码就实现了我们的ViewModel层与View层layout文件的绑定，这样就使得View层中的layout能调用ViewModel中的一些方法，在本例子中就是button控件调用<code>public void applyUser(View v)</code>方法。</p>
<p>代码很简单，这种方案的核心思想就是：</p>
<ol>
<li>View层中通过DataBinding生成Binding实例</li>
<li>View层把生成的Binding实例传递给ViewModel层</li>
<li>ViewModel层通过把自身与Binding实例绑定，从而实现View中layout与ViewModel的绑定。</li>
</ol>
<p>通过这种方法还有一个好处就是，我们的layout文件中data标签中只需要引入ViewModel就可以了，其它的数据对象统一在ViewModel中处理。</p>
<p>我们来看看Demo效果图<br><em>初始化：</em><br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvvm/mvvm_demo_layout1.png" alt="初始化Demo"></p>
<p><em>对User重新复赋值：</em><br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvvm/mvvm_demo_layout_2.png" alt="重新赋值"></p>
<h1 id="网上对于MVVM的一些错误解读"><a href="#网上对于MVVM的一些错误解读" class="headerlink" title="网上对于MVVM的一些错误解读"></a>网上对于MVVM的一些错误解读</h1><p>除了上述提到的使用Binding充当ViewModel层的错误解读外，还有一种大家注意的模式就是所谓的MVPVM模式。这种模式的核心思想就是在MVVM的基础上加上Presenter层。笔者实在是有点搞不懂为什么要这样分层，首先Presenter和ViewModel层都是逻辑控制层，同一个功能没必要分出两层。其次就是笔者认为在APP中分出三层已经能很好地完成任务了，如果分成四层的话不好管理的同时还会增加代码的复杂度，因为你无法很好区分Presenter和ViewModel的具体功能。所以笔者在这里建议，绝对不要使用所谓的MVPVM模式来进行开发。MVVM已经能很好地满足我们的开发需求了。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>对MVVM在Android上的应用到这里就结束了，看过笔者关于MVP模式框架设计的读者应该会知道，这只是个开端。所以笔者在后面会专门写一个系列关于介绍如何设计一个MVVM框架的文章的。在写这个系列文章之前，首先会有一系列的基础技术的介绍和一些技术解决方案，有兴趣的读者请留意哦。<br>老规矩，放出Demo的下载地址：<a href="https://github.com/DobbyTang/MvvmDemo" target="_blank" rel="external">https://github.com/DobbyTang/MvvmDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;/em&gt;Google发布DataBinding已经有一年时间了，网上也有很多教程。但是在笔者看过的大部分关于MVVM在Android上的实现的教程中，都存在一个十分之严重的问题，就是大部分的介绍MVVM的文章只不过是介绍DataBinding的文章。而在这些教程中，几乎都无一例外地把DataBinding生成的Binding类(或实体类当成是ViewModel层。这两种方法都有一个十分之大的漏洞，就是作为ViewModel层，几乎没有任何控制力。在这里，笔者介绍一个笔者总结出来的如何结合DataBinding在Android实现MVVM模式。&lt;/p&gt;
    
    </summary>
    
      <category term="Android架构" scheme="http://www.tangpj.com/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MVVM模式" scheme="http://www.tangpj.com/tags/MVVM%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android框架篇—— 从零开始搭建一个完善的MVP开发框架(五)，通过组件化开发优化项目的结构</title>
    <link href="http://www.tangpj.com/2016/11/27/mvp-structure-five/"/>
    <id>http://www.tangpj.com/2016/11/27/mvp-structure-five/</id>
    <published>2016-11-27T15:38:22.000Z</published>
    <updated>2016-12-04T14:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>摘要：</em> 在第三篇文章有位朋友留言说：如果接口的数量有一百个，那么是不是需要写一百个Presenter?答案是不一定的,因为这个问题需要根据实际的业务需求来解决。但是这种一个接口对应一个Presenter的方式能够对项目进行最大限度的解耦，我们能够很方便的复用这个接口。</p>
<a id="more"></a>
<h2 id="采用MVP模式引发的一些思考"><a href="#采用MVP模式引发的一些思考" class="headerlink" title="采用MVP模式引发的一些思考"></a>采用MVP模式引发的一些思考</h2><p>笔者在研究MVP模式的时候查阅过相当多的资料，其中有两句话令我相当的深刻。一是：使用MVP模式虽然代码量会大大增加，但是为了降低耦合和逻辑上的简洁这个牺牲是值得的。二是：有些公司是根据代码量来统计工资的，所以使用MVP模式对于那些用代码量来统计工资的开发者来说，这应该是一个优点（然而，我们公司的工资和代码量时无关）。我当初就是信了你们的邪，当项目达到一定的程度的时候如果采用网上推荐的方式，重复的代码多到你无法想象好吗？每个Presenter都要处理大量重复的逻辑，项目中存在无数个功能相同的Model（向服务器发起请求和发送回调数据到Presenter）例如进度条的显示等等。不过当笔者意识到这个问题后，就通过泛型和封装优化了代码，解决了上述的问题，所以就有了前面的四篇文章。但是有一个问题是没办法通过优化代码解决的，那就是Presenter的管理问题。</p>
<p>这里笔者说一个例子，在开发的时候我接到一个需求是把应用中的一个模块完全移植到另外一个应用中。这个需求很简单，但是有一个问题就是：由于项目达到一定的体量后Presenter的数量和View接口文件比较多,所以在移动模块的时候需要判断那些文件时必要的，很容易漏掉某个文件或者添加了多余的文件。而且由于数据传递等原因，把模块移动到新框架中还需要重新对项目进行调试一遍又一遍才能运行起来。做完这一切所花费的时间并不短，并且还需要重新对这个模块乃至整个项目都测试一遍。</p>
<p>把一个模块迁移到另外一个应用中其实是很常见的问题。特别是在同一间公司不同应用中相似模块背后的逻辑其实是类似的，只是View的展现有所区别而已（例如登陆模块，登陆模块采取的逻辑与登陆校验其实是类似的）。所以如果能把模块以组件的形式分离出来，当需要开发一个新app的时候，再通过一个app模块把这些模块像拼积木一样拼接起来这样不就会大大增加我们的工作效率了吗？</p>
<p>关于组件化开发，笔者也查阅过很多大牛写的文章，这个概念看起来高尚大，实际上通过gradle可以很简单地实现组件化。采用组件化进行开发还能顺便解决我们管理Presenter的问题。因为当你采用组件化开发的时候，单个组件中的Presenter的数量其实不多的，所以采用组件化开发不用担心管理Presenter的问题（什么，你说10来个Presenter你都无法管理了？我选择死亡。。。）。如果你们某个业务组件的接口有几十个的话，这个就是你们的业务架构有问题了。</p>
<h2 id="什么是组件化开发"><a href="#什么是组件化开发" class="headerlink" title="什么是组件化开发"></a>什么是组件化开发</h2><p>组件化开发的核心就是把业务模块封装成一个高内聚，低耦合的组件。所谓的高内聚低耦合的基本要点就是，这个业务组件完全不依赖于其它的业务组件，这个组件的功能是完善的能单独拿出来使用的，并且其它的模块能够轻松唤起这个组件进行工作。</p>
<p>光靠文字可能大家会觉得有点难以理解，下面来看看一个关于电商平台的组件化简图</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/component.png" alt="电商平台组件化简图"></p>
<p>这个APP有4个组件，这四个组件分别依赖于BaseLib组件，而且各个组件都是单独存在没有任何交集的。BaseLib中包含了我们前面4篇文章所开发的MVP开发框架组件、baseApp组件(这里放style，drawable资源和自定义Application)、工具类组件等。</p>
<p>可能有读者会产生疑问，个人中心和购物车是需要登录后才能使用的功能，但是这两个组件和登陆注册模块之间是没有依赖的。那么怎么样判断App实际有没有登陆呢？在这里笔者是通过Base组件中的自定义Applcation实现的。当登陆成功后，把获取到的密钥交给Applcation处理就可以了。</p>
<h2 id="组件化开发有什么优点"><a href="#组件化开发有什么优点" class="headerlink" title="组件化开发有什么优点"></a>组件化开发有什么优点</h2><ol>
<li>业务组件可以很方便地移植到另外一个App。</li>
<li>项目的分工可以更加合理，因为不同组件之间是没有依赖关系的。所以可以几个组件同时开发。</li>
<li>可以实现组件的单独编译和测试。</li>
<li>项目之间的耦合度更低，更好管理。</li>
</ol>
<p>道理大家都懂，但是具体要怎么做呢？下面我就来教你们如何实现组件化。</p>
<h2 id="组件化的项目结构"><a href="#组件化的项目结构" class="headerlink" title="组件化的项目结构"></a>组件化的项目结构</h2><p>项目的结构</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_component_project.png" alt="项目结构图"></p>
<p>上图中的Business就是我们的业务层代码，其中的test就是我们的一个测试组件。</p>
<h2 id="实现组件化"><a href="#实现组件化" class="headerlink" title="实现组件化"></a>实现组件化</h2><p>组件化的关键是通过gradle脚本实现组件间的的属性变化（这里称作为属性是为了方便大家理解，实际上这个是一个插件，这个插件的作用时帮助我们构建项目，这里涉及到gradle自动化构建方面的知识，这里就不深入了）。何谓属性变化呢？不知道大家在平时开发的时候要没有认真看过build.gradle文件，这个文件的第一句代码就确定了这个Module的属性。<br>一般我们在Android Studio创建一个project的时候，我们的项目中就会带有一个Module，这个Module的名字就叫app。现在我们来看看app中build.gradle的第一句代码是怎样写的：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div></pre></td></tr></table></figure></p>
<p>这句代码的作用是规定了我们app这个Module是一个application，意思就是app这个Module的属性是application。除了application属性外我们还需要用的一个属性是library属性，这个属性规定了module是一个library，这两个属性只能同时存在一个。我们在前面用到的volley框架就是一个library。下面我们来看看它的build.gradle是怎么写的：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></div></pre></td></tr></table></figure></p>
<p>因为我们组件化的要求是，组件必须能够组合一起运行也能单独开发、单独测试所以我们的组件需要能够单独运行才能满足我们的要求。<br>在Android中Module的属性必须是application才能单独运行起来。所以当我们开发完一个业务组件之后，我们把build.gradle的属性改为application就能单独运行起来了，如果需要组合在一起则需要把属性改为library即可。这里有一点是需要注意的，当Module的属性为application的时候，必须要有一个入口activity，入口activity就是指我们设置了intent-filter为Main的activity。就是下面这个：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span>  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>而作为library的时候是不能有入口activity的。</p>
<p>这个就是组件化的具体实现，但是这样会有一个问题就是如果组件的数量过多的话，我们管理起来也是一件麻烦事，想象下你不停地重复上述的操作的情景。所以我们需要把这一个过程交给gradle脚本，实现自动化构建。</p>
<h2 id="使用Gradle实现自动化构建"><a href="#使用Gradle实现自动化构建" class="headerlink" title="使用Gradle实现自动化构建"></a>使用Gradle实现自动化构建</h2><p>自动化构建这个听起来很厉害的概念实际上是十分简单的，我们直入主题。我们先开口项目根目录下的gradle.properties文件。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Turn on debugging  </span></div><div class="line"><span class="attr">isDebug</span>=<span class="literal">true</span>  </div><div class="line">  </div><div class="line"><span class="comment"># Deps for gradle  </span></div><div class="line"><span class="attr">BUILD_TOOLS_VERSION</span>=<span class="number">25.0</span>.<span class="number">0</span>  </div><div class="line"><span class="attr">COMPILE_SDK_VERSION</span>=<span class="number">25</span>  </div><div class="line">  </div><div class="line"><span class="comment"># SDK versions for the samples  </span></div><div class="line"><span class="attr">MIN_SDK_VERSION</span>=<span class="number">15</span>  </div><div class="line"><span class="attr">TARGET_SDK_VERSION</span>=<span class="number">25</span>  </div><div class="line">  </div><div class="line"><span class="comment"># Deps for libraries  </span></div><div class="line"><span class="attr">GSON_VERSION</span>=<span class="number">2.7</span>  </div><div class="line"><span class="attr">FRESCO_VERSION</span>=<span class="number">0.9</span>.<span class="number">0</span>  </div><div class="line">  </div><div class="line"><span class="comment"># App Version  </span></div><div class="line"><span class="attr">VERSION_CODE</span>=<span class="number">1</span>  </div><div class="line"><span class="attr">VERSION_NAME</span>=<span class="number">1.0</span>.<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>在这个文件中，我定义了一些全局变量。这些全局变量的作用是同一所有模块中使用的android sdk的版本和一些库的版本，在这里我们只看isDebug这个变量就可以了。isDebug为true的时候我们的所有业务组件的属性就设置为application属性，为false的时候就设置为library属性即可。至于如何解决Manifest中的入口问题，我们先来看看test组件的项目结构：<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_component_test.png" alt="test组件接口"></p>
<p>就是通过创建两个不同的Manifest文件解决的，这两个文件的区别就是debug中定义了入口activity。如果调用这个模块需要初始数据的话，我们创建一个DebugActivity就可以了。例如电商例子中，我们需要一个可以输入商品号添加商品到购物车的DebugActivity。这里需要注意的是，购物车功能需要登录才能使用，我们使用debug模式的时候需要在自定义Application中提供一个debugKey来让提供校验密钥。</p>
<p>下面我们看看test模块中的build.gradle的代码：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line"><span class="keyword">if</span> (isDebug.toBoolean())&#123;  </div><div class="line">    apply plugin: <span class="string">'com.android.application'</span>  </div><div class="line">  </div><div class="line">&#125;<span class="keyword">else</span> &#123;  </div><div class="line">    apply plugin: <span class="string">'com.android.library'</span>  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">android &#123;  </div><div class="line">    compileSdkVersion rootProject<span class="selector-class">.ext</span><span class="selector-class">.compileSdkVersion</span>  </div><div class="line">    buildToolsVersion rootProject<span class="selector-class">.ext</span><span class="selector-class">.buildToolsVersion</span>  </div><div class="line">  </div><div class="line">    defaultConfig &#123;  </div><div class="line">        <span class="keyword">if</span> (isDebug.toBoolean() )&#123;  </div><div class="line">            applicationId <span class="string">"com.example.test"</span>  </div><div class="line">        &#125;  </div><div class="line">        minSdkVersion rootProject<span class="selector-class">.ext</span><span class="selector-class">.minSdkVersion</span>  </div><div class="line">        targetSdkVersion rootProject<span class="selector-class">.ext</span><span class="selector-class">.targetSdkVersion</span>  </div><div class="line">        versionCode rootProject<span class="selector-class">.ext</span><span class="selector-class">.versionCode</span>  </div><div class="line">        versionName rootProject<span class="selector-class">.ext</span><span class="selector-class">.versionName</span>  </div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span>  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">    buildTypes &#123;  </div><div class="line">        release &#123;  </div><div class="line">            minifyEnabled false  </div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span>  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    sourceSets&#123;  </div><div class="line">        main&#123;  </div><div class="line">  </div><div class="line">            <span class="keyword">if</span> (isDebug.toBoolean())&#123;  </div><div class="line">                manifest<span class="selector-class">.srcFile</span> <span class="string">'src/main/debug/AndroidManifest.xml'</span>  </div><div class="line">  </div><div class="line">            &#125;<span class="keyword">else</span> &#123;  </div><div class="line">                manifest<span class="selector-class">.srcFile</span> <span class="string">'src/main/release/AndroidManifest.xml'</span>  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">dependencies &#123;  </div><div class="line">    compile project(<span class="string">':BaseLibraries:BaseMvpLib'</span>)  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里只需要关注两个地方就可以，第一个就是根据isDebug的值来确定test组件的属性。第二个就是在sourceSets中根据isDebug的值来选择Manifest文件。<br>当test属性为application属性时，app Module是无法依赖test的，所以app的build.gradle文件需要根据isDebug的值来选择是否以来test组件。下面是具体实现逻辑：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;  </div><div class="line">    <span class="keyword">if</span>(isDebug.toBoolean())&#123;  </div><div class="line">        <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':BaseLibraries:BaseApp'</span>)  </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">":Business:test"</span>)  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="对于第三章中读者提出的问题的几个解决思路"><a href="#对于第三章中读者提出的问题的几个解决思路" class="headerlink" title="对于第三章中读者提出的问题的几个解决思路"></a>对于第三章中读者提出的问题的几个解决思路</h2><p>第三章中，读者提出来了一个好问题，这个问题对于我们在使用MVP模式进行开发的时候是无法回避的。相信很多读者在看介绍MVP模式的文章的时候都会看到一个问题就是：当业务代码越来越复杂的时候Presenter会变得越来越臃肿。所以在这里，笔者采用的解决方案就是一个Presenter对应一个接口的方法来解决。<br>当采用笔者的解决方法的时候，如果同一个页面有多个Api接口的话，我们只需要在Activity / Fragment中实现多个IView接口和实例化多个Presenter就可以了。这样做的优点就是，我们的接口就好像是一块块积木一样，当我们需要使用的时候某个接口的时候，通过Presenter就可以很简单的在Activity中使用。这种方案的缺点是当App的体积到达一定的程度后Presenter的数量会很多。我们可以通过组件化的方式降低这个问题带来的影响。<br>还有一种方案就是，一个页面对应一个Presenter。这个方案有两个思路，一个是：Model负责控制多个Api接口，一个Api接口对应一个发起请求的方法。然后在Presenter中根据实际接口的情况来创建回调方法。另一种是，一个Presenter中控制多个Model然后在需要的时候使用不同的Model向服务器获取数据即可。这种方法的缺点是代码的耦合度会比较高，当页面中的接口过多的时候，Presenter会非常臃肿，并且无法在其他页面中复用这个Presenter接口。当我们某个页面中需要使用同一个接口的时候，我们必须重新实现一次。<br>笔者认为，如果我们开发的app体量不是很大的时候，我们可以使用第二种方案进行开发。如果APP体积比较大的时候，通过笔者提供的解决方法再配合组件化的项目构建方案能够应对更复杂的实际场景。所以需要采用何种方案就需要读者自行判断了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>关于介绍MVP框架的文章就到这里结束了，在这里是时候接到读者提出的问题了。<br>当我们使用MVP模式的时候Presenter文件的数量问题是无法解决的，我们只能通过其它的方法来增强我们对于Presenter的管理。相信读者也看出来了，这个解决方法和编写代码的关系并不大。这个方法的思想是使用组件化的方法来构建我们的项目实现各组件间高内聚低耦合的目的。<br>在这个篇文章中，我们所写的代码并不多，但是却解决了Presenter管理、模块化开发、单模块测试、降低项目耦合度等问题。所以这里也给读者一些建议，就是在解决问题的时候，我们要跳出我们的常规思维，有时候只需要做一小点改变结果就会大大不同。<br>项目的代码已经提交到了笔者的git中。地址是<a href="https://github.com/DobbyTang/mvp-android-framework" target="_blank" rel="external">https://github.com/DobbyTang/mvp-android-framework</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;/em&gt; 在第三篇文章有位朋友留言说：如果接口的数量有一百个，那么是不是需要写一百个Presenter?答案是不一定的,因为这个问题需要根据实际的业务需求来解决。但是这种一个接口对应一个Presenter的方式能够对项目进行最大限度的解耦，我们能够很方便的复用这个接口。&lt;/p&gt;
    
    </summary>
    
      <category term="Android架构" scheme="http://www.tangpj.com/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MVP开发框架" scheme="http://www.tangpj.com/tags/MVP%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android框架篇—— 从零开始搭建一个完善的MVP开发框架(四) —对View（Activity,Fragment等）层组件进行封装简化View层的开发</title>
    <link href="http://www.tangpj.com/2016/11/09/mvp-structure-four/"/>
    <id>http://www.tangpj.com/2016/11/09/mvp-structure-four/</id>
    <published>2016-11-09T15:44:37.000Z</published>
    <updated>2016-11-09T15:56:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>摘要：</em>  通过上面三篇文章所提到的关于MVP框架的封装，我们已经能够大大简化MVP模式中MP层的开发流程。但是还有一个问题，就是在开发的时候我们的 View层组件还需要处理较多的事情，例如错误处理，进度条显示等。所以我们需要对View层的组建进行封装，优化开发的流程。</p>
<a id="more"></a>
<h3 id="对View组建进行优化"><a href="#对View组建进行优化" class="headerlink" title="对View组建进行优化"></a>对View组建进行优化</h3><p>笔者根据封装好的MVP的特点，对View层的组建进行了不同的封装。里面包含2个Activity、两个Fragment和一个Adapter基类。它们的名称分别是：MvpActivity 、MvpListActivity、MvpFragment、MvpListFragment、BaseListAdapter。它们的目的都是为了优化项目的代码和结构，加快项目的开发速度。<br>在这里笔者只对MvpActivity 这个类进行解析，其他的可以通过查看笔者github上的源码来学习实现方式。MvpActivity中封装了前面我们提到的一些公共方法，它的作用是结合我们前面封装好的BasePresenter使用，实现对项目进行优化的目的。使用普通的presenter获取数据的activity可以通过继承这个类来减少需要自己手动实现的代码。<br>如果读者想进一步了解其他几个组件的具体实现的话，请到笔者的<a href="https://github.com/DobbyTang/mvp-android-framework" target="_blank" rel="external">github</a>上下载。</p>
<h3 id="处理Toolbar"><a href="#处理Toolbar" class="headerlink" title="处理Toolbar"></a>处理Toolbar</h3><p>笔者在开发这个框架的时候是采用Material Design风格进行开发的，采用这个风格进行开发的时候会有一个问题，就是每个Activity都需要重新实现一个toolbar。所以对Activity进行优化的第一项任务就是解决这个问题。<br>我们先来看看MvpActivity的界面实现：<br><strong>activity_mvp.xml:</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span>  </div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>  </div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:layoutwidth</span>=<span class="string">"matchparent"</span>  </div><div class="line">    <span class="attr">android:layoutheight</span>=<span class="string">"matchparent"</span>  </div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>  </div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.mvp.framework.module.base.view.activity.MvpActivity"</span>&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span>  </span></div><div class="line">        <span class="attr">android:layoutwidth</span>=<span class="string">"matchparent"</span>  </div><div class="line">        <span class="attr">android:layoutheight</span>=<span class="string">"wrapcontent"</span>  </div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span>  </span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span>  </div><div class="line">            <span class="attr">android:layoutwidth</span>=<span class="string">"matchparent"</span>  </div><div class="line">            <span class="attr">android:layoutheight</span>=<span class="string">"?attr/actionBarSize"</span>  </div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span>  </div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/contentmvp"</span> /&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span>  </div><div class="line">        <span class="attr">android:layoutwidth</span>=<span class="string">"wrapcontent"</span>  </div><div class="line">        <span class="attr">android:layoutheight</span>=<span class="string">"wrapcontent"</span>  </div><div class="line">        <span class="attr">android:layoutgravity</span>=<span class="string">"bottom|end"</span>  </div><div class="line">        <span class="attr">android:layoutmargin</span>=<span class="string">"@dimen/fabmargin"</span>  </div><div class="line">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span>  </div><div class="line">        <span class="attr">app:srcCompat</span>=<span class="string">"@android:drawable/icdialogemail"</span> /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面的代码和我们平时的Material Design页面布局时一样的。下面我们来看下<code>content_mvp</code>的代码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span>  </div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>  </div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/refresh_layout"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>  </div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.mvp.framework.module.base.view.activity.MvpActivity"</span>  </div><div class="line">    <span class="attr">tools:showIn</span>=<span class="string">"@layout/activity_mvp"</span>&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/content_base"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span>  </div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span>  </div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span>  </div><div class="line">        &gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">ProgressBar</span>  </span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/base_progress_bar"</span>  </div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"64dp"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>  </div><div class="line">            <span class="attr">android:visibility</span>=<span class="string">"gone"</span>  </div><div class="line">            <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyle"</span>  </div><div class="line">            /&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/base_error_layout"</span>  </div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </div><div class="line">            <span class="attr">android:visibility</span>=<span class="string">"gone"</span>  </div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>  </div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;  </div><div class="line">  </div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span>  </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/base_error_img"</span>  </div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">                <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;  </div><div class="line">  </div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/base_error_text"</span>  </div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">                <span class="attr">android:text</span>=<span class="string">"网络连接错误,点击从新连接"</span>/&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>从布局可以看到，<code>content_mvp</code>中包含了SwipeRefreshLayout、ProgressBar、和显示错误的layout等。那么是如何实现让子Activity不需要处理toolbar的呢？笔者这里用了个简单暴力的办法。你看见上面布局中的FrameLayout了吗？看见了对吧？我就是用FrameLayout的addView方法把子Activity中的布局加进去的。<br>就好像下面这样:<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">contentView = onCreateView(getLayoutInflater(),contentViewGroup,savedInstanceState);  </div><div class="line"><span class="type">FrameLayout</span>.<span class="type">LayoutParams</span> lp = <span class="function"><span class="keyword">new</span> <span class="title">FrameLayout</span>.<span class="title">LayoutParams</span>(  </span></div><div class="line">        <span class="type">FrameLayout</span>.<span class="type">LayoutParams</span>.<span class="type">MATCHPARENT</span>,<span class="type">FrameLayout</span>.<span class="type">LayoutParams</span>.<span class="type">MATCHPARENT</span>);  </div><div class="line"><span class="title">contentViewGroup</span>.<span class="title">addView</span>(contentView,lp);`</div></pre></td></tr></table></figure></p>
<p>这个onCreateView就是在子Activity中需要实现的方法，和fragment的onCreateView使用方法是一样的。而contentViewGroup就是我们上面说的fragment。</p>
<p>这样就可以通过MvpActivity基类简化这一步操作。</p>
<h3 id="实现IMvpActivity接口"><a href="#实现IMvpActivity接口" class="headerlink" title="实现IMvpActivity接口"></a>实现IMvpActivity接口</h3><p><strong>IMvpActivity的代码如下：</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMvpActivity</span> <span class="keyword">extends</span> <span class="title">IActivity</span>&#123;</span>  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: onCreateView  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span><span class="regexp">/10/</span><span class="number">20</span> 下午<span class="number">2</span>:<span class="number">32</span>  </div><div class="line">      <span class="meta">@Description</span>: 创建子activity布局  </div><div class="line">     /  </div><div class="line">    <span class="meta">@NonNull</span>  </div><div class="line">    View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState);  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: onReconnection  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span><span class="regexp">/10/</span><span class="number">20</span> 下午<span class="number">4</span>:<span class="number">00</span>  </div><div class="line">      <span class="meta">@Description</span>: 重新连接  </div><div class="line">      这里要注意的是，如果一个页面里面有多个获取数据的presenter，  </div><div class="line">      需要确认获取数据失败的presenter  </div><div class="line">      具体需要根据实际业务来处理  </div><div class="line">     /  </div><div class="line">    <span class="keyword">void</span> onReconnection();  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: setProgressType  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span><span class="regexp">/10/</span><span class="number">25</span> 上午<span class="number">10</span>:<span class="number">54</span>  </div><div class="line">      <span class="meta">@Description</span>:  </div><div class="line">      设置加载进度的样式  </div><div class="line">      初始化为默认模式，  </div><div class="line">      在子类中调用该方法可以重设进度条的样式  </div><div class="line">     /  </div><div class="line">    <span class="keyword">void</span> setProgressType(<span class="keyword">int</span> progressType);  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>IMvpActivity继承了IActivity接口,下面我们来看看IActivity接口的代码<br><strong>IActivity:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: setTitle  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span>/<span class="number">10</span>/<span class="number">20</span> 上午<span class="number">11</span>:<span class="number">06</span>  </div><div class="line">      <span class="meta">@Description</span>: 设置页面标题  </div><div class="line">     /  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span></span>;  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: setDisplayHomeAsUpEnabled  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span>/<span class="number">10</span>/<span class="number">20</span> 上午<span class="number">11</span>:<span class="number">16</span>  </div><div class="line">      <span class="meta">@Description</span>: ActionBar上是否显示返回按钮  </div><div class="line">     /  </div><div class="line">    <span class="meta">@NonNull</span>  </div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">setDisplayHomeAsUpEnabled</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">FloatingActionButton <span class="title">getFloatingActionButton</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的两个接口中大部分方法都十分简单，只是对activity执行一些初始化操作而已。其中setProgressType(int type)方法是用于设置我们在使用presenter发起获取数据请求的时候显示的进度条样式的。在这里笔者定义了三种样式，分别由dialog样式，默认样式和SwipeRefreshLayout样式。这个进度条样式在收到<code>IMvpView</code>接口的showProgress(final boolean show)的时候会显示／隐藏进度条。</p>
<h3 id="实现IMvpView接口"><a href="#实现IMvpView接口" class="headerlink" title="实现IMvpView接口"></a>实现IMvpView接口</h3><p>我们先来看看IMvpView接口的定义：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMvpView</span> <span class="keyword">extends</span> <span class="title">IBaseMvpView</span>&#123;</span>  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: isSucceed  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span><span class="regexp">/10/</span><span class="number">26</span> 下午<span class="number">4</span>:<span class="number">33</span>  </div><div class="line">      <span class="meta">@Description</span>: 通知View层获取数据成功  </div><div class="line">      在获取简单数据的时候用到  </div><div class="line">     /  </div><div class="line">    <span class="keyword">void</span> showSucceed(<span class="keyword">boolean</span> isSucceed);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseMvpView</span> &#123;</span>  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: showProgress  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span><span class="regexp">/10/</span><span class="number">26</span> 上午<span class="number">11</span>:<span class="number">06</span>  </div><div class="line">      <span class="meta">@Description</span>: 是否显示加载进度  </div><div class="line">     /  </div><div class="line">    <span class="keyword">void</span> showProgress(<span class="keyword">final</span> <span class="keyword">boolean</span> show);  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: showNetworkError  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span><span class="regexp">/10/</span><span class="number">26</span> 上午<span class="number">11</span>:<span class="number">08</span>  </div><div class="line">      <span class="meta">@Description</span>: 网络连接错误时Presenter层会调用该方法通知View层  </div><div class="line">     /  </div><div class="line">    <span class="keyword">void</span> showNetworkError(<span class="keyword">int</span> errorCode, String errorDesc, String ApiInterface);  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: showServerError  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span><span class="regexp">/10/</span><span class="number">26</span> 上午<span class="number">11</span>:<span class="number">09</span>  </div><div class="line">      <span class="meta">@Description</span>: 服务器返回错误时Presenter层会调用该方法通知View层  </div><div class="line">     /  </div><div class="line">    <span class="keyword">void</span> showServerError(<span class="keyword">int</span> errorCode, String errorDesc);  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这就是我们前面的文章中提到的IBaseView接口，这个接口的主要是用于处理错误回调与进度条的显示／隐藏。</p>
<p>下面我们来看看几个方法的实现：<br><strong> showProgress(boolean show)</strong></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Override</span>  </div><div class="line">public void showProgress(boolean show) &#123;  </div><div class="line">    <span class="selector-tag">switch</span> (progressType)&#123;  </div><div class="line">        <span class="selector-tag">case</span> <span class="selector-tag">PROGRESSTYPEDEFAULT</span>:  </div><div class="line">            <span class="selector-tag">if</span> (show)&#123;  </div><div class="line">                <span class="selector-tag">if</span> (contentView != null)&#123;  </div><div class="line">                    contentView<span class="selector-class">.setVisibility</span>(View.GONE);  </div><div class="line">                &#125;  </div><div class="line">                defaultProgress.setVisibility(View.VISIBLE);  </div><div class="line">            &#125;<span class="selector-tag">else</span> &#123;  </div><div class="line">                defaultProgress<span class="selector-class">.setVisibility</span>(View.GONE);  </div><div class="line">                <span class="selector-tag">if</span>(contentView != null)&#123;  </div><div class="line">                    contentView<span class="selector-class">.setVisibility</span>(View.VISIBLE);  </div><div class="line">                &#125;  </div><div class="line">  </div><div class="line">            &#125;  </div><div class="line">            break;  </div><div class="line">  </div><div class="line">        <span class="selector-tag">case</span> <span class="selector-tag">PROGRESSTYPEDIALOG</span>:  </div><div class="line">            <span class="selector-tag">if</span>(show)&#123;  </div><div class="line">                dialogProgress<span class="selector-class">.show</span>();  </div><div class="line">            &#125;<span class="selector-tag">else</span> &#123;  </div><div class="line">                dialogProgress<span class="selector-class">.dismiss</span>();  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            break;  </div><div class="line">  </div><div class="line">        case <span class="attribute">PROGRESSTYPEDROPDOWN</span>:  </div><div class="line">            refreshLayout.setRefreshing(show);  </div><div class="line">            break;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我们已经生成了不同样式的进度条实例，所以我们在这里根据设置的进度条样式来显示具体的进度条。这里需要注意的是，为了更好的人机交互体验，我们要根据不同的进度条样式来选择不同重连机制的处理方式，这里分别实现了点击错误提示重连和下拉重连，更多的实现读者可以自己进行拓展。</p>
<p><strong> showNetworkError和showServerError</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Override</span>  </div><div class="line">public void showNetworkError(int errorCode, String errorDesc, String ApiInterface) &#123;  </div><div class="line">    showProgress(false);  </div><div class="line">    LogUtil<span class="selector-class">.e</span>(getClass(), <span class="string">"showNetworkError: "</span> + ApiInterface);  </div><div class="line">  </div><div class="line">    onError(errorCode,errorDesc);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="variable">@Override</span>  </div><div class="line">public void showServerError(int errorCode, String errorDesc) &#123;  </div><div class="line">  </div><div class="line">    onError(errorCode,errorDesc);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到这两个错误回调的最终实现时onError方法，下面是onError的代码：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Override</span>  </div><div class="line">public void onError(int errorCode, String errorDesc) &#123;  </div><div class="line">    showProgress(false);  </div><div class="line">    LogUtil<span class="selector-class">.e</span>(getClass(), <span class="string">"showServerError: error code = "</span>  </div><div class="line">            + errorCode + <span class="string">" &amp; error desc = "</span> + errorDesc);  </div><div class="line">  </div><div class="line">    <span class="selector-tag">switch</span> (progressType) &#123;  </div><div class="line">  </div><div class="line">        <span class="selector-tag">case</span> <span class="selector-tag">PROGRESSTYPEDEFAULT</span>:  </div><div class="line">            <span class="selector-tag">if</span> (setErrorImageResource() != <span class="number">0</span>) &#123;  </div><div class="line">                errorImage<span class="selector-class">.setImageDrawable</span>(getResources().getDrawable(setErrorImageResource()));  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            if (!TextUtils.isEmpty(errorDesc)) &#123;  </div><div class="line">                errorText<span class="selector-class">.setText</span>(errorDesc);  </div><div class="line">            &#125;  </div><div class="line">            contentView.setVisibility(View.GONE);  </div><div class="line">            errorLayout<span class="selector-class">.setVisibility</span>(View.VISIBLE);  </div><div class="line">            break;  </div><div class="line">  </div><div class="line">        case <span class="attribute">PROGRESSTYPEDIALOG</span>:  </div><div class="line">            contentView.setVisibility(View.GONE);  </div><div class="line">            errorLayout<span class="selector-class">.setVisibility</span>(View.VISIBLE);  </div><div class="line">            break;  </div><div class="line">  </div><div class="line">        <span class="selector-tag">case</span> <span class="selector-tag">PROGRESSTYPEDROPDOWN</span>:  </div><div class="line">            <span class="selector-tag">if</span> (setErrorImageResource() != <span class="number">0</span>) &#123;  </div><div class="line">                errorImage<span class="selector-class">.setImageDrawable</span>(getResources().getDrawable(setErrorImageResource()));  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="selector-tag">if</span> (!TextUtils.isEmpty(errorDesc)) &#123;  </div><div class="line">                errorText<span class="selector-class">.setText</span>(errorDesc);  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="selector-tag">if</span> (!isSucceed) &#123;  </div><div class="line">                contentView<span class="selector-class">.setVisibility</span>(View.GONE);  </div><div class="line">                errorLayout<span class="selector-class">.setVisibility</span>(View.VISIBLE);  </div><div class="line">            &#125;<span class="selector-tag">else</span> &#123;  </div><div class="line">                Snackbar<span class="selector-class">.make</span>(fab,errorDesc,Snackbar.LENGTHSHORT)<span class="selector-class">.show</span>();  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            break;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>错误信息的展现形式也是和进度条的样式有关的，这样做是为了优化交互体验。下面我们来看看这三种不同设置的实际效果。<br><img src="https://github.com/DobbyTang/MarkdownRes/blob/master/mBlog/mvp/2016-11-09%2023_30_34.gif?raw=true" alt="Demo展示图片" title="Demo展示图片"></p>
<h3 id="对前面文章的补充"><a href="#对前面文章的补充" class="headerlink" title="对前面文章的补充"></a>对前面文章的补充</h3><p>前几篇文章中，关于BasePresenter的设计有一个小小的补充，这是由于笔者编写代码的时候的一个小的bug。<br>错误代码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@<span class="function">Override  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessServer</span>(<span class="params">Params <span class="keyword">params</span></span>) &#123;  </div><div class="line">    <span class="keyword">this</span>.<span class="keyword">params</span> = <span class="keyword">params</span>;  </div><div class="line">    mvpView.showProgress(<span class="literal">true</span>);  </div><div class="line">    baseModel.sendRequestToServer();  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">@<span class="function">Override  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelRequest</span>(<span class="params"></span>) &#123;  </div><div class="line">   baseModel.cancelRequest();  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>错误的地方在于关于baseModel的调用，在这里我们应该使用getModel获取Model实例。为什么要这样做呢？因为BasePresenter默认使用的是VolleyModle,当在子Presenter需要使用其它类型的Model的时候，可以通过覆盖getModel()这个方法来重设Modle实例。<br>修改后的代码为：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@<span class="function">Override  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accessServer</span>(<span class="params">Params <span class="keyword">params</span></span>) &#123;  </div><div class="line">    <span class="keyword">this</span>.<span class="keyword">params</span> = <span class="keyword">params</span>;  </div><div class="line">    mvpView.showProgress(<span class="literal">true</span>);  </div><div class="line">    getModel().sendRequestToServer();  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">@<span class="function">Override  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelRequest</span>(<span class="params"></span>) &#123;  </div><div class="line">   getModel() cancelRequest();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>限于篇幅，笔者在这里只是对MvpActivity作了一个简单的介绍，但是核心思想是一样的，通过对一些公共方法的封装（不同activity的初始化，错误处理，进度条的现实隐藏都是类似的），实现简化我们的代码的目的。这个项目涉及的技术点较多，但是都是相对简单的，所以笔者在这里就不对其他view组件展开讨论了。大家可以通过阅读源码来加深体会。在这里再强调一遍，该项目的github地址是：<a href="https://github.com/DobbyTang/mvp-android-framework" title="https://github.com/DobbyTang/mvp-android-framework" target="_blank" rel="external">https://github.com/DobbyTang/mvp-android-framework</a>。</p>
<h3 id="下一篇预告"><a href="#下一篇预告" class="headerlink" title="下一篇预告"></a>下一篇预告</h3><p>到目前为止，我们已经完成了MVP开发框架的搭，如果我们单单只是处理好MVP的基类开发的话，还不能满足我们的要求。当我们的项目体积大到一定的程度的话，维护起来还是有困难的。所以在下一篇我介绍如何把我们的框架改造成一个高内聚低耦合的组件化框架。<br>相信组件化这个概念在2016年大家也听过不少了，笔者会在下一篇文章中提供一个实现的思路给大家。如果大家有更好的想法欢迎在下面的留言板留言哦，或者直接pull request也可以。<br>这一章的彩蛋是：关于这个组件化的框架，笔者已经完成了，目前github上的主分之就是一个组件化的框架。因为笔者做鸡的写作能力，所以代码更新一般会比文章快一点，欢迎大家关注项目以获取最新动态哦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;/em&gt;  通过上面三篇文章所提到的关于MVP框架的封装，我们已经能够大大简化MVP模式中MP层的开发流程。但是还有一个问题，就是在开发的时候我们的 View层组件还需要处理较多的事情，例如错误处理，进度条显示等。所以我们需要对View层的组建进行封装，优化开发的流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Android架构" scheme="http://www.tangpj.com/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MVP开发框架" scheme="http://www.tangpj.com/tags/MVP%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android框架篇—— 从零开始搭建一个完善的MVP开发框架(三)，对列表型数据请求进行抽象，优化列表型数据的处理</title>
    <link href="http://www.tangpj.com/2016/11/04/mvp-structure-three/"/>
    <id>http://www.tangpj.com/2016/11/04/mvp-structure-three/</id>
    <published>2016-11-03T16:00:53.000Z</published>
    <updated>2016-11-04T15:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>摘要：</em>  在<a href="http://tangpj.com/2016/10/15/mvp-structure-two/" title="上一篇文章" target="_blank" rel="external">上一篇文章</a>中我们讨论了关于如何对普通的数据请求进行封装，对MVP模式进行优化。而在实际项目中，除了普通的数据外，一般我们还有列表型的数据，列表型的数据和普通的数据的主要区别是：列表型的数据需要分页获取。在实际项目中，我们一般获取分页型的数据时需要向服务器发送页码和一页的数据条数这两个数据。我们可以通过对列表型的Presenter进行封装，把大部分列表型数据需要处理的时间自动处理好。</p>
<a id="more"></a>
<h2 id="封装列表型的Presenter基类"><a href="#封装列表型的Presenter基类" class="headerlink" title="封装列表型的Presenter基类"></a>封装列表型的Presenter基类</h2><p>有了<a href="http://tangpj.com/2016/10/15/mvp-structure-two/" title="上一篇文章" target="_blank" rel="external">上一篇文章</a>的铺垫我们知道，在MVP模式中Model的主要作用就是向服务器发起请求然后把服务器返回的数据交给Presenter处理就可以了。所以在封装列表型Presenter的时候，直接沿用了上一章提到的BaseModel来获取数据与回调数据。在这里要注意的一点就是，笔者在开发这个框架的时候，对部分类名有部分改动，一切以系列文章结束时提供的完善的框架为准。</p>
<p>下面我们来看看列表型Presenter的接口与实际实现</p>
<h3 id="IBasePaginationPresenter"><a href="#IBasePaginationPresenter" class="headerlink" title="IBasePaginationPresenter"></a>IBasePaginationPresenter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Params</span>,<span class="title">Bean</span>&gt; <span class="keyword">extends</span> <span class="title">IBasePresenter</span>&lt;<span class="title">Params</span>&gt; </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">//刷新全部数据  </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">(Params params)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//加载下一页数据  </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loading</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@Method</span>: refreshAssignPage  </div><div class="line">      <span class="meta">@author</span> create by Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span>/<span class="number">10</span>/<span class="number">19</span> 上午<span class="number">11</span>:<span class="number">07</span>  </div><div class="line">      <span class="meta">@Description</span>: 刷新index所在页页面  </div><div class="line">      <span class="meta">@param</span> index 待刷新数据的位置  </div><div class="line">     /  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refreshIndexPage</span><span class="params">(<span class="keyword">int</span> index)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//设置一次取数据数量  </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accessServer</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，IBasePaginationPresenter\<params,bean\>接口是在IBasePresenter的基础上进行拓展的，拓展的方法是关于处理列表型数据的一些方法。</params,bean\></p>
<h3 id="BasePaginationPresenter"><a href="#BasePaginationPresenter" class="headerlink" title="BasePaginationPresenter"></a>BasePaginationPresenter</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> * <span class="doctag">@ClassName</span>: BasePaginationPresenter  </div><div class="line"> * <span class="doctag">@author</span> create by Tang  </div><div class="line"> * <span class="doctag">@date</span> date 16/9/29 下午2:14  </div><div class="line"> * <span class="doctag">@Description</span>:  </div><div class="line"> * <span class="doctag">@Params</span>: 请求参数类（http中的params）  </div><div class="line"> * <span class="doctag">@Bean</span>: 返回队列的数据项实体类（bean中的实体类）  </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePaginationPresenter</span>&lt;<span class="title">Params</span> <span class="keyword">extends</span> <span class="title">BasePaginationParams</span>,<span class="title">Bean</span>&gt;  </span></div><div class="line">        <span class="keyword">implements</span> <span class="title">IBasePaginationPresenter</span>&lt;<span class="title">Params</span>,<span class="title">Bean</span>&gt; &#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(List&lt;Bean&gt; list)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> IMvpListView baseView;  </div><div class="line">    <span class="keyword">private</span> IBaseModel baseModel;  </div><div class="line">    <span class="keyword">private</span> Params mParams;  </div><div class="line">  </div><div class="line">    <span class="comment">//默认一次去数据为ServerManager.COUNT  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCount = ServerManager.COUNT;  </div><div class="line">  </div><div class="line">    <span class="comment">//需要刷新的数据项位置  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mIndex = <span class="number">-1</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//需要刷新的页码（根据mIndex计算）  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPage;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> List&lt;Bean&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Class&lt;Bean&gt; clazz;  </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * <span class="doctag">@Method</span>: BasePaginationPresenter  </div><div class="line">     * <span class="doctag">@author</span> create by Tang  </div><div class="line">     * <span class="doctag">@date</span> date 16/10/20 上午10:18  </div><div class="line">     * <span class="doctag">@Description</span>: 构造方法  </div><div class="line">     * <span class="doctag">@param</span> clazz 队列参数项的类型，不能为空  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BasePaginationPresenter</span><span class="params">(@NonNull IMvpListView baseView, @NonNull Class&lt;Bean&gt; clazz)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.baseView = baseView;  </div><div class="line">        <span class="keyword">this</span>.baseModel = <span class="keyword">new</span> BaseModel(<span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">this</span>.clazz = clazz;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">(Params params)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.mParams = params;  </div><div class="line">        dataList.clear();  </div><div class="line">        loading();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">loading</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (mParams == <span class="keyword">null</span>)&#123;  </div><div class="line">            mParams = (Params) <span class="keyword">new</span> BasePaginationParams();  </div><div class="line">            mParams.count = mCount;  </div><div class="line">            mParams.page = (<span class="keyword">int</span>) Math.ceil((<span class="keyword">double</span>)  </div><div class="line">                    dataList.size()  <span class="number">1.0</span> / mCount) + <span class="number">1</span>;  </div><div class="line">        &#125;<span class="keyword">else</span> &#123;  </div><div class="line">            mParams.count = mCount;  </div><div class="line">            mParams.page = (<span class="keyword">int</span>) Math.ceil((<span class="keyword">double</span>)  </div><div class="line">                    dataList.size()  <span class="number">1.0</span> / mCount) + <span class="number">1</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        accessServer();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">refreshIndexPage</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (index &gt; dataList.size())&#123;  </div><div class="line">            <span class="comment">//如果index超出数组长度则加载下一页  </span></div><div class="line">            loading();  </div><div class="line">        &#125;<span class="keyword">else</span> &#123;  </div><div class="line">            /  </div><div class="line">              注需要根据服务器实际情况来计算  </div><div class="line">              这里假设服务器第一页数据的下标为<span class="number">1</span>  </div><div class="line">              如果下表为<span class="number">0</span>，mPage = index / mCount;  </div><div class="line">             /  </div><div class="line">            mIndex = index;  </div><div class="line">            mPage = index / mCount + <span class="number">1</span>;  </div><div class="line">            <span class="keyword">if</span> (mParams == <span class="keyword">null</span>)&#123;  </div><div class="line">                mParams = (Params) <span class="keyword">new</span> BasePaginationParams();  </div><div class="line">                mParams.count = mCount;  </div><div class="line">                mParams.page = mPage;  </div><div class="line">            &#125;<span class="keyword">else</span> &#123;  </div><div class="line">                mParams.count = mCount;  </div><div class="line">                mParams.page = mPage;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        accessServer();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.mCount = count;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function">Map <span class="title">getParams</span><span class="params">()</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (mParams != <span class="keyword">null</span>)&#123;  </div><div class="line">            LogUtil.d(getClass(), <span class="string">"getParams: "</span> + mParams.toString());  </div><div class="line">            <span class="function"><span class="keyword">return</span> mParams.<span class="title">toMap</span><span class="params">()</span></span>;  </div><div class="line">        &#125;<span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function">IBaseModel <span class="title">getModel</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> baseModel;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accessServer</span><span class="params">()</span> </span>&#123;  </div><div class="line">        baseView.showProgress(<span class="keyword">true</span>);  </div><div class="line">        <span class="comment">/**  </span></div><div class="line">         * 如果上一次请求没有完成，需要取消上次一次请求  </div><div class="line">         *  这样处理是为了防止获取的列表数据出错  </div><div class="line">         */  </div><div class="line">        cancelRequest();  </div><div class="line">        baseModel.sendRequestToServer();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * <span class="doctag">@Method</span>: accessServer  </div><div class="line">     * <span class="doctag">@author</span> create by Tang  </div><div class="line">     * <span class="doctag">@date</span> date 16/10/19 下午3:56  </div><div class="line">     * <span class="doctag">@Description</span>:  </div><div class="line">     * 在获取队列型中数据中弃用该方法，  </div><div class="line">     * 参数通过Refresh(Params params)方法传入  </div><div class="line">     */  </div><div class="line">    <span class="meta">@Deprecated</span>  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accessServer</span><span class="params">(Params params)</span> </span>&#123;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accessSucceed</span><span class="params">(JSONObject response)</span> </span>&#123;  </div><div class="line">        String responseStr = String.valueOf(response);  </div><div class="line">        baseView.showProgress(<span class="keyword">false</span>);  </div><div class="line">        ParameterizedType parameterized = ClassTypeUtil.type(BasePaginationResponse.class  </div><div class="line">                , ClassTypeUtil.type(List.class,clazz));  </div><div class="line">        Type type = $Gson$Types.canonicalize(parameterized);  </div><div class="line">        BasePaginationResponse&lt;List&lt;Bean&gt;&gt; mResponse = <span class="keyword">new</span> Gson().fromJson(responseStr, type);  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (mResponse.errNum == <span class="number">0</span>)&#123;  </div><div class="line">            <span class="keyword">if</span> (mIndex &lt; <span class="number">0</span>)&#123;  </div><div class="line">                dataList.addAll(mResponse.data);  </div><div class="line">                baseView.isNextPage(mResponse.nextPage);  </div><div class="line">            &#125;<span class="keyword">else</span> &#123;  </div><div class="line">                <span class="comment">//计算出需要替换的第一个数据在dataList中的位置  </span></div><div class="line">                <span class="keyword">int</span> start = (mPage - <span class="number">1</span>)  mCount;  </div><div class="line">                ListUtils.replaceAssign(start,dataList,mResponse.data);  </div><div class="line">                mIndex = <span class="number">-1</span>;  </div><div class="line">            &#125;  </div><div class="line">            serverResponse(dataList);  </div><div class="line">        &#125;<span class="keyword">else</span> &#123;  </div><div class="line">            baseView.showServerError(mResponse.errNum,mResponse.errMsg);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">volleyError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc, String ApiInterface)</span> </span>&#123;  </div><div class="line">        baseView.showNetworkError(errorCode,errorDesc,ApiInterface);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span> </span>&#123;  </div><div class="line">        baseModel.cancelRequest();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很简单，在BasePaginationPresenter中IBasePresenter接口实现和BasePresenter中的差不多的，笔者下面对其中的几个方法着重讲解下。</p>
<ol>
<li>accessServer() :这个方法负责通知Model层向服务器发起请求的，因为在获取列表型数据的时候，请求参数由<code>refresh(Params params)</code>传入，所以可以看到accessServer(Params params) 已经被弃用了。</li>
<li>refresh(Params params)：这个方法是刷新列表数据的，实际向服务器发起获取数据请求的还是loading方法。dataList是用来存储已获取数据的，在调用此方法钱需要调用List的clear()方法清空缓存。</li>
<li>loading()：加载数据方法，通知Model层向服务器发起加载数据请求。该方法实现了自动计算分页数据。</li>
<li>refreshIndexPage(): 局部刷新方法，通过传入待刷新的数据项的位置计算出待刷新页面后，调用<code>accessServer ()</code>方法刷新具体页面。</li>
<li>setCount(int count): 设置一次获取数据量，count有个默认值。如果需要重设该值的话，可以调用该方法设置。该方法在presenter中只能调用一次（调用多次会出现获取数据错误）。</li>
</ol>
<h3 id="IMvpListView"><a href="#IMvpListView" class="headerlink" title="IMvpListView"></a>IMvpListView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMvpListView</span> <span class="keyword">extends</span> <span class="title">IBaseMvpView</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * <span class="doctag">@Method</span>: isNextPage  </div><div class="line">     * <span class="doctag">@author</span> create by Tang  </div><div class="line">     * <span class="doctag">@date</span> date 16/10/20 下午5:56  </div><div class="line">     * <span class="doctag">@Description</span>: 设置列表数据  </div><div class="line">     * <span class="doctag">@param</span> nextPage 是否有下一页，大于0为有  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isNextPage</span><span class="params">(<span class="keyword">int</span> nextPage)</span></span>;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口是针对于列表型数据设计的一个View接口，增加了一个isNextPage(int nextPage)方法。主要功能是用于判断是否还有下一页的，具体需要根据业务来设计该方法。该方法的主要作用时用于在使用上拉加载前的一个判断。如果服务器还有未加载完的数据，则在view层开启上拉加载功能，否则则关闭上拉加载功能。</p>
<h3 id="本节小结"><a href="#本节小结" class="headerlink" title="本节小结"></a>本节小结</h3><p>由于有上一篇的 铺垫，所以对BasePaginationPresenter的介绍就到这里了。下面我们来看一下具体的实现例子。</p>
<h2 id="实际使用例子"><a href="#实际使用例子" class="headerlink" title="实际使用例子"></a>实际使用例子</h2><p>在这里，笔者使用的是百度api store上的接口来进行测试的。由于百度api store上的接口的设计都有一定的区别，所以读者在使用框架的时候要根据实际情况来使用。如果有问题的话，可以在blog下方留言，笔者我尽量解答提出的问题的。在实际使用中主要需要注意的是：BaseResponse 和 BasePaginationResponse这两个数据解析类。<br>笔者在测试百度接口的时候发现，百度的接口实际上是不支持POST请求的。所以我们只能按照百度的方法在接口路径上带上传递的参数用GET方法发起请求。<br>准备工作：<br>申请一个百度api的key，然后在volley的getHeaders() 方法中设置请求头。如下所示<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override  </div><div class="line"><span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; getHeaders() throws AuthFailureError &#123;  </div><div class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; <span class="keyword">header</span> = <span class="literal">new</span> HashMap&lt;&gt;();  </div><div class="line">    <span class="comment">//设置百度api store请求头  </span></div><div class="line">    <span class="keyword">header</span>.put(<span class="string">"apikey"</span>,<span class="string">""</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">header</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>嗯，没错，笔者发现apikey为空的话，并不影响接口的使用。所以让它空着好了。</p>
<p>百度api的服务器地址是<code>&quot;http://apis.baidu.com</code></p>
<h3 id="百度天气接口"><a href="#百度天气接口" class="headerlink" title="百度天气接口"></a>百度天气接口</h3><p>这个接口是一个根据城市名称来查询该城市天气的接口。<br>接口的定义为：<br><code>public static final String WEATER = &quot;/apistore/weatherservice/cityname?cityname=北京&quot;;</code></p>
<h4 id="IWeatherView"><a href="#IWeatherView" class="headerlink" title="IWeatherView"></a>IWeatherView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWeatherView</span> <span class="keyword">extends</span> <span class="title">IMvpView</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showWeatherView</span><span class="params">(WeatherBean data)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IWeatherView只有一个showWeatherView()方法，它的作用是把Presenter处理好的数据传递到View层。</p>
<h4 id="WeatherBean"><a href="#WeatherBean" class="headerlink" title="WeatherBean"></a>WeatherBean</h4><p>天气实体类</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> WeatherBean &#123;  </div><div class="line">  </div><div class="line">    <span class="comment">//城市  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> city;  </div><div class="line">    <span class="comment">//城市拼音  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> pinyin;  </div><div class="line">    <span class="comment">//城市编码  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> citycode;  </div><div class="line">    <span class="comment">//日期  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> date;  </div><div class="line">    <span class="comment">//发布时间  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> time;  </div><div class="line">    <span class="comment">//邮编  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> postCode;  </div><div class="line">    <span class="comment">//经度  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> longitude;  </div><div class="line">    <span class="comment">//维度  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> latitude;  </div><div class="line">    <span class="comment">//海拔  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> altitude;  </div><div class="line">    <span class="comment">//天气情况  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> weather;  </div><div class="line">    <span class="comment">//气温  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> temp;  </div><div class="line">    <span class="comment">//最低气温  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> l_tmp;  </div><div class="line">    <span class="comment">//最高气温  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> h_tmp;  </div><div class="line">    <span class="comment">//风向  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> WD;  </div><div class="line">    <span class="comment">//风力  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> WS;  </div><div class="line">    <span class="comment">//日出时间  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> sunrise;  </div><div class="line">    <span class="comment">//日落时间  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> sunset;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="WeatherPresenter"><a href="#WeatherPresenter" class="headerlink" title="WeatherPresenter"></a>WeatherPresenter</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WeatherPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter&lt;WeatherParams</span>,<span class="title">WeatherBean&gt;</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="type">IWeatherView</span> weatherView;  </div><div class="line">  </div><div class="line">    public <span class="type">WeatherPresenter</span>(<span class="type">IWeatherView</span> weatherView) &#123;  </div><div class="line">        <span class="keyword">super</span>(weatherView,<span class="type">WeatherBean</span>.<span class="keyword">class</span>);  </div><div class="line">        <span class="keyword">this</span>.weatherView = weatherView;  </div><div class="line">        getModel().setApiInterface(<span class="type">ApiInterface</span>.<span class="type">WEATER</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    public void serverResponse(<span class="type">WeatherBean</span> data) &#123;  </div><div class="line">        weatherView.showWeatherView(data);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到WeatherPresenter的实现十分简单，按照前面我们的理论，只需要写完WeatherPresenter就可以实现获取北京的天气数据了。下面我们来测试一下。</p>
<h4 id="在Activity中使用WeatherPresenter"><a href="#在Activity中使用WeatherPresenter" class="headerlink" title="在Activity中使用WeatherPresenter"></a>在Activity中使用WeatherPresenter</h4><p>首先在需要的Activity （View层）中实现IWeatherView接口：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="title">implements</span> <span class="title">IWeatherView</span></span>&#123;  </div><div class="line">   <span class="meta">@Override</span>  </div><div class="line">   public void showWeatherView(<span class="type">WeatherBean</span> data) &#123;  </div><div class="line">       <span class="type">Toast</span>.makeText(<span class="keyword">this</span>,data.weather,<span class="type">Toast</span>.<span class="type">LENGTHSHORT</span>).show();  </div><div class="line">        &#125;  </div><div class="line">&#125;`</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>接口的实现很简单，只是通过Toast简单地把天气情况显示出来。</p>
<p>下面我们来看看WeatherPresenter的使用：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">WeatherPresenter weatherPresenter = <span class="keyword">new</span> WeatherPresenter(<span class="keyword">this</span>);  </div><div class="line">weatherBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">    @<span class="function">Override  </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(<span class="params">View v</span>) &#123;  </div><div class="line">        WeatherParams <span class="keyword">params</span> = <span class="keyword">new</span> WeatherParams();  </div><div class="line">        <span class="keyword">params</span>.cityname = <span class="string">"北京"</span>;  </div><div class="line">        weatherPresenter.accessServer(<span class="keyword">params</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们来看看测试的结果：</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_weather.png" alt="" title="图解"></p>
<p>这里需要注意的一点是，由于百度的API是不支持POST请求的，所以当我们在使用百度的API时需要按照百度提供的方法用GET请求调用接口，所以上面例子中的WeatherParams参数是无效的。这里这样写只是为了让读者知道如果接口支持POST请求的话，可以用这种方法向服务器发起请求，这种方法更加灵活易用。</p>
<h3 id="百度糯米分类接口"><a href="#百度糯米分类接口" class="headerlink" title="百度糯米分类接口"></a>百度糯米分类接口</h3><p>这是百度api store提供的一个用来获6取百度糯米分类的一个接口（在api store上面找不到了，但是还能用）。</p>
<p>接口地址：<code>public static final String NUO_MI_CATEGOR = &quot;/baidunuomi/openapi/categories&quot;;</code></p>
<h4 id="INuoMiCategoryListView"><a href="#INuoMiCategoryListView" class="headerlink" title="INuoMiCategoryListView"></a>INuoMiCategoryListView</h4><figure class="highlight plain"><figcaption><span>interface INuoMiCategoryListView extends IMvpListView &#123;  </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">    void showNuoMiCategoryView(List&lt;NuoMiCategoryBean&gt; nuoMiCategoryList);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>INuoMiCategoryListView接口也比较简单，只是负责把回调的列表传递到View层中。（这里的业务逻辑比较简单，所以没有经过任何处理就传递到view层。具体需要根据实际情况来处理，可以定义多个方法）。</p>
<h4 id="NuoMiCategoryPresenter"><a href="#NuoMiCategoryPresenter" class="headerlink" title="NuoMiCategoryPresenter"></a>NuoMiCategoryPresenter</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NuoMiCategoryPresenter</span> <span class="keyword">extends</span> <span class="title">BasePaginationPresenter&lt;BasePaginationParams</span>,<span class="title">NuoMiCategoryBean&gt;</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="type">INuoMiCategoryListView</span> nuoMiCategoryView;  </div><div class="line">  </div><div class="line">    public <span class="type">NuoMiCategoryPresenter</span>(<span class="type">INuoMiCategoryListView</span> nuoMiCategoryView) &#123;  </div><div class="line">        <span class="keyword">super</span>(nuoMiCategoryView,<span class="type">NuoMiCategoryBean</span>.<span class="keyword">class</span>);  </div><div class="line">        <span class="keyword">this</span>.nuoMiCategoryView = nuoMiCategoryView;  </div><div class="line">        getModel().setApiInterface(<span class="type">NUOMICATEGOR</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    public void serverResponse(<span class="type">List</span>&lt;<span class="type">NuoMiCategoryBean</span>&gt; list) &#123;  </div><div class="line">        nuoMiCategoryView.showNuoMiCategoryView(list);  </div><div class="line">    &#125;  </div><div class="line">&#125;`</div><div class="line">`</div></pre></td></tr></table></figure>
<p>可以看到NuoMiCategoryPresenter的实现也很简单，按照前面的理论，我们通过NuoMiCategoryPresenter就可以处理列表数据的刷新，加载下一页等功能了。由于百度糯米的分类接口只有一页的，所以我们这里不对加载下一页数据进行任何的讨论了。下面我们来看看NuoMiCategoryPresenter的具体使用。</p>
<h4 id="在Activity中使用NuoMiCategoryPresenter"><a href="#在Activity中使用NuoMiCategoryPresenter" class="headerlink" title="在Activity中使用NuoMiCategoryPresenter"></a>在Activity中使用NuoMiCategoryPresenter</h4><p>首先需要在Activity（View层）中实现INuoMiCategoryView接口<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">Override</span>  </div><div class="line">public void showNuoMiCategoryView(List&lt;NuoMiCategoryBean&gt; nuoMiCategoryList) &#123;  </div><div class="line">    <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(<span class="selector-tag">this</span>,"第一个分类名称 : "  </div><div class="line">            + <span class="selector-tag">nuoMiCategoryList</span><span class="selector-class">.get</span>(0)<span class="selector-class">.catname</span>,<span class="selector-tag">Toast</span><span class="selector-class">.LENGTHSHORT</span>)<span class="selector-class">.show</span>();  </div><div class="line">&#125;`</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>在这里为了简便，showNuoMiCategoryView(List\<nuomicategorybean\> nuoMiCategoryList)方法中用Toast显示第一个分类的名称。</nuomicategorybean\></p>
<p>实现了INuoMiCategoryView接口后，我们来尝试下在Activity中使用NuoMiCategoryPresenter来获取分类数据。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">nuoMiCategoryPresenter = <span class="keyword">new</span> NuoMiCategoryPresenter(<span class="keyword">this</span>);  </div><div class="line">nuoMiCategoryBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">        nuoMiCategoryPresenter.accessServer();  </div><div class="line">    &#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们来看看使用的结果:</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_nuomi_category.png" alt="" title="图解"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本章就介绍道这里了，相信细心的同学可以发现用于回调数据的View层接口都是继承了IBaseMvpView接口，而View层里面还有三个方法（进度条和错误处理）。如果我们不对这几个方法的的处理进行封装的话，那么每个实现了回调数据的IView接口的View都需要手动再对这三个方法实现一遍。所以后面的文章我会讲解如何通过设计BaseActivity、BaseListActivity（fragment）实现一些基本事件的封装。从而优化工程，进一步减少我们要写的代码。<br>项目代码的地址是：<a href="https://github.com/DobbyTang/mvp-android-framework" target="_blank" rel="external">https://github.com/DobbyTang/mvp-android-framework</a>。上一章和这一章的测试demo都是在MainActivity中实现的，下一章会对项目的目录作一个详细的解析。有兴趣的同学欢迎光关注该项目，因为笔者的文笔比较差，所以文章进度会大大落后于项目进度。项目中关于Activity、 Fragmen基类已经完成了，大家可以先自行查看。如果有不懂的地方，请关注blog，笔者会尽快更新下一章的。<br>彩蛋：在这个系列结束的时候，笔者会用这个框架实现一个小小的APP，功能不会太复杂，但是会尽量囊括笔者在这系列文章中介绍的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;/em&gt;  在&lt;a href=&quot;http://tangpj.com/2016/10/15/mvp-structure-two/&quot; title=&quot;上一篇文章&quot;&gt;上一篇文章&lt;/a&gt;中我们讨论了关于如何对普通的数据请求进行封装，对MVP模式进行优化。而在实际项目中，除了普通的数据外，一般我们还有列表型的数据，列表型的数据和普通的数据的主要区别是：列表型的数据需要分页获取。在实际项目中，我们一般获取分页型的数据时需要向服务器发送页码和一页的数据条数这两个数据。我们可以通过对列表型的Presenter进行封装，把大部分列表型数据需要处理的时间自动处理好。&lt;/p&gt;
    
    </summary>
    
      <category term="Android架构" scheme="http://www.tangpj.com/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MVP开发框架" scheme="http://www.tangpj.com/tags/MVP%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android架构篇——从零开始搭建一个完善的MVP开发框架（二），通过泛型和抽象，简化MVP框架。</title>
    <link href="http://www.tangpj.com/2016/10/15/mvp-structure-two/"/>
    <id>http://www.tangpj.com/2016/10/15/mvp-structure-two/</id>
    <published>2016-10-14T18:20:48.000Z</published>
    <updated>2016-10-23T14:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原创声明： 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>摘要：</em> 在<a href="http://tangpj.com/2016/09/23/mvp-structure-one/" title="上一篇文章" target="_blank" rel="external">上一篇文章</a>中，我们学习了关于MVP模式的简单使用方法。相信很多（实际上只有几个－－）读者看完文章后都会产生一个疑问：按照这个方法使用MVP模式进行开发的话，代码量是不是会大大增加？答案是对的，如果这样简单地使用MVP模式的话代码的确会大大增加。每个网络请求（数据库）都会由原来的MV模式的一个Model类文件变成4个类文件，分别是：IModel、Model、IPresenter、Presenter。所以简单的使用MVP模式进行开发带来的优点是逻辑清晰、代码间的耦合度大大下降，但是会带来一个很严重的问题就是代码量增加。作为一个懒人，要写这么多功能类似的代码实在是一种煎熬。所以在这一篇我会来探讨下如何优化MVP模式的结构来解决一个问题。</p>
<a id="more"></a>
<h2 id="使用MVP模式开发时遇到的难题"><a href="#使用MVP模式开发时遇到的难题" class="headerlink" title="使用MVP模式开发时遇到的难题"></a>使用MVP模式开发时遇到的难题</h2><p>如果你使用过MVP模式进行过实际开发的话（很多程序员在使用MVP模式进行开发的时候，都是使用上一篇文章中所介绍的方式）应该会发现，事实上每个功能块的代码都是类似的，只是细节上会有所不同。作为一个优秀的程序员，在这个时候，一般会把一些相同的功能块抽象成一个基类。例如显示通知View层显示( 隐藏 )进度条、网络错误处理、服务器拒绝请求返回的错误处理等，笔者在刚使用MVP模式时也是这样做的。但是随着项目的进行，很快就会发现，类文件量、代码量仍然会增加得很快，随之带来的问题是项目的管理会变得越来越复杂（这也和笔者的项目结构有关）。所以我认为，在使用MVP模式的时候，能解决这个问题的话，会大大提高我们的工作效率。</p>
<h2 id="分析简单的网络请求模块"><a href="#分析简单的网络请求模块" class="headerlink" title="分析简单的网络请求模块"></a>分析简单的网络请求模块</h2><p>在项目的时候，使用MVP模式最多的地方应该就是网络请求了。我们可以分析下世纪开发中简单的网络请求M、V、P三层各有什么特点。</p>
<h3 id="Model层："><a href="#Model层：" class="headerlink" title="Model层："></a>Model层：</h3><p>这一层主要就是负责向数据源( 一般为服务器/数据库，下同)发起获取数据请求，并且把获取的数据或者错误信息回调给持有的Presenter。除了发起请求功能外，一般我们还需要一个取消请求的方法。<br>所以Model层主要的功能是:</p>
<ol>
<li>向数据源发起请求；</li>
<li>取消该请求；</li>
<li>通知Presenter处理结果。</li>
</ol>
<h3 id="Presenter层："><a href="#Presenter层：" class="headerlink" title="Presenter层："></a>Presenter层：</h3><p>这层主要负责通知Model层向服务器发起请求并接收Model层回调的数据或者错误信息，并且这一层还要负责把数据或者错误信息处理后回调到View层，由View层负责显示。<br>一般在网络请求中的错误信息分为两种，一种是网络设备的网络状态错误，无法发送请求；另外一种是服务器拒绝了这次请求。所以Presenter的主要功能是：</p>
<ol>
<li>通知Model层向服务器发起请求；</li>
<li>接收Model层返回的数据（服务器可能返回数据或者拒绝服务信息）；</li>
<li>接收Model层返回的网络错误信息；</li>
<li>通知Model层取消这次请求；</li>
<li>通知View接收处理后的数据。</li>
</ol>
<h3 id="View层："><a href="#View层：" class="headerlink" title="View层："></a>View层：</h3><p>在<a href="http://tangpj.com/2016/09/23/mvp-structure-one/" title="上一篇文章" target="_blank" rel="external">上一篇文章</a>介绍过，在MVP模式中，View层是一个接口。它的首要任务是把Presenter处理后的数据传到具体的原生控件中显示，并且控制是否显示加载进度条。<br>所以View层的主要功能是：</p>
<ol>
<li>显示／隐藏进度条。</li>
<li>接收Presenter处理后的正确数据。</li>
<li>接收Presenter返回的网络错误信息。</li>
<li>接收Presenter返回的服务器拒绝服务信息。</li>
</ol>
<p>一个普通的网络请求的M、V、P各层主要负责的功能大致就是这么多。那么我们如何通过上述的特点简化MVP的结构呢？下面我们来分析一下。</p>
<h2 id="如何优化MVP模式的结构"><a href="#如何优化MVP模式的结构" class="headerlink" title="如何优化MVP模式的结构"></a>如何优化MVP模式的结构</h2><h3 id="优化Model层"><a href="#优化Model层" class="headerlink" title="优化Model层"></a>优化Model层</h3><p>根据上面的分析我们知道了Model层主要承担的功能。在这里为了简便，以Volley网络框架处理网络请求。而关于Volley框架的使用方法读者可以上网查询，在这里不作过多的描述。</p>
<p>我们知道，发起网络请求一般需要传入请求地址、请求方式、请求参数这三个参数。其中请求参数是可为空的，下面我们来看看用Volley框架实现的一个登陆的代码。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span></span>&#123;  </div><div class="line">    LoginRequest loginRequest = <span class="keyword">new</span> LoginRequest();  </div><div class="line">    loginRequest.userName = userName;  </div><div class="line">    loginRequest.password = password;  </div><div class="line">    myJsonRequest = <span class="keyword">new</span> MyJsonRequest(Request.Method.POST  </div><div class="line">            , ServerConst.getServerUrl(ApiInterface.LOGIN),loginRequest.toMap()  </div><div class="line">            , <span class="keyword">new</span> Response.Listener&lt;JSONObject&gt;() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;  </div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line">                LoginResponse loginResponse = <span class="keyword">new</span> LoginResponse(context);  </div><div class="line">                LogHelper.d(getClass(), <span class="string">"onResponse: "</span>+response);  </div><div class="line">                loginResponse.fromJson(response);  </div><div class="line">                loginPresenter.loginSucceed(loginResponse);  </div><div class="line">            &#125; <span class="keyword">catch</span> (JSONException e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">    &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError <span class="keyword">error</span>)</span> </span>&#123;  </div><div class="line">            loginPresenter.volleyError(ErrorCode.VOLLEYERROR  </div><div class="line">                    , ErrorDesc.VOLLEYERRORDESC,ApiInterface.LOGIN);  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">    SingletonRequestQueue.getInstance(MedicalAPP.getInstance()).addRequestQueue(myJsonRequest);  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码中，笔者自定义了一个Volley的Request。这个Request的作用是，向服务器提交Map类型的参数，然后服务器返回的类型为Json类型的，读者可以根据自己的需要进行定义。关于LoginParams.toMap()方法读者可以参考：<a href="http://tangpj.com/2016/08/28/bean_to_map/" title="Android(Java)Bean自动转换为map的方法" target="_blank" rel="external">Android(Java)Bean自动转为map的方法</a>这篇文章，这个方法的作用时自动把参数实体类转化为Map类型的数据。<br>接下来要放大招了。如果按照上面的方法来实现Model层的话的话，那么我们每个请求都需要有一个Model类文件，但是Model实际上负责的功能是非常简单的。所以有没有可能把所有关于网络请求的Model全部干掉，封装成一个BaseModel呢？答案是可以的，下面笔者来分析下具体的方案。</p>
<p>我们先来看看IBaseModel接口的代码</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBaseModel</span> &#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendRequestToServer</span>(<span class="params"></span>)</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setApiInterface</span>(<span class="params">String apiInterface</span>)</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMethod</span>(<span class="params"><span class="keyword">int</span> method</span>)</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelRequest</span>(<span class="params"></span>)</span>;  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="对请求方式与接口地址的处理"><a href="#对请求方式与接口地址的处理" class="headerlink" title="对请求方式与接口地址的处理"></a>对请求方式与接口地址的处理</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> int <span class="function"><span class="keyword">method</span> = <span class="title">Request</span>.<span class="title">Method</span>.<span class="title">GET</span>;</span>       <span class="comment">//请求方式，默认get  </span></div><div class="line"><span class="keyword">private</span> String apiInterface;  </div><div class="line">  </div><div class="line">@<span class="keyword">Override</span>  </div><div class="line"><span class="keyword">public</span> void setMethod(int <span class="function"><span class="keyword">method</span> )<span class="comment">&#123;  </span></span></div><div class="line">    this.method = method;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">@<span class="title">Override</span>  </div><div class="line"><span class="title">public</span> <span class="title">void</span> <span class="title">setApiInterface</span><span class="params">(String apiInterface)</span><span class="comment">&#123;  </span></div><div class="line">    this.apiInterface = apiInterface;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个处理方式十分简单，在Presenter的构造方法中调用这两个方法设置下这两个变量就可以了。如果为Get方式的话，可以不作处理。</p>
<h4 id="对发起请求方法的处理"><a href="#对发起请求方法的处理" class="headerlink" title="对发起请求方法的处理"></a>对发起请求方法的处理</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">sendRequestToServer</span><span class="params">()</span> </span>&#123;  </div><div class="line">  </div><div class="line">    request = <span class="keyword">new</span> MyVolleyRequest(method, ServerManager.getServerUrl(apiInterface)  </div><div class="line">            , basePresenter.getParams()  </div><div class="line">            , <span class="keyword">new</span> Response.Listener&lt;JSONObject&gt;() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;  </div><div class="line">            basePresenter.accessSucceed(response);  </div><div class="line">        &#125;  </div><div class="line">    &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError <span class="keyword">error</span>)</span> </span>&#123;  </div><div class="line">            basePresenter.volleyError(VOLLEYERROR  </div><div class="line">                    , VOLLEYERRORDESC,apiInterface);  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">    SingletonRequestQueue.getInstance(MyApp.getInstance()).addRequestQueue(request);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到，这个BaseModel中的发起请求的方法和上面的LoginModel的很类似，其中的主要区别有五点：</p>
<ol>
<li>接口的地址和请求的方式为动态设置的；</li>
<li>sendRequestToServer方法不带任何参数；</li>
<li>把参数请求交给BasePresenter层处理；</li>
<li>把服务器返回的数据交给BasePresenter层处理；</li>
<li>把网络连接错误交给BasePresenter层处理。</li>
</ol>
<p>通过上述方法，我们已经把所有网络请求相关的Model封装成一个BaseModel了。其中需要重点处理的问题只有一个，那就是请求参数。因为在Model中请求参数是不确定的，请求参数的具体处理方法会在Presenter中介绍。</p>
<h3 id="优化View层"><a href="#优化View层" class="headerlink" title="优化View层"></a>优化View层</h3><p>在这里笔者把一些基本的处理都封装了一个IBaseView接口，下面看看IBaseView接口的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseView</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showProcess</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> show)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showVolleyError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc, String ApiInterface)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showServerError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单，这里就不作更多解释了。</p>
<h3 id="优化Presenter层"><a href="#优化Presenter层" class="headerlink" title="优化Presenter层"></a>优化Presenter层</h3><p>在MVP模式中，Presenter层是逻辑控制层。我们在优化这一层的时候，不能像Model层这样，把其它全部的Presenter都封装好。这里的原因有几点：</p>
<ol>
<li>如果把Presenter封装成BasePresenter层的话就会失去MVP模式的优势，这样会导致部分业务逻辑必须在View层中处理，和MVP模式的思想冲突。</li>
<li>Presenter层作为逻辑层，必须要处理View层的交互逻辑和Model层返回的数据。</li>
<li>如果把Presenter封装成一个Base类的话，那么我们实际上时没办法复用同一个功能模块的，每次都需要在View层中处理。</li>
</ol>
<p>那么为什么Model层可以做这样的处理呢？在这里我的理解是，Model层的作用只是通知服务器获取数据，并且把产生的错误或回传的数据发送给Presenter层。在这里Model层只是充当于一个请求的发起者和数据的转发者，所有的Model功能都是类似的，所以在这里我把Model层封装成了一个BaseModel类。</p>
<h4 id="IBasePresenter接口"><a href="#IBasePresenter接口" class="headerlink" title="IBasePresenter接口"></a>IBasePresenter接口</h4><p>具体代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBasePresenter</span>&lt;<span class="title">P</span>&gt; </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accessServer</span><span class="params">(P params)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accessSucceed</span><span class="params">(JSONObject response)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">Map <span class="title">getParams</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function">IBaseModel <span class="title">getModel</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">volleyError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc, String ApiInterface)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法说明：</p>
<ol>
<li><p>void accessServer(P params)：这个方法主要是在View层中调用，通过该方法通知Model层向服务器发起请求，params可为空。</p>
</li>
<li><p>void accessSucceed(JSONObject response)：这个方法在Model层中调用，通过该方法把服务器返回的数据传递给Presenter层处理。</p>
</li>
<li><p>Map getParams()：该方法在Model层中调用，Model层通过该方法获取Presenter处理好的参数。</p>
</li>
<li><p>IBaseModel getModel()：该方法主要在子类中调用，用于获取Model对象。</p>
</li>
<li><p>void cancelRequest()： 该方法在View层中调用，作用时通知Model层取消请求。</p>
</li>
<li><p>void volleyError(int errorCode, String errorDesc, String ApiInterface)：当产生网络错误时，Model层就会调用该方法。</p>
</li>
</ol>
<h4 id="BasePresenter实现"><a href="#BasePresenter实现" class="headerlink" title="BasePresenter实现"></a>BasePresenter实现</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> * <span class="doctag">@ClassName</span>: BasePresenter  </div><div class="line"> * <span class="doctag">@author</span> create by Tang  </div><div class="line"> * <span class="doctag">@date</span> date 16/9/29 下午2:14  </div><div class="line"> * <span class="doctag">@Description</span>: 普通presenter基类  </div><div class="line"> * <span class="doctag">@Params</span>: 提交参数类  </div><div class="line"> * <span class="doctag">@Data</span>: 服务器返回数据  </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">Params</span> <span class="keyword">extends</span> <span class="title">BaseParams</span>,<span class="title">Data</span>&gt;  </span></div><div class="line">        <span class="keyword">implements</span> <span class="title">IBasePresenter</span>&lt;<span class="title">Params</span>&gt; &#123;  </div><div class="line">  </div><div class="line">     <span class="comment">/**  </span></div><div class="line">       * <span class="doctag">@Method</span>: serverResponse(Data data)  </div><div class="line">       * <span class="doctag">@author</span> create by Tang  </div><div class="line">       * <span class="doctag">@date</span> 16/10/15 上午1:19  </div><div class="line">       * <span class="doctag">@Description</span>:  </div><div class="line">       * 如果返回的data为null,则代表该接口没有数据返回  </div><div class="line">       * 有数据返回必须调用在子类中调用BasePresenter(IBaseView baseView,Class&lt;Data&gt; clazz)构造方法  </div><div class="line">       */  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">void</span> <span class="title">serverResponse</span><span class="params">(Data data)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> IBaseModel baseModel;  </div><div class="line">    <span class="keyword">private</span> IBaseView baseView;  </div><div class="line">    <span class="keyword">private</span> Params params;  </div><div class="line">    <span class="keyword">private</span> Class&lt;Data&gt; clazz;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * <span class="doctag">@Method</span>: BasePresenter  </div><div class="line">     * <span class="doctag">@author</span> create by Tang  </div><div class="line">     * <span class="doctag">@date</span> date 16/10/14 下午5:32  </div><div class="line">     * <span class="doctag">@Description</span>: BaseResponse中Data为空使用该构造方法  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasePresenter</span><span class="params">(IBaseView baseView)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.baseView = baseView;  </div><div class="line">        <span class="keyword">this</span>.baseModel = <span class="keyword">new</span> BaseVolleyModel(<span class="keyword">this</span>) ;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * <span class="doctag">@Method</span>: BasePresenter  </div><div class="line">     * <span class="doctag">@author</span> create by Tang  </div><div class="line">     * <span class="doctag">@date</span> date 16/10/14 下午5:32  </div><div class="line">     * <span class="doctag">@Description</span>: BaseResponse中Data不为空使用该构造方法  </div><div class="line">     * <span class="doctag">@param</span> clazz 数据的类型  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasePresenter</span><span class="params">(IBaseView baseView,Class&lt;Data&gt; clazz)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.baseView = baseView;  </div><div class="line">        <span class="keyword">this</span>.baseModel = <span class="keyword">new</span> BaseVolleyModel(<span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">this</span>.clazz = clazz;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function">Map <span class="title">getParams</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span>)&#123;  </div><div class="line">            <span class="function"><span class="keyword">return</span> params.<span class="title">toMap</span><span class="params">()</span></span>;  </div><div class="line">        &#125;<span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function">IBaseModel <span class="title">getModel</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> baseModel;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accessServer</span><span class="params">(Params params)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.params = params;  </div><div class="line">        baseView.showProcess(<span class="keyword">true</span>);  </div><div class="line">        baseModel.sendRequestToServer();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accessSucceed</span><span class="params">(JSONObject response)</span> </span>&#123;  </div><div class="line">        baseView.showProcess(<span class="keyword">false</span>);  </div><div class="line">        Gson gson = <span class="keyword">new</span> Gson();  </div><div class="line">        BaseResponse mResponse = gson.fromJson(String.valueOf(response)  </div><div class="line">                ,<span class="keyword">new</span> TypeToken&lt;BaseResponse&gt;() &#123;&#125;.getType());  </div><div class="line">        <span class="comment">/**  </span></div><div class="line">         * 在实际设计系统的时候，通过状态码来判断服务器是否正确响应  </div><div class="line">         * 如果响应错误，可以在这里直接通知view层错误情况  </div><div class="line">         * 以下为根据百度api的数据格式设计的回调处理  </div><div class="line">         * errorNum = 0 时，响应成功  </div><div class="line">         */  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (mResponse.errNum == <span class="number">0</span>)&#123;  </div><div class="line">            <span class="keyword">if</span> (mResponse.data == <span class="keyword">null</span> || clazz == <span class="keyword">null</span>)&#123;  </div><div class="line">                serverResponse(<span class="keyword">null</span>);  </div><div class="line">            &#125;<span class="keyword">else</span> &#123;  </div><div class="line">                serverResponse(gson.fromJson(mResponse.data,clazz));  </div><div class="line">            &#125;  </div><div class="line">        &#125;<span class="keyword">else</span> &#123;  </div><div class="line">            baseView.showServerError(mResponse.errNum,mResponse.errMsg);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">volleyError</span><span class="params">(<span class="keyword">int</span> errorCode, String errorDesc, String apiInterface)</span> </span>&#123;  </div><div class="line">        baseView.showVolleyError(errorCode,errorDesc,apiInterface);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">cancelRequest</span><span class="params">()</span> </span>&#123;  </div><div class="line">        baseModel.cancelRequest();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面代码可以看出<code>BasePresenter&lt;Params extends BaseParams,Data&gt;</code>是一个使用了泛型抽象类，泛型P: 发送的参数类。D: 处理后的数据,D在这里一般对应为<code>BaseResponse</code>中的data。通过BasePresenter的代码可以看出,BasePresenter处理View层和Model层中的大部分逻辑。我们只需要在子类中实现 void serverResponse(D data)方法就可以了。<br>这里我们要注意下accessSucceed(JSONObject response) 方法。在这个方法中，笔者希望实现的功能是能够如果服务器返回错误信息，BasePresenter能够直接通知View层，如果返回正确信息则返回解析后的数据然后在子类中处理，实现这个功能需要设计一个BaseResponse类。</p>
<h4 id="通过使用BaseResponse实现数据自动解析"><a href="#通过使用BaseResponse实现数据自动解析" class="headerlink" title="通过使用BaseResponse实现数据自动解析"></a>通过使用BaseResponse实现数据自动解析</h4><p>下面是笔者一开始设计的BaseResponse\<data\>类的代码:</data\></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResponse</span>&lt;<span class="type">Data</span>&gt;</span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@SerializedName(value = <span class="meta-string">"errNum"</span>,alternate = &#123;<span class="meta-string">"status"</span>,<span class="meta-string">"errno"</span>&#125;)</span>  </div><div class="line">    <span class="keyword">public</span> int errNum;  </div><div class="line">  </div><div class="line">    <span class="meta">@SerializedName(value = <span class="meta-string">"errMsg"</span>,alternate = &#123;<span class="meta-string">"msg"</span>&#125;)</span>  </div><div class="line">    <span class="keyword">public</span> String errMsg;  </div><div class="line">  </div><div class="line">    /  </div><div class="line">      <span class="meta">@author</span> create <span class="keyword">by</span> Tang  </div><div class="line">      <span class="meta">@date</span> date <span class="number">16</span>/<span class="number">10</span>/<span class="number">12</span> 下午<span class="number">4</span>:<span class="number">18</span>  </div><div class="line">      <span class="meta">@Description</span>: 兼容不同的情况  </div><div class="line">      <span class="meta">@restData</span>: 百度api,天气<span class="keyword">data</span>  </div><div class="line">     /  </div><div class="line">    <span class="meta">@SerializedName(value = <span class="meta-string">"data"</span>,alternate = &#123;<span class="meta-string">"retData"</span>,<span class="meta-string">"categories"</span>,<span class="meta-string">"shop"</span>&#125;)</span>  </div><div class="line">    <span class="keyword">public</span> Data <span class="keyword">data</span>;  </div><div class="line">  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这里的Data是一个泛型，但是在实际使用的过程中存一个很严重的问题，就是泛型擦除的问题。如果采用这种设计，我们使用Gson解析数据的方法是：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BaseResponse </span>mResponse = gson.fromJson(<span class="keyword">String.valueOf(response) </span> </div><div class="line">        ,new TypeToken&lt;<span class="keyword">BaseResponse&lt;Data&gt;&gt;() </span>&#123;&#125;.getType())<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>如果BaseResponse采用上面的设计的话，在编译的过程中Data泛型会被擦除。这样就导致一个后果就是Gson无法解析Data中的数据。Data中的数据最终会被解析成LinkedTreeMap类型，无法解析成我们需要的Data类型。所以我们需要采用其它的方法实现自动解析返回数据的功能。</p>
<p>新增一个构造方法，这个构造方法增加了一个Class<data>类型参数。</data></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> BasePresenter(IBaseView baseView,Class&lt;Data&gt; clazz)&#123;  </div><div class="line">    <span class="keyword">this</span>.baseView = baseView;  </div><div class="line">    <span class="keyword">this</span>.baseModel = new BaseVolleyModel(<span class="keyword">this</span>);  </div><div class="line">    <span class="keyword">this</span>.clazz = clazz;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在方法中accessSucceed(JSONObject response)进行解析<br>accessSucceed(JSONObject response)方法的实现如下：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="literal">void</span> accessSucceed(JSONObject response) &#123;</div><div class="line">    baseView.showProcess(<span class="literal">false</span>);</div><div class="line">    Gson gson = <span class="literal">new</span> Gson();</div><div class="line">    BaseResponse&lt;<span class="built_in">Data</span>&gt; mResponse;</div><div class="line">    <span class="keyword">if</span>(clazz != <span class="built_in">null</span>)&#123;</div><div class="line">        ParameterizedType parameterized = ClassTypeUtil.<span class="keyword">type</span>(BaseResponse.class, clazz);</div><div class="line">        <span class="keyword">Type</span> <span class="keyword">type</span> = $Gson$Types.canonicalize(parameterized);</div><div class="line">        mResponse = gson.fromJson(<span class="built_in">String</span>.valueOf(response), <span class="keyword">type</span>);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        mResponse = gson.fromJson(<span class="built_in">String</span>.valueOf(response),BaseResponse.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在实际设计系统的时候，通过状态码来判断服务器是否正确响应</div><div class="line">     * 如果响应错误，可以在这里直接通知view层错误情况</div><div class="line">     * 以下为根据百度api的数据格式设计的回调处理</div><div class="line">     * errorNum = 0 时，响应成功</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mResponse.errNum == <span class="number">0</span>) &#123;</div><div class="line">        serverResponse(mResponse.<span class="built_in">data</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        baseView.showServerError(mResponse.errNum, mResponse.errMsg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>serverResponse的定义为：<code>public abstract void serverResponse(Data data);</code></p>
<p>可以看到，在这里我使用了ClassTypeUtil.type（）解决BaseResponse<data> 的泛型擦除问题。这个方法的具体实现是：</data></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">ParameterizedType</span> <span class="selector-tag">type</span>(final Class raw, final Type... args)&#123;</div><div class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ParameterizedType</span>() &#123;</div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public Type[] getActualTypeArguments() &#123;</div><div class="line">                return args;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public Type getRawType() &#123;</div><div class="line">                return raw;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public Type getOwnerType() &#123;</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>BaseResponse<data>中Data的类型是clazz，我们通过<code>ParameterizedType type(final Class raw, final Type... args)</code>方法可以获取到BaseResponse<data> 的ParameterizedType对象,然后再通过<code>$Gson$Types.canonicalize(parameterized)</code>方法获取实际BaseResponse<data>的type对象,通过这个方法获取BaseResponse<data>类的实际type。</data></data></data></data></p>
<p>其实这和我们使用<code>gson.fromJson(String.valueOf(response)  
        ,new TypeToken&lt;BaseResponse&lt;Data&gt;&gt;() {}.getType());</code>中的<code>new TypeToken&lt;BaseResponse&lt;Data&gt;&gt;() {}.getType()</code>方法获取类的type是类似的，由于这里的Data是不确定的，所以我们需要自己实现一个获取class type的方法。如果大家有更好的方法，欢迎一起讨论哦。</p>
<p>通过上面的方法，我们实现了在serverResponse(Data data)自动处理服务器的错误或自动解析服务器返回的数据。</p>
<h2 id="上面的三个基类的总结"><a href="#上面的三个基类的总结" class="headerlink" title="上面的三个基类的总结"></a>上面的三个基类的总结</h2><p>我们先复习一下在<a href="http://tangpj.com/2016/09/23/mvp-structure-one/" title="上一篇文章" target="_blank" rel="external">上一篇文章</a>看过的一张图：</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp.jpg" alt="MVP模式图解" title="MVP模式图解"></p>
<p>把上图和笔者设计的BaseModel,BaseView,BasePresenter对应起来后，的图片如下：<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_example.png" alt="MVP框架使用实例" title="MVP框架实例"></p>
<p>封装后的MVP模块的使用流程大致如上图所示，读者可以结合代码进行分析。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>限于篇幅，今天就先介绍到这里。这里先对以后会增加的内容进行预告，在后面几篇文章中，笔者会提供上面框架的使用实例、如何通过拓展BasePresenter模块增加功能等。最后再下一篇中，笔者会放出这个系列的源码，这份源码会随着这个系列的文章的进展而完善，读者可以在我的github上关注下这个项目的动态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原创声明： 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;/em&gt; 在&lt;a href=&quot;http://tangpj.com/2016/09/23/mvp-structure-one/&quot; title=&quot;上一篇文章&quot;&gt;上一篇文章&lt;/a&gt;中，我们学习了关于MVP模式的简单使用方法。相信很多（实际上只有几个－－）读者看完文章后都会产生一个疑问：按照这个方法使用MVP模式进行开发的话，代码量是不是会大大增加？答案是对的，如果这样简单地使用MVP模式的话代码的确会大大增加。每个网络请求（数据库）都会由原来的MV模式的一个Model类文件变成4个类文件，分别是：IModel、Model、IPresenter、Presenter。所以简单的使用MVP模式进行开发带来的优点是逻辑清晰、代码间的耦合度大大下降，但是会带来一个很严重的问题就是代码量增加。作为一个懒人，要写这么多功能类似的代码实在是一种煎熬。所以在这一篇我会来探讨下如何优化MVP模式的结构来解决一个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Android架构" scheme="http://www.tangpj.com/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MVP开发框架" scheme="http://www.tangpj.com/tags/MVP%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>￼Android架构篇－－从零开始搭建 一个完善的 MVP模式开发框架（一），MVP模式的简单介绍篇</title>
    <link href="http://www.tangpj.com/2016/09/23/mvp-structure-one/"/>
    <id>http://www.tangpj.com/2016/09/23/mvp-structure-one/</id>
    <published>2016-09-23T07:19:33.000Z</published>
    <updated>2016-09-23T07:41:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p><em>摘要：</em> 在MVVM成熟之前MVP模式在Android上有被神化的趋势，笔者曾经在商业项目中从零开始大规模采用过MVP模式对项目进行开发。在使用MVP模式进行开发的时候发现项目的结构模式对开发是有一定的影响的，在这里笔者会对这一问题进行探讨。希望通过这篇blog能让读者了解如何使用MVP模式搭建一个功能完善的MVP模式开发框架，避免一些笔者认为比较严重的问题。</p>
<a id="more"></a>
<h1 id="为什么要使用MVP模式"><a href="#为什么要使用MVP模式" class="headerlink" title="为什么要使用MVP模式"></a>为什么要使用MVP模式</h1><p>在传统的Android开发中，我们一般是使用MVC模式进行开发的。<br>传统MVC模式介绍：</p>
<ol>
<li>View: 视图层，对应xml文件</li>
<li>Controller:  控制层，对应Activity和Fragment层，进行数据处理</li>
<li>Model：实体层，负责获取实体数据</li>
</ol>
<p>在Android开发中采用MVC模式的一个最大的弊端就是xml作为View层视图能力实在太弱，所以一般情况下我们都是通过Controller层来辅助处理一些视图的。这样的结果就导致Controller既作为控制层的同时又承担了View层的大部分功能，采用MVC模式往往会导致Activity和Fragment中的代码非常复杂。我们将Android中采用的MVC模式称为MV模式更加恰当。</p>
<p>MVP模式介绍：</p>
<ol>
<li>View: 视图层，对应xml文件与Activity/Fragment</li>
<li>Presenter: 逻辑控制层，同时持有View和Model对象</li>
<li>Model: 实体层，负责获取实体数据</li>
</ol>
<p>MVP模式的流程图如下：<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp.jpg" alt="" title="MVP模式图解"></p>
<p>采用MVP模式的优势是：</p>
<ol>
<li>把业务逻辑抽离到Presenter层中，View层专注于UI的处理。</li>
<li>分离视图逻辑与业务逻辑，达到解耦的目的。</li>
<li>提高代码的阅读性。</li>
<li>Presenter被抽象成接口，可以根据Presenter的实现方式进行单元测试。</li>
<li>可拓展性强。</li>
</ol>
<p>采用MVP模式的缺点：</p>
<ol>
<li>项目结构会对后期的开发和维护有一定的影响。具体视APP的体量而定。</li>
<li>代码量会增多，如何避免编写过多功能相似的重复代码是使用MVP开发的一个重点要处理的问题。</li>
<li>有一定的学习成本。</li>
</ol>
<p>综上所述，在Android上采用MVP模式的优势是：大大优化代码的维护性与拓展性的同时对代码进行深度解耦，使各个层级的分工更加明晰。</p>
<h1 id="Android上MVP模式的简单应用"><a href="#Android上MVP模式的简单应用" class="headerlink" title="Android上MVP模式的简单应用"></a>Android上MVP模式的简单应用</h1><p>先来看看一个简单用mvp模式模拟登陆的demo，下面的示例代码和其它简单介绍MVP模式的代码没有太大区别。如果有了解过的同学可以直接跳过看下一章关于如何优化MVP模式的结构的文章。</p>
<p>下面我们来看看在Android上用MVP模式实现简单的登录逻辑的方式：</p>
<h2 id="登陆界面"><a href="#登陆界面" class="headerlink" title=". 登陆界面"></a>. 登陆界面</h2><p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_login_activity.png" alt="" title="登陆界面"></p>
<ol>
<li>项目的结构：<br><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/mvp/mvp_login_structure.png" alt="" title="项目结构"></li>
</ol>
<p>从上面的代码结构图可看出，用MVP模式实现登陆模块需要创建6个文件，分别是M、V、P接口文件和接口的对应实现。其中LoginActivity就是View层的具体实现。这样的好处时Activity组件只需要负责处理UI相关逻辑就可以了，而相关的业务逻辑全部抽象到Presenter层中处理。通过这种方式能够很好的避免传统Android开发中的Activity/Fragment等UI组件既负责处理UI逻辑又处理业务逻辑的结果。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title=". 代码实现"></a>. 代码实现</h2><p>说了这么多，最后我们来看看代码的实现吧。</p>
<ol>
<li><p>ILoginModel</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> ILoginModel &#123;  </div><div class="line">    <span class="built_in">void</span> login(<span class="built_in">String</span> name ,<span class="built_in">String</span> password);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ILoginPresenter</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILoginPresenter</span> &#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loginToServer</span>(<span class="params">String userName,String password</span>)</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loginSucceed</span>(<span class="params"></span>)</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ILoginView</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoginView</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showProgress</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLoginView</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面是登陆模块对应的MVP接口的具体设计，下面我来简单介绍一下接口中的几个方法：</p>
<ul>
<li><code>ILoginModel.login(String name ,String password)</code>登陆方法，通过该方法向服务器发送登陆请求。</li>
<li><code>ILoginPresenter. loginToServer (String name ,String password)</code>通知Model响应登陆事件。</li>
<li><code>ILoginPresenter. loginSucceed()</code>当登陆事件完成时（成功/失败），Model层要通知该方法登陆事件已完成。</li>
<li><code>ILoginView. showProgress(boolean enable)</code>当Presenter层调用<code>loginToServer (String name ,String password)</code>方法时，要通过该方法通知View层显示加载动画。</li>
<li><code>ILoginView. showLoginView()</code>登陆成功时，Presenter层会通过该方法通知View层登陆已成功。</li>
</ul>
<p>下面我们来看看这几个接口的具体实现。</p>
<ol>
<li>LoginModel<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginModel</span> <span class="keyword">implements</span> <span class="title">ILoginModel</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ILoginPresenter presenter;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler();  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginModel</span><span class="params">(ILoginPresenter presenter)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.presenter = presenter;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name ,String password)</span> </span>&#123;  </div><div class="line">        mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                Log.d(<span class="string">"LoginModel"</span>, <span class="string">"run: "</span>);  </div><div class="line">                presenter.loginSucceed();  </div><div class="line">            &#125;  </div><div class="line">        &#125;,<span class="number">2000</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面的Model层实现了<code>login(String name,Stringpassword)</code>登陆方法，该方法的具体实现逻辑是通过线程休眠2秒来模拟网络登陆的过程,登陆成功后会通过LoginPresenter的<code>loginSucceed()</code>方法来通知Presenter层登陆结果。实际开发中我们需要根据具体的业务逻辑来实现该过程。</p>
<ol>
<li>LoginPresenter<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPresenter</span> <span class="keyword">implements</span> <span class="title">ILoginPresenter</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ILoginModel loginModel;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> ILoginView loginView;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginPresenter</span><span class="params">(ILoginView loginView)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.loginView = loginView;  </div><div class="line">        <span class="keyword">this</span>.loginModel = <span class="keyword">new</span> LoginModel(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginToServer</span><span class="params">(String userName, String password)</span> </span>&#123;  </div><div class="line">        loginView.showProgress(<span class="keyword">true</span>);  </div><div class="line">        loginModel.login(userName,password);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSucceed</span><span class="params">()</span> </span>&#123;  </div><div class="line">        loginView.showProgress(<span class="keyword">false</span>);  </div><div class="line">        loginView.showLoginView();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>从上面代码可以看出LoginPresenter的实现逻辑很简单，首先在构造方法中获取ILoginView对象并撞见ILoginModel对象。然后当View层调用<code>loginToServer(String userName, String password)</code>方法成功时，通知View层显示加载动画并调用ILoginModel层的<code>login(String userName, String password)</code>方法向服务器发送登陆请求。当登陆成功后（即Model层通知loginSucceed方法时）通过<code>loginView.showProgress(false)</code>方法通知View层隐藏加载动画，并通知View登陆成功。</p>
<ol>
<li>LoginActivity<br>对于LoginActivity我们只需要关注其中的几个方法即可<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">loginBtn</span><span class="selector-class">.setOnClickListener</span>(new View.OnClickListener() &#123;  </div><div class="line">    <span class="variable">@Override</span>  </div><div class="line">    public void onClick(View v) &#123;  </div><div class="line">        <span class="comment">//模拟登陆，不需要账号密码  </span></div><div class="line">        loginPresenter<span class="selector-class">.loginToServer</span>(<span class="string">""</span>,<span class="string">""</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Override</span>  </div><div class="line">public void showProgress(boolean enable) &#123;  </div><div class="line">    <span class="selector-tag">if</span> (enable)&#123;  </div><div class="line">        progressBar<span class="selector-class">.setVisibility</span>(View.VISIBLE);  </div><div class="line">        loginLayout<span class="selector-class">.setVisibility</span>(View.GONE);  </div><div class="line">    &#125;else &#123;  </div><div class="line">        progressBar<span class="selector-class">.setVisibility</span>(View.GONE);  </div><div class="line">        loginLayout<span class="selector-class">.setVisibility</span>(View.VISIBLE);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="variable">@Override</span>  </div><div class="line">public void showLoginView() &#123;  </div><div class="line">    Toast<span class="selector-class">.makeText</span>(LoginActivity.this,<span class="string">"登陆功"</span>,Toast.LENGTHSHORT)<span class="selector-class">.show</span>();  </div><div class="line">    finish();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面时实现了ILoginView接口的两个方法。<br>结合上面的代码可以看出，当点击登陆按钮的监听事件时，我们不需要关注业务逻辑，只需要调用<code>loginPresenter.loginToServer(&quot;&quot;,&quot;&quot;);</code>方法即可，然后根据实际情况实现View层中ILoginView接口的方法即可，这样达到了UI业务与逻辑完全分离的目的。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>关于在Android上应用MVP模式开发的第一篇到这里就结束了。这只是通过简单的例子介绍MVP模式在Android上的应用罢了，读者应该也看出来了，不进行任何处理的情况下使用MVP模式进行开发时相对于传统的MV模式来说代码量与文件数量增加了很多，相信不少同学会纠结在传统MV模式的代码量与MVP模式的逻辑清晰之间。<br>随着项目的体量变大，逻辑是否清晰会大大影响到我们的开发。笔者在使用MV进行开发时，常常不得不面对几百行甚至上千行代码的Acitvity，所以笔者在这里推荐大家使用MVP模式进行开发。<br>但是作为一个优秀的码农（其实是因为我很懒）肯定不会满足于这种结果，所以笔者通过不懈的努力研究出一套可以大大减少在使用MVP模式时代码量和文件量的方法，相信在国庆之后会给出第二篇关于优化使用MVP进行开发的文章。这个系列的最终目标是给出一个从零开始搭建一个功能完善的MVP快速开发框架。<br>最后给出本文DEMO的地址：<a href="https://github.com/DobbyTang/MVP-test-demo" target="_blank" rel="external">https://github.com/DobbyTang/MVP-test-demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;摘要：&lt;/em&gt; 在MVVM成熟之前MVP模式在Android上有被神化的趋势，笔者曾经在商业项目中从零开始大规模采用过MVP模式对项目进行开发。在使用MVP模式进行开发的时候发现项目的结构模式对开发是有一定的影响的，在这里笔者会对这一问题进行探讨。希望通过这篇blog能让读者了解如何使用MVP模式搭建一个功能完善的MVP模式开发框架，避免一些笔者认为比较严重的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Android架构" scheme="http://www.tangpj.com/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MVP开发框架" scheme="http://www.tangpj.com/tags/MVP%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android SearchView的高级用法，解决关于SearchView的样式与控制问题</title>
    <link href="http://www.tangpj.com/2016/09/11/searchview/"/>
    <id>http://www.tangpj.com/2016/09/11/searchview/</id>
    <published>2016-09-11T14:16:10.000Z</published>
    <updated>2016-09-23T07:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p>在Android开发的时候，有时候我们需要做一个关于搜索的模块。我发现很多初级工程师在开发搜索组件的时候会用EditText + Button + ListView(RecyclerView) 的方法重新制作一个searchView组件。虽然这种方案也是可行的，但是效果往往不尽人意。现在我来介绍种更为简单的方法，就是实用android.widget包下的SearchView控件。</p>
<a id="more"></a>
<h1 id="关于SearchView"><a href="#关于SearchView" class="headerlink" title="关于SearchView"></a>关于SearchView</h1><h2 id="什么是SearchView控件？"><a href="#什么是SearchView控件？" class="headerlink" title="什么是SearchView控件？"></a>什么是SearchView控件？</h2><p>SearchView是Android自带的一款搜索View，它的功能十分强大，而且样式也十分好看。在Google发布Material Design 介绍中的搜索按钮就是通过SearchView实现的。</p>
<h2 id="如何使用SearchView"><a href="#如何使用SearchView" class="headerlink" title="如何使用SearchView"></a>如何使用SearchView</h2><p>下面我们来介绍下在Material Design风格下如何使用SearchView。</p>
<ol>
<li>在toolbar中显示SearchView。</li>
</ol>
<p>首先在res/menu/目录下创建文件<code>menu_main.xml</code></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">menu</span> xmln<span class="variable">s:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmln<span class="variable">s:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    xmln<span class="variable">s:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    tool<span class="variable">s:context</span>=<span class="string">"com.example.searchview.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    &lt;item android:id=<span class="string">"@+id/search_view"</span></div><div class="line">        android:orderInCategory=<span class="string">"101"</span></div><div class="line">        android:title=<span class="string">"search"</span></div><div class="line">        android:icon=<span class="string">"@mipmap/search"</span></div><div class="line">        app:actionViewClass=<span class="string">"android.widget.SearchView"</span></div><div class="line">        app:showAsAction=<span class="string">"ifRoom|collapseActionView"</span></div><div class="line">        /&gt;</div><div class="line">&lt;/<span class="keyword">menu</span>&gt;</div></pre></td></tr></table></figure>
<p>配置完菜单选项后还需要在使用的Acitvity中添加如下代码，使用配置好的菜单</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面代码可以看出，SearchView的使用和一般的菜单项没有太大的区别。只是多了app:actionViewClass这句代码。app:actionViewClass的作用是指定菜单项的行为视图，它的作用是点击菜单项后会自动根据点击时间显示相应的View组件。所以在这里可以推断，除了设置为SearchView外，还可以把这个View设置为任何你想设置的View（Button,EditText、自定义View等），在这里先不展开讨论。</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/searchView/2016-09-10%2013_52_48.gif" alt=""></p>
<ol>
<li>响应SearchView的的行为<br>设置好SearchView后，我们要对SearchView进行监听，监听的方法普通使用SearchView一样。获取SearchView对象并进行监听的方法如下所示。</li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Override</span></div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater()<span class="selector-class">.inflate</span>(R.menu.menu_main, menu);</div><div class="line">        final MenuItem item = menu<span class="selector-class">.findItem</span>(R.id.search_view);</div><div class="line">        SearchView searchView = (SearchView) item<span class="selector-class">.getActionView</span>();</div><div class="line">        <span class="selector-tag">searchView</span><span class="selector-class">.setOnQueryTextListener</span>(new     SearchView.OnQueryTextListener() &#123;</div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public boolean onQueryTextSubmit(String query) &#123;</div><div class="line">                Toast<span class="selector-class">.makeText</span>(MainActivity.this,query,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="variable">@Override</span></div><div class="line">            public boolean onQueryTextChange(String newText) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="selector-tag">return</span> <span class="selector-tag">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>首先，通过Menu.findItem（int id）方法，通过我们在<code>menu_main.xml</code>文件中定义的id获取到对应的menuItem,然后在通过MenuItem.getActionView()方法获取actionViewClass(响应行为View，在本例子里就是获取对应的SearchView)。获取到ActionView的实例后，我们就可以通过调用对象的一些方法实现相应的行为了。例如在这里就是用Toast把输入的搜索词语显示到屏幕上。</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/searchView/2016-09-11%2015_56_45.gif" alt=""></p>
<h1 id="自定义SearchView的样式与重设监听事件"><a href="#自定义SearchView的样式与重设监听事件" class="headerlink" title="自定义SearchView的样式与重设监听事件"></a>自定义SearchView的样式与重设监听事件</h1><p>上面已经介绍了SearchView的简单的用法了，但是往往在实际开发的过程中并不能满足我们的需求。SearchView实际上是一款十分强大的View控件来的，下面我们来介绍下它到底有多么强大。</p>
<h2 id="SearchView源码分析"><a href="#SearchView源码分析" class="headerlink" title="SearchView源码分析"></a>SearchView源码分析</h2><p>首先我们来看看它的源码。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">boolean</span> DBG = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> LOG_TAG = <span class="string">"SearchView"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Private constant for removing the microphone in the keyboard.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> IME_OPTION_NO_MICROPHONE = <span class="string">"nm"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SearchAutoComplete mSearchSrcTextView;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View mSearchEditFrame;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View mSearchPlate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View mSubmitArea;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageView mSearchButton;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageView mGoButton;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageView mCloseButton;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageView mVoiceButton;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View mDropDownAnchor;</div></pre></td></tr></table></figure>
<p>我们发现SearchView实际上是一个View的集合，有4个View、ImageView,还有一为SearchAutoComplete。我们重点关注的就是这个叫SearchAutoComplete的控件。后面大多数的功能都是围绕这个控件展开的。</p>
<h3 id="SearchAutoComplete控件是什么？"><a href="#SearchAutoComplete控件是什么？" class="headerlink" title="SearchAutoComplete控件是什么？"></a>SearchAutoComplete控件是什么？</h3><p>我们对SearchAutoComplete的源码进行查看，简单分析它的功能。<br><code>public static class SearchAutoComplete extends AppCompatAutoCompleteTextView</code><br>通过查看源码我们可以知道SearchAutoComplete实际上就是一个AutoCompleteTextView,而AutoCompleteTextView。所以SearchAutoComplete实际上是对AutoCompleteTextView的一个拓展。而我们知道SearchView是有一个输入框和多个按钮的。所以我判断，这个SearchAutoComplete实际上就是SearchView上的输入框，那么我们可以根据这个特点，完成一些AutoCompleteTextView类似的功能。</p>
<h3 id="SearchAutoComplete控件能做什么？"><a href="#SearchAutoComplete控件能做什么？" class="headerlink" title="SearchAutoComplete控件能做什么？"></a>SearchAutoComplete控件能做什么？</h3><p>SearchAutoComplete的特点就是有自动补全的功能。那么我们可以通过这个功能做一个类似自动补全的功能，实际上很多Android中的自动补全功能都是通过AutoCompleteTextView来实现的。所以我们可以通过SearchAutoComplete的这个特性来实现搜索提示或者历史记录功能都可以。</p>
<h2 id="SearchView搜索提示（历史记录）的实现"><a href="#SearchView搜索提示（历史记录）的实现" class="headerlink" title="SearchView搜索提示（历史记录）的实现"></a>SearchView搜索提示（历史记录）的实现</h2><p>先让大家看看实现搜索提示的代码</p>
<p>自定义搜索提示数组：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string-array</span> <span class="attr">name</span>=<span class="string">"test_array"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>香港<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span>长沙<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>实现搜索提示代码：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        Resources resources = getResources();</div><div class="line">        String [] testStrings = resources.getStringArray(R.array.test_array);</div><div class="line">        <span class="keyword">final</span> MenuItem item = menu.findItem(R.id.search_view);</div><div class="line">        SearchView searchView = (SearchView) item.getActionView();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> completeTextId = searchView.getResources().getIdentifier(<span class="string">"android:id/search_src_text"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        AutoCompleteTextView completeText = (AutoCompleteTextView) searchView</div><div class="line">                .findViewById(completeTextId) ;</div><div class="line">        completeText.setThreshold(<span class="number">0</span>);</div><div class="line">        completeText.setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_1,testStrings));</div><div class="line">        searchView.setOnQueryTextListener(<span class="keyword">new</span> SearchView.OnQueryTextListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,query,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从代码可以看出来</p>
<ol>
<li>AutoCompleteTextView ID的获取方法为<code>int completeTextId = searchView.getResources().getIdentifier(&quot;android:id/search_src_text&quot;, null, null);</code>。为什么这样能获取到searchView中的AutoCompleteTextView的ID呢？我们先来看看SearchView的源码：<br> private final SearchAutoComplete mSearchSrcTextView;<br> mSearchSrcTextView = (SearchAutoComplete) findViewById(R.id.search_src_text);</li>
</ol>
<p>我们可以看到，在SearchView中SearchAutoComplete的id是<code>R.id.search_src_text</code>所以我们可以通过View.getResources(). getIdentifier()方法来获取View的内部控件（该方法对所有的View都适用）。</p>
<ol>
<li><p>completeText.setThreshold(0)方法的作用是设置提示条件。设置为0的时候就是代表输入长度为0即显示提示列表，设置为1代表输入长度为1时显示提示列表，以此类推。</p>
</li>
<li><p>通过completeText.setAdapter()方法设置搜索提示的数据源。搜索提示View实际上是一个ListView所以这里的setAdapter方法和ListView是一样的。为了演示方便，在这里我使用了ArrayAdapter。</p>
</li>
</ol>
<p>现在我们来运行看看显示的效果吧。</p>
<p><img src="https://raw.githubusercontent.com/DobbyTang/MarkdownRes/master/mBlog/searchView/2016-09-11%2021_09_12.gif" alt=""></p>
<p>嗯，符合我们的预期，但是在我们点击下面的搜索提示的时候，程序蹦贵了。报崩溃的原因是因为SearchView搜索结果在内部是通过Cursor传递的。我们通过查看源码可以看到，SearchView的搜索结果是通过SuggestionsAdapter显示的，它的数据是来源是Cursor。而在我们的源码中是通过ArrayAdapter实现的，所以造成数据不一致所以报错了。我们知道在android中Cursor是用来操作查询数据集合的，但是实际开发中，我们的数据源不一定是来源于数据库。所以在这里我们需要对SearchView进行改造下，使它满足我们的使用目的。</p>
<p>解决的方法为:<br>通过上面的分析，我们知道点击搜索提示列表中的搜索结果时实际上是在点击AutoCompleteTextView中的ListView的item。而通过查看AutoCompleteTextView 的源码我发现又一个setOnItemClickListener方法。通过这个方法重新设置OnItemClickListener即可解决这个问题。下面来看看解诀后的代码。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class="line">        Resources resources = getResources();</div><div class="line">        <span class="keyword">final</span> String [] testStrings = resources.getStringArray(R.array.test_array);</div><div class="line">        <span class="keyword">final</span> MenuItem item = menu.findItem(R.id.search_view);</div><div class="line">        <span class="keyword">final</span> SearchView searchView = (SearchView) item.getActionView();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> completeTextId = searchView.getResources().getIdentifier(<span class="string">"android:id/search_src_text"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        AutoCompleteTextView completeText = (AutoCompleteTextView) searchView</div><div class="line">                .findViewById(completeTextId) ;</div><div class="line">        completeText.setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>,R.layout.list_item,R.id.text,testStrings));</div><div class="line">        completeText.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">                searchView.setQuery(testStrings[position],<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        completeText.setThreshold(<span class="number">0</span>);</div><div class="line">        searchView.setOnQueryTextListener(<span class="keyword">new</span> SearchView.OnQueryTextListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,query,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>现在我们来分析下<code>searchView.setQuery(testStrings[position],true);</code>的这个方法。下面时这个方法的定义:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void setQuery(CharSequence <span class="keyword">query</span>, boolean submit) &#123;</div><div class="line">        mSearchSrcTextView.setText(<span class="keyword">query</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">query</span> != null) &#123;</div><div class="line">            mSearchSrcTextView.setSelection(mSearchSrcTextView.<span class="built_in">length</span>());</div><div class="line">            mUserQuery = <span class="keyword">query</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// If the query is not empty and submit is requested, submit the query</span></div><div class="line">        <span class="keyword">if</span> (submit &amp;&amp; !TextUtils.isEmpty(<span class="keyword">query</span>)) &#123;</div><div class="line">            onSubmitQuery();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>不难看出，query就是代表设置要提交的字符串，而submit为ture表示提交该字符串，为false为不提交。这样我们就可以达到该方法实现选择搜索提示的效果。根据这一特性，我们可以在实际开发的时候根据业务逻辑自定义Adapter来实现各种复杂的功能。<br>demo地址为： <a href="https://github.com/DobbyTang/SearchViewDemo" target="_blank" rel="external">https://github.com/DobbyTang/SearchViewDemo</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>SearchView是Android提供的一个十分强大的搜索组件，在这里我只是自定义了其中的一小部分功能。我曾经听到过很多小伙伴抱怨SearchView十分不好用，一般在开发搜索功能的时候都是重新制作一个搜索模块。但是通过对SearchView的源码进行分析可以发现，自定义该控件的方法实际上十分简单。并且随着对它的深入分析发现，一个完整的搜索模块需要的东西它都以更加优美的方法帮我们实现了。在开发的时候，我们不妨尝试下去使用这个十分强大的控件。<br>通过这篇文章，我想告诉大家的是，多看源码！！！多看源码！！！多看源码！！！看源码的过程很辛苦，但是这是我们获得进步的最快途径，并且能在看源码的过程中能够发现一些控件的十分强大的用法。虽然不一定能完全理解，但是当你使用源码中的一些方法做出一些很酷的事情的时候，你会发现有满满的成就感，SO,有空的时候看看源码吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Android开发的时候，有时候我们需要做一个关于搜索的模块。我发现很多初级工程师在开发搜索组件的时候会用EditText + Button + ListView(RecyclerView) 的方法重新制作一个searchView组件。虽然这种方案也是可行的，但是效果往往不尽人意。现在我来介绍种更为简单的方法，就是实用android.widget包下的SearchView控件。&lt;/p&gt;
    
    </summary>
    
      <category term="AndroidUI技术" scheme="http://www.tangpj.com/categories/AndroidUI%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android,UI" scheme="http://www.tangpj.com/tags/Android-UI/"/>
    
  </entry>
  
  <entry>
    <title>Android(Java)Bean自动转换为map的方法</title>
    <link href="http://www.tangpj.com/2016/08/28/bean_to_map/"/>
    <id>http://www.tangpj.com/2016/08/28/bean_to_map/</id>
    <published>2016-08-28T01:34:29.000Z</published>
    <updated>2016-09-23T07:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p>在开发Android的时候，用户端与服务端一般是通过传递Json数据的方式进行通信的，目前主流都是使用Gson库对Json数据进行处理但实际开发的时候，Gson库不一定能满足我们的需求。例如，我曾经做过一个项目，服务器以Json的格式发送数据到客户端，而客户端需要以Map类型的数据回传给服务器。所以在这个时候，我们就需要把Bean类以类似Gson库的方式自动转换成Map数据，以达到提高效率的目的。</p>
<a id="more"></a>
<h2 id="创建能自动解析数据的基类BaseBean"><a href="#创建能自动解析数据的基类BaseBean" class="headerlink" title="创建能自动解析数据的基类BaseBean"></a>创建能自动解析数据的基类BaseBean</h2><p>该类中只有一个方法，就是toMap。toMap方法的作用是通过class.getDeclaredFields()方法获取class对象的所有属性，然后将属性名转化为map对象的key，属性的值转化为map对象的value。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; params;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Method</span>: toMap()</div><div class="line">     * <span class="doctag">@author</span> create by Tang</div><div class="line">     * <span class="doctag">@date</span> date 16/8/23 下午3:20</div><div class="line">     * <span class="doctag">@Description</span>: 把实体类转换成Map类</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; toMap() &#123;</div><div class="line">        Class&lt;? extends Object&gt; clazz = <span class="keyword">this</span>.getClass();</div><div class="line">        Class&lt;? extends Object&gt; superClass = clazz.getSuperclass();</div><div class="line"></div><div class="line">        Field[] fields = clazz.getDeclaredFields();</div><div class="line">        Field[] superFields = superClass.getDeclaredFields();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (fields == <span class="literal">null</span> || fields.length == <span class="number">0</span> )&#123;</div><div class="line">            <span class="keyword">return</span> Collections.EMPTY_MAP;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        params = new HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">                field.setAccessible(<span class="literal">true</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (field.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                    ParamsName paramsName = field.getAnnotation(ParamsName.<span class="keyword">class</span>);</div><div class="line">                    String key;</div><div class="line">                    <span class="keyword">if</span> (paramsName == <span class="literal">null</span>)&#123;</div><div class="line">                        key = field.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        key = paramsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (field.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                        params.put(key , String.valueOf(field.<span class="keyword">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(key, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Field superField : superFields)&#123;</div><div class="line">                <span class="keyword">if</span> (superField.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                    superField.setAccessible(<span class="literal">true</span>);</div><div class="line">                    ParamsName superParamsName = superField.getAnnotation(ParamsName.<span class="keyword">class</span>);</div><div class="line">                    String superKey;</div><div class="line">                    <span class="keyword">if</span> (superParamsName == <span class="literal">null</span>)&#123;</div><div class="line">                        superKey = superField.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        superKey = superParamsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (superField.<span class="keyword">get</span>(<span class="keyword">this</span>) != <span class="literal">null</span>)&#123;</div><div class="line">                        params.put(superKey, String.valueOf(superField.<span class="keyword">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(superKey, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> params;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> String toString()&#123;</div><div class="line">        <span class="keyword">if</span> (params == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> params.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中class就是我们传递进来需要转换成map的Bean基类，superClass则是该类的父类。获取class的父类是由于class.getDeclaredFields方法只能获取自身的属性，而无法获得父类的属性，所以需要获取class对象的父类。<br>从上面的代码可以看出，将java实体类转换成map对象的方法很简单。通过遍历获得的Field对象，并通过Field.getName方法获取属性的命名作为map对象的key，通过Field.get(class)方法获取属性的值即可。<br><em>注 :</em> field.setAccessible(true)的作用是允许获取私有变量。</p>
<p>细心读者可能会发现，有时候我们实体类的命名和服务器发给我们的命名规则是不一样的。但是我们又不想修改属性名的情况下怎么办？Gson库提供给我们的方法是通过注解的方式（@SerializedName）实现对属性的重命名。那么如果我们自定义的Gmap类能不能也实现该功能呢？答案当然是可以的。</p>
<p>通过查看Gson的源码，我们发现Gson实现通过注解对属性进行重命名的方法实际是比较简单的。下面我们来详细看下注解是如何实现属性的重命名的。</p>
<h2 id="通过注解实现属性重命名"><a href="#通过注解实现属性重命名" class="headerlink" title="通过注解实现属性重命名"></a>通过注解实现属性重命名</h2><p>先看代码:</p>
<p>注解的定义：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="variable">@Target</span>(&#123;ElementType.FIELD, ElementType.METHOD&#125;)</div><div class="line">public <span class="variable">@interface</span> ParamsName &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @Method: value()</div><div class="line">     * @author create by Tang</div><div class="line">     * @date date 16/8/23 下午3:55</div><div class="line">     * @Description:</div><div class="line">     * 返回Map的key Name,默认为参数名</div><div class="line">     */</div><div class="line">    String value();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Map类中通过获取属性的注解对map的key实现重命名的方法：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ParamsName paramsName = field.getAnnotation(ParamsName.class);</div><div class="line">                    <span class="keyword">String</span> <span class="built_in">key</span>;</div><div class="line">                    <span class="keyword">if</span> (paramsName == <span class="keyword">null</span>)&#123;</div><div class="line">                        <span class="built_in">key</span> = field.getName();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">key</span> = paramsName.value();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (field.<span class="built_in">get</span>(<span class="keyword">this</span>) != <span class="keyword">null</span>)&#123;</div><div class="line">                        params.put(<span class="built_in">key</span> , <span class="keyword">String</span>.valueOf(field.<span class="built_in">get</span>(<span class="keyword">this</span>)));</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        params.put(<span class="built_in">key</span>, <span class="string">"null"</span>);</div><div class="line">                    &#125;</div></pre></td></tr></table></figure></p>
<p>注解的定义很简单，就是常规的java注解的定义。代码的实现也比较简单，通过field.getAnnotation（class）方法获得属性的注解，然后对获得的注解进行判断，如果注解值为空，则返回属性的实际名称，如果注解不为空，则返回注解的值。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用方法很简单，在创建bean类（或需要转化为map数据的类）时继承BaseBean即可，然后在需要的时候调用toMap()方法即可。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上就是我实现的把java bean类自动转化为map数据的方法。这个方法有个缺点，由于使用了反射的方法每次转化的时候会对java类遍历一次，所以这个方法会影响程序运行的性能。在查看Gson库的源码的时候，我发现Gson有更好的实现方法。具体我会在下一篇文章深度剖析Gson是如何在不影响效率的情况下实现数据的转化的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在开发Android的时候，用户端与服务端一般是通过传递Json数据的方式进行通信的，目前主流都是使用Gson库对Json数据进行处理但实际开发的时候，Gson库不一定能满足我们的需求。例如，我曾经做过一个项目，服务器以Json的格式发送数据到客户端，而客户端需要以Map类型的数据回传给服务器。所以在这个时候，我们就需要把Bean类以类似Gson库的方式自动转换成Map数据，以达到提高效率的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android小技巧" scheme="http://www.tangpj.com/tags/Android%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>使用fresco实现Android图片手势缩放功能</title>
    <link href="http://www.tangpj.com/2016/08/12/fresco_zoomable/"/>
    <id>http://www.tangpj.com/2016/08/12/fresco_zoomable/</id>
    <published>2016-08-11T16:16:10.000Z</published>
    <updated>2016-09-21T15:58:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <em>原创声明：</em> 该文章为原创文章，未经博主同意严禁转载。</p>
</blockquote>
<p>摘要:这是一篇关于使用图片加载框架fresco实现图片的手势放大和缩小的教程，希望能对你有所帮助。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>fresco是一款十分强大的图片加载框架，但是该框架本身不支持图片的手势放大和缩小的功能。在facebook官方的github上，facebook官方给出了具体的解决方案，但是官方的demo十分难跑起来，并且官方demo中的功能较为繁杂，理解和使用都有一定的困难。所以我做了一个测试demo出来供大家交流学习。<br><a id="more"></a></p>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><p>在开发前，需要在项目中引入fresco，引入方法是在Module的build.gradle文件的dependencies中添加一句代码</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.facebook.fresco:fresco:0.12.0'</span></div></pre></td></tr></table></figure>
<p>即可。</p>
<h2 id="集成Samples包"><a href="#集成Samples包" class="headerlink" title="集成Samples包"></a>集成Samples包</h2><p>Samples是fresco官方demo中的一个拓展包，包的目录如下图：</p>
<p><img src="https://github.com/DobbyTang/MarkdownRes/raw/master/mBlog/samples/samples_tab.png" alt="samples"></p>
<p>在该包中，和手势缩放相关的包有两个，分别为：gestures和zoomable。gestures包的主要功能的检测手势，zoomable包的主要功能是提供一个支持手势缩放的draweeView。因为在项目中只用到手势缩放的view，所以我只导入了这两个包。</p>
<p>导入方法很简单，只需要把Samples复制到工程目录下就可以。</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>导入完毕后还需要执行下面几步才能正常使用</p>
<ol>
<li><p>修改gradle.properties文件</p>
<p>在工程目录的gradle.properties文件中添加</p>
</li>
</ol>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Deps for gradle</div><div class="line">BUILD\_TOOLS\_VERSION=<span class="number">23.0</span><span class="number">.2</span></div><div class="line">COMPILE\_SDK\_VERSION=<span class="number">23</span></div><div class="line"></div><div class="line"># Deps for libraries</div><div class="line">JUNIT\_VERSION=<span class="number">4.12</span></div><div class="line">MOCKITO\_CORE\_VERSION=<span class="number">1.10</span><span class="number">.19</span></div><div class="line">ROBOLECTRIC\_VERSION=<span class="number">3.0</span></div><div class="line">NINEOLDANDROID\_VERSION=<span class="number">2.4</span><span class="number">.0</span></div><div class="line">SUPPORT\_LIB\_VERSION=<span class="number">23.2</span><span class="number">.1</span></div><div class="line">JSR\_305\_VERSION=<span class="number">3.0</span><span class="number">.0</span></div></pre></td></tr></table></figure>
<ol>
<li><p>修改settings.gradle</p>
<p>在工程目录的settings.gradle文件中添加</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> <span class="string">':samples:gestures'</span></div><div class="line"><span class="keyword">include</span> <span class="string">':samples:zoomable'</span></div></pre></td></tr></table></figure>
</li>
<li><p>在项目的Build.gradle中添加</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">project.ext &#123;</div><div class="line"><span class="attr">buildToolsVersion</span> = <span class="string">"<span class="subst">$&#123;BUILD_TOOLS_VERSION&#125;</span>"</span></div><div class="line"><span class="attr">compileSdkVersion</span> = COMPILE_SDK_VERSION.toInteger()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<p>做完以上两个步骤后，就能正常使用支持图片缩放的ZoomalbeDraweeView了。</p>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="查看单个图片"><a href="#查看单个图片" class="headerlink" title="查看单个图片"></a>查看单个图片</h3><ol>
<li><p>新建一个<strong>activity_zoomable.xml</strong>布局文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?\&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span></div><div class="line"> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line"> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">	</div><div class="line"> <span class="tag">&lt;<span class="name">com.facebook.samples.zoomable.ZoomableDraweeView</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/zoomableView"</span></div><div class="line">     <span class="attr">style</span>=<span class="string">"@style/drawee"</span></div><div class="line">     /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><strong>ZoomableActivity.java</strong>文件</p>
</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ZoomableActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="type">ZoomableDraweeView</span> draweeView;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">	    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	    <span class="type">FLog</span>.setMinimumLoggingLevel(<span class="type">FLog</span>.<span class="type">VERBOSE</span>);</div><div class="line">	    <span class="type">Set</span>&lt;<span class="type">RequestListener</span>&gt; listeners = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;&gt;();</div><div class="line">	    listeners.add(<span class="keyword">new</span> <span class="type">RequestLoggingListener</span>());</div><div class="line">	    <span class="type">ImagePipelineConfig</span> config = <span class="type">ImagePipelineConfig</span>.newBuilder(<span class="keyword">this</span>)</div><div class="line">	            .setRequestListeners(listeners)</div><div class="line">	            .setBitmapsConfig(<span class="type">Bitmap</span>.<span class="type">Config</span>.<span class="type">ARGB_8888</span>)</div><div class="line">	            .build();</div><div class="line">	    <span class="type">Fresco</span>.initialize(<span class="keyword">this</span>, config);</div><div class="line">	    setContentView(<span class="type">R</span>.layout.activity_zoomable);</div><div class="line">	</div><div class="line">	</div><div class="line">	    <span class="type">DraweeController</span> controller = <span class="type">Fresco</span>.newDraweeControllerBuilder()</div><div class="line">	            .setUri(<span class="string">"http://pic13.nipic.com/20110326/2457331_232645672000_2.jpg"</span>)</div><div class="line">	            .build();</div><div class="line">	    draweeView = (<span class="type">ZoomableDraweeView</span>) findViewById(<span class="type">R</span>.id.zoomableView);</div><div class="line">	    draweeView.setController(controller);</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的方法和SimpleDraweeView差不多，不同的地方是Fresco初始化的时候需要传入ImagePipelineConfig对象，并且ZoomableDraweeView不知直接设置图片的uri，而是需要通过DraweeController对象来设置。</p>
<p>通过上面的代码，已经能够完成图片的加载和图片的放大缩小操作。但是实际开发的时候往往需要显示一组图片，所以下面来介绍下如何使用ZoomableDraweeView展示一组图片，并支持手势放大缩小功能。</p>
<h3 id="显示多个图片"><a href="#显示多个图片" class="headerlink" title="显示多个图片"></a>显示多个图片</h3><ol>
<li><p>新建一个<strong>activity_zoomable_list.xml</strong>文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line"> xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line"> android:layout_width=<span class="string">"match_parent"</span></div><div class="line"> android:layout_height=<span class="string">"match_parent"</span></div><div class="line"> android:baselineAligned=<span class="string">"false"</span></div><div class="line"> android:orientation=<span class="string">"horizontal"</span></div><div class="line"> &gt;</div><div class="line"> &lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span></div><div class="line">     android:id=<span class="string">"@+id/pager"</span></div><div class="line">     android:layout_width=<span class="string">"match_parent"</span></div><div class="line">     android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line">	</div><div class="line">     &lt;FrameLayout</div><div class="line">         android:id=<span class="string">"@+id/page1"</span></div><div class="line">         android:layout_width=<span class="string">"match_parent"</span></div><div class="line">         android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">         &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">             android:id=<span class="string">"@+id/zoomableView1"</span></div><div class="line">             style=<span class="string">"@style/drawee"</span></div><div class="line">             /&gt;</div><div class="line">     &lt;/FrameLayout&gt;</div><div class="line">	</div><div class="line">     &lt;FrameLayout</div><div class="line">         android:id=<span class="string">"@+id/page2"</span></div><div class="line">         android:layout_width=<span class="string">"match_parent"</span></div><div class="line">         android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">         &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">             android:id=<span class="string">"@+id/zoomableView2"</span></div><div class="line">             style=<span class="string">"@style/drawee"</span></div><div class="line">             /&gt;</div><div class="line">     &lt;/FrameLayout&gt;</div><div class="line">	</div><div class="line">     &lt;FrameLayout</div><div class="line">         android:id=<span class="string">"@+id/page3"</span></div><div class="line">         android:layout_width=<span class="string">"match_parent"</span></div><div class="line">         android:layout_height=<span class="string">"match_parent"</span> &gt;</div><div class="line">         &lt;com<span class="selector-class">.facebook</span><span class="selector-class">.samples</span><span class="selector-class">.zoomable</span><span class="selector-class">.ZoomableDraweeView</span></div><div class="line">             android:id=<span class="string">"@+id/zoomableView3"</span></div><div class="line">             style=<span class="string">"@style/drawee"</span></div><div class="line">             /&gt;</div><div class="line">     &lt;/FrameLayout&gt;</div><div class="line">	</div><div class="line"> &lt;/android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span>&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p><strong>ZoomableListActivity.java</strong>文件</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ZoomableListActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">     <span class="type">FLog</span>.setMinimumLoggingLevel(<span class="type">FLog</span>.<span class="type">VERBOSE</span>);</div><div class="line">     <span class="type">Set</span>&lt;<span class="type">RequestListener</span>&gt; listeners = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;&gt;();</div><div class="line">     listeners.add(<span class="keyword">new</span> <span class="type">RequestLoggingListener</span>());</div><div class="line">     <span class="type">ImagePipelineConfig</span> config = <span class="type">ImagePipelineConfig</span>.newBuilder(<span class="keyword">this</span>)</div><div class="line">             .setRequestListeners(listeners)</div><div class="line">             .setBitmapsConfig(<span class="type">Bitmap</span>.<span class="type">Config</span>.<span class="type">ARGB_8888</span>)</div><div class="line">             .build();</div><div class="line">     <span class="type">Fresco</span>.initialize(<span class="keyword">this</span>, config);</div><div class="line">     setContentView(<span class="type">R</span>.layout.activity_zoomable_list);</div><div class="line">	</div><div class="line">     <span class="type">MyPagerAdapter</span> adapter = <span class="keyword">new</span> <span class="type">MyPagerAdapter</span>();</div><div class="line">     <span class="type">ViewPager</span> pager = (<span class="type">ViewPager</span>) findViewById(<span class="type">R</span>.id.pager);</div><div class="line">     pager.setAdapter(adapter);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>MyPagerAdapter.java</strong>文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">     FrameLayout page = (FrameLayout) container.getChildAt(position);</div><div class="line">     ZoomableDraweeView zoomableDraweeView = (ZoomableDraweeView) page.getChildAt(<span class="number">0</span>);</div><div class="line">     DraweeController controller = Fresco.newDraweeControllerBuilder()</div><div class="line">             .setUri(<span class="string">"http://pic25.nipic.com/20121112/5955207_224247025000_2.jpg"</span>)</div><div class="line">             .build();</div><div class="line">     zoomableDraweeView.setController(controller);</div><div class="line">     zoomableDraweeView.setTapListener(createTapListener(position));</div><div class="line">     page.requestLayout();</div><div class="line">     <span class="keyword">return</span> page;</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">     FrameLayout page = (FrameLayout) container.getChildAt(position);</div><div class="line">     ZoomableDraweeView zoomableDraweeView = (ZoomableDraweeView) page.getChildAt(<span class="number">0</span>);</div><div class="line">     zoomableDraweeView.setController(<span class="keyword">null</span>);</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View arg0, Object arg1)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> arg0 == arg1;</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="keyword">private</span> GestureDetector.<span class="function">SimpleOnGestureListener <span class="title">createTapListener</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> GestureDetector.SimpleOnGestureListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line">             Log.d(<span class="string">"MyPagerAdapter"</span>, <span class="string">"onLongPress: "</span> + position);</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面代码中，我通过pagerView显示多个ZoomableDraweeView（实际开发中应该使用动态添加pager的方法初始化pagerView）。具体的方法和展示单个图片差不多，区别在于用在展示多个图片的时候用ViewPager来展示。</p>
</li>
</ol>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>从上述代码来看，如果项目是使用fresco来作为图片加载框架的话，那么使用samples包中的ZoomableDraweeView来实现图片的手势放大和缩小时十分简便的。而且在facebook的官方demo中有很多关于fresco的拓展用法，所以在这里笔者推荐，在你使用fresco的时候，更多关于图片操作的拓展功能可以参照或者引用facebook官方demo的方法。</p>
<p><a href="https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo" target="_blank" rel="external">项目代码</a></p>
<p>项目代码放在笔者平时练习写的一个demo集合里面，通过svn checkout命令下载。</p>
<p><strong>注：</strong>这里介绍一个使用github时候的小诀窍给读者。下载一个项目中的单个or部分文件夹的时候，可以通过svn的checkout命令来下载。</p>
<p>具体用法是复制具体文件夹路径，然后把/tree/master/替换成/trunk/。例如，本例子中：</p>
<p>项目地址是：<a href="https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/tree/master/SampleTestDemo</a></p>
<p>下载地址是：<a href="https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo</a></p>
<p>即svn checkout <a href="https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo" target="_blank" rel="external">https://github.com/DobbyTang/AndroidLearnDemo/trunk/SampleTestDemo</a></p>
<p>遇到这个提示的时候<code>(R)eject, accept (t)emporarily or accept (p)ermanently?</code> ，输p即可。</p>
<p><br></p>
<blockquote>
<p>最近访客</p>
</blockquote>
<div class="ds-recent-visitors" data-num-items="28" data-avatar-size="42" id="ds-recent-visitors"></div>

]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;原创声明：&lt;/em&gt; 该文章为原创文章，未经博主同意严禁转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;摘要:这是一篇关于使用图片加载框架fresco实现图片的手势放大和缩小的教程，希望能对你有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;fresco是一款十分强大的图片加载框架，但是该框架本身不支持图片的手势放大和缩小的功能。在facebook官方的github上，facebook官方给出了具体的解决方案，但是官方的demo十分难跑起来，并且官方demo中的功能较为繁杂，理解和使用都有一定的困难。所以我做了一个测试demo出来供大家交流学习。&lt;br&gt;
    
    </summary>
    
      <category term="Android技术分享" scheme="http://www.tangpj.com/categories/Android%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Android图片处理" scheme="http://www.tangpj.com/tags/Android%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
